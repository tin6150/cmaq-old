head     1.1;
branch   1.1.1;
access   ;
symbols  CMAQv4_5_1:1.1.1.1 ASMD:1.1.1;
locks    ; strict;
comment  @c @;


1.1
date     2006.03.21.13.42.59;  author sjr;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2006.03.21.13.42.59;  author sjr;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@
C***********************************************************************
C   Portions of Models-3/CMAQ software were developed or based on      *
C   information from various groups: Federal Government employees,     *
C   contractors working on a United States Government contract, and    *
C   non-Federal sources (including research institutions).  These      *
C   research institutions have given the Government permission to      *
C   use, prepare derivative works, and distribute copies of their      *
C   work in Models-3/CMAQ to the public and to permit others to do     *
C   so.  EPA therefore grants similar permissions for use of the       *
C   Models-3/CMAQ software, but users are requested to provide copies  *
C   of derivative works to the Government without restrictions as to   *
C   use by others.  Users are responsible for acquiring their own      *
C   copies of commercial software associated with Models-3/CMAQ and    *
C   for complying with vendor requirements.  Software copyrights by    *
C   the MCNC Environmental Modeling Center are used with their         *
C   permissions subject to the above restrictions.                     *
C***********************************************************************

C RCS file, release, date & time of last delta, author, state, [and locker]
C $Header: /project/work/rep/BCON/src/input/m3conc/m3_bcout.F,v 1.8 2005/02/18 17:40:39 yoj Exp $ 

C what(1) key, module and SID; SCCS file; date and time of last delta:
C %W% %P% %G% %U%


      SUBROUTINE BCOUT( LOGUNIT, N_CTM_FLS, SDATE, STIME, NSTEPS, NCOLS_IN, 
     &                  NROWS_IN, NLAYS_IN, NSPCS_IN, NSPCS_OUT, SPMAP, 
     &                  N_MCNV_SP, SFAC, MCNV_COEFF, LCONV, LSCALE,
     &                  LCONVSP, EXT_IC_NAME, INFL_SP_NAME, MCNV_SPCS,
     &                  SPNAME_OUT, CTM_FL_NAME, LPING, N_PING_FLS,
     &                  PING_FL_NAME )

C*************************************************************************
C
C  FUNCTION: Reads the input models-3 concentration file(s) and opens and
C            writes the output IC file
C             
C  PRECONDITIONS: None
C 
C  KEY SUBROUTINES/FUNCTIONS CALLED:   
C
C  REVISION HISTORY: Prototype created by Jerry Gipson, January, 1998
C                    Modified by JG May, 1999 to treat PinG concs
C                    02/25/02 Steve Howard (Jeff Young) - dynamic allocation
C                    01/05/05 J.Young: vert dyn alloc - Use VGRD_DEFN
C                                      eliminate malloc calls
C
C*************************************************************************

      USE HGRD_DEFN   ! Module to store and load the horizontal grid variables
      USE VGRD_DEFN             ! vertical layer specifications

      IMPLICIT NONE     

C..INCLUDE FILES:
      INCLUDE SUBST_IOPARMS     ! IOAPI parameters
      INCLUDE SUBST_IOFDESC     ! IOAPI file description
      INCLUDE SUBST_IODECL      ! IOAPI declarations
!     INCLUDE SUBST_HGRD_ID     ! Horizontal grid
!     INCLUDE SUBST_VGRD_ID     ! Vertical grid
!     INCLUDE SUBST_COORD_ID    ! Grid coordinate data
      INCLUDE SUBST_GC_SPC      ! gas chemistry species table
      INCLUDE SUBST_AE_SPC      ! aerosol species table
      INCLUDE SUBST_NR_SPC      ! non-reactive species table
      INCLUDE SUBST_TR_SPC      ! tracer species table

      INCLUDE 'BC_PARMS.EXT'    ! BCON paramters

C..ARGUMENTS: 
      CHARACTER*16  EXT_IC_NAME( * )           ! Name of *.EXT IC species
      CHARACTER*16  SPNAME_OUT( * )            ! Output file species names
      CHARACTER*16  CTM_FL_NAME( * )           ! Name of CTM_CONC file
      CHARACTER*16  PING_FL_NAME( * )          ! Name of CTM_PING file
      CHARACTER*16  INFL_SP_NAME( * )          ! Name of input CTM species
      CHARACTER*16  MCNV_SPCS( N_GC_SPCD, * )  ! Mech conv species names

      INTEGER LOGUNIT           ! Unit number for output log
      INTEGER MXREL             ! Maximum no. of PinG releases per source
      INTEGER NBND              ! Bndry cell loop index
      INTEGER N_CTM_FLS         ! Number of input CTM files
      INTEGER N_PING_FLS        ! No. of PinG files
      INTEGER NCOLS_IN          ! No. of columns in input conc file
      INTEGER NLAYS_IN          ! No. of layers in input conc file
      INTEGER NROWS_IN          ! No. of rows in input conc file
      INTEGER NSPCS_IN          ! Total No. of species in input conc file(s)
      INTEGER NSPCS_OUT         ! Number of IC species on output file(s)
      INTEGER NSRC              ! No. of PinG sources
      INTEGER NSTEPS            ! Run duration, as number of output time steps
      INTEGER SDATE             ! Date for IC Output
      INTEGER STIME             ! Time for IC output

      INTEGER  SPMAP( * )       ! Map to CTM species from IC species
      INTEGER  N_MCNV_SP( * )   ! No. of mech input species for each
                                ! mech output species

      LOGICAL LCONV             ! Flag for mech conversion
      LOGICAL LPING             ! Flag to process PinG files
      LOGICAL LCONVSP( * )      ! Flag for mechanism conversion of species 
      LOGICAL LSCALE( * )       ! Flag for scaling input concs 

      REAL MCNV_COEFF( N_GC_SPCD, * )  ! Mech conv species coefficients
      REAL SFAC( * )                   ! Scale factor for input species concs

C..PARAMETERS:
      INTEGER      NSPCS               ! Total no. of *.EXT species
      PARAMETER  ( NSPCS = N_GC_SPC
     &                   + N_AE_SPC 
     &                   + N_NR_SPC 
     &                   + N_TR_SPC )

      REAL        CMIN                 ! Minimum output concentration
      PARAMETER   ( CMIN = 1.0E-30 )

C..EXTERNAL FUNCTIONS: 
      INTEGER INDEX1        ! Looks up name in table
 
C..SAVED LOCAL VARIABLES: None

C..SCRATCH LOCAL VARIABLES:
      CHARACTER*16  PNAME    ! Program Name
      CHARACTER*80  MSG      ! Log message
      CHARACTER*16  VNAME    ! Species name on CTM conc file

      CHARACTER*16 BC_FNAME( MXCTMS )  ! Logical names of IC Output file(s) 

      INTEGER  ABORT         ! Abort code for Cray HPALLOC
      INTEGER  C             ! Column loop indices
      INTEGER  ERRCODE       ! Error code for Cray HPALLOC
      INTEGER  FLN           ! IC output file number
      INTEGER  IND, ISP, V   ! Array indices for species
      INTEGER  JDATE         ! Current date
      INTEGER  JTIME         ! Current time
      INTEGER  SPC           ! Species loop index 
      INTEGER  L             ! Layer loop index
      INTEGER  N             ! Loop indices for species
      INTEGER  NCELL         ! Boundary cell index
      INTEGER  R             ! Row loop indices
      INTEGER  STEP          ! Time step loop index
      INTEGER  TSTEP         ! Time step on CTM file, hhmmss

      INTEGER  COL_LOC( NBNDY )  ! Output BC col corresponding to
                                 ! a cell in the input CTM file
      INTEGER  ROW_LOC( NBNDY )  ! Output BC row corresponding to
                                 ! a cell in the input CTM file

      LOGICAL  LNEG              ! Flag for negative concentratuin

      REAL DMIN   ! Smallest distance between cell centers
      REAL LAT    ! Latitude of center of cell for the IC output file
      REAL LON    ! Longitude of center of cell for the IC output file
      REAL X1     ! longitudenal distance between cell centers
      REAL Y1     ! latitudinal distance between cell centers


      REAL LAT_OUT( NBNDY )              ! Lat of cells in BC output file
      REAL LON_OUT( NBNDY )              ! Lon of cells in BC output file

      REAL LAT_IN(  NCOLS_IN, NROWS_IN ) ! Lat of cells in CTM conc file
      REAL LON_IN(  NCOLS_IN, NROWS_IN ) ! Lon of cells in CTM conc file

      REAL COUT( NBNDY, NLAYS )          ! Substituted output IC conc

      REAL CONCIN( NCOLS_IN, NROWS_IN, NLAYS_IN ) ! Input concs

      REAL BCIN( NBNDY, NLAYS_IN, NSPCS_IN ) ! Horizontally set BCs

      REAL BCVI( NBNDY, NLAYS, NSPCS_IN )    ! Vertically interpolated BCs

C**********************************************************************
      DATA ABORT / 0 /
      DATA PNAME /'BCOUT' /

      print *, ' '
      print *, ' NCOLS_IN: ', NCOLS_IN
      print *, ' NROWS_IN: ', NROWS_IN
      print *, ' NLAYS_IN: ', NLAYS_IN
      print *, ' NSPCS_IN: ', NSPCS_IN
      print *, ' NBNDY: ', NBNDY
      print *, ' NLAYS: ', NLAYS

ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c  Compute the lat and lon of the center of each input cell
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      IF( .NOT. DESC3 ( CTM_FL_NAME( 1 ) ) ) THEN
          MSG = 'Could not read DESC of  ' // CTM_FL_NAME( N ) 
     &       // ' file'
         CALL M3ERR( PNAME, JDATE, JTIME, MSG, .TRUE. )
      ENDIF

      DO C = 1, NCOLS_IN
         DO R = 1, NROWS_IN
            CALL LAT_LON( C, R, GDTYP3D, XORIG3D, YORIG3D,
     &                    XCELL3D, YCELL3D, XCENT3D, YCENT3D,
     &                    P_ALP3D, P_BET3D, P_GAM3D, LAT_IN( C, R ),
     &                    LON_IN( C, R ) )
         ENDDO
      ENDDO
 

ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c  Compute the lat and lon of the center of each output BC cell
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c..South edge
      NCELL = 0
      DO C = 1, NCOLS + 1
         R = 0
         NCELL = NCELL + 1
         CALL LAT_LON( C, R, GDTYP_GD, XORIG_GD, YORIG_GD, 
     &                 XCELL_GD, YCELL_GD, XCENT_GD, YCENT_GD,
     &                 P_ALP_GD, P_BET_GD, P_GAM_GD, LAT_OUT( NCELL ),
     &                 LON_OUT( NCELL ) )
      ENDDO

c..East Edge
      DO R = 1, NROWS + 1
         C = NCOLS + 1
         NCELL = NCELL + 1
         CALL LAT_LON( C, R, GDTYP_GD, XORIG_GD, YORIG_GD, 
     &                 XCELL_GD, YCELL_GD, XCENT_GD, YCENT_GD,
     &                 P_ALP_GD, P_BET_GD, P_GAM_GD, LAT_OUT( NCELL ),
     &                 LON_OUT( NCELL ) )
      ENDDO

c..North Edge
      DO C = 0, NCOLS
         R = NROWS + 1
         NCELL = NCELL + 1
         CALL LAT_LON( C, R, GDTYP_GD, XORIG_GD, YORIG_GD, 
     &                 XCELL_GD, YCELL_GD, XCENT_GD, YCENT_GD,
     &                 P_ALP_GD, P_BET_GD, P_GAM_GD, LAT_OUT( NCELL ),
     &                 LON_OUT( NCELL ) )
      ENDDO

c..West Edge
      DO R = 0, NROWS
         C = 0
         NCELL = NCELL + 1
         CALL LAT_LON( C, R, GDTYP_GD, XORIG_GD, YORIG_GD, 
     &                 XCELL_GD, YCELL_GD, XCENT_GD, YCENT_GD,
     &                 P_ALP_GD, P_BET_GD, P_GAM_GD, LAT_OUT( NCELL ),
     &                 LON_OUT( NCELL ) )
      ENDDO

ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c  Map the CTM file LAT/LONs to the BC file LAT/LONs
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      DO N = 1, NBNDY
         LAT = LAT_OUT( N )
         LON = LON_OUT( N )
         DMIN = 1.0E+30
         DO C = 1, NCOLS_IN
            DO R = 1, NROWS_IN
               Y1 = ( LAT - LAT_IN( C, R ) ) ** 2
               X1 = ( LON - LON_IN( C, R ) ) ** 2
               IF( ( X1 + Y1 ) .LT. DMIN ) THEN           
                  DMIN = X1 + Y1
                  COL_LOC( N ) = C
                  ROW_LOC( N ) = R
               ENDIF
             ENDDO
         ENDDO
      ENDDO

!     do n = 1, nbndy
!          write(*, '(3I4,6(1PE12.4) )') n, COL_LOC( n ),
!    &       ROW_LOC( n ),
!    &       LAT_OUT( n ), LON_OUT( n ),
!    &       LAT_IN( COL_LOC( n ), ROW_LOC( n ) ),
!    &       LON_IN( COL_LOC( n ), ROW_LOC( n ) ) 
!     enddo           
 
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c  Call the spatial interpolation routine to log info only 
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      CALL VINTERP( LOGUNIT, SDATE, STIME, NCOLS_IN, NROWS_IN, NLAYS_IN,
     &              NSPCS_IN, COL_LOC, ROW_LOC, BCIN, BCVI, CTM_FL_NAME )
 
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c  Call the routine to open the Models3 BC output file
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc     
      IF( .NOT. DESC3 ( CTM_FL_NAME( 1 ) ) ) THEN
         MSG = 'Could not read DESC of  ' // CTM_FL_NAME( 1 ) 
     &            // ' file'
         CALL M3ERR( PNAME, 0, 0, MSG, .TRUE. )
      ENDIF

      TSTEP = TSTEP3D

      CALL OPN_BC_FILE( LOGUNIT, SDATE, STIME, TSTEP, NSPCS_OUT, 
     &                  SPNAME_OUT, BC_FNAME, 1 )  

ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c  Get No. of sources & plume segemnts if PinG is being dine
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc     
      IF( LPING ) THEN 

         IF( .NOT. DESC3 ( PING_PDM_1 ) ) THEN
            MSG = 'Could not read DESC of  ' // PING_FL_NAME( 1 ) 
     &           // ' file'
            CALL M3ERR( PNAME, JDATE, JTIME, MSG, .TRUE. )
         ENDIF

         NSRC  = NCOLS3D
         MXREL = NROWS3D

      ENDIF

ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c  Top of loop over output time steps 
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      JDATE = SDATE
      JTIME = STIME

      DO STEP = 1, NSTEPS

c..Read the concentration file(s)
         LNEG = .FALSE.
         ISP = 0

         DO N = 1, N_CTM_FLS

            IF( .NOT. DESC3 ( CTM_FL_NAME( N ) ) ) THEN
               MSG = 'Could not read DESC of  ' // CTM_FL_NAME( N ) 
     &              // ' file'
               CALL M3ERR( PNAME, JDATE, JTIME, MSG, .TRUE. )
            ENDIF

            DO V = 1, NVARS3D

               ISP = ISP + 1
               VNAME = INFL_SP_NAME( V )
                  
               IF( .NOT. READ3( CTM_FL_NAME( N ), VNAME, ALLAYS3, JDATE, 
     &                          JTIME, CONCIN( 1, 1, 1 ) ) ) THEN
                  MSG = 'Could not read input CTM Conc file ' //
     &                   CTM_FL_NAME( N )         
                  CALL M3ERR( PNAME, JDATE, JTIME, MSG, .TRUE. )
               ENDIF


               DO NBND = 1, NBNDY
                  C = COL_LOC( NBND )
                  R = ROW_LOC( NBND )
                  DO L = 1, NLAYS_IN
                     BCIN( NBND, L, ISP ) = CONCIN( C, R, L )
                  ENDDO
               ENDDO

            ENDDO 

         ENDDO

c..Add in PinG contributions if necessary
         IF( LPING ) THEN 

            CALL M3_PING( LOGUNIT, JDATE, JTIME, NCOLS_IN, NROWS_IN,
     &                     NLAYS_IN, NSPCS_IN, INFL_SP_NAME, BCIN,
     &                     COL_LOC, ROW_LOC, NSRC, MXREL, N_PING_FLS,
     &                     PING_FL_NAME ) 

         ENDIF
      
c..Do the spatial interpolation
         CALL VINTERP( LOGUNIT, JDATE, JTIME, NCOLS_IN, NROWS_IN, 
     &                 NLAYS_IN, NSPCS_IN, COL_LOC, ROW_LOC, BCIN, 
     &                 BCVI, CTM_FL_NAME )
      
c..Write the output IC concentrations 
         DO N = 1, NSPCS_OUT

            FLN = ( N - 1 ) / MXVARS3 + 1
            VNAME = SPNAME_OUT( N )
           
            IF( LCONVSP( N ) ) THEN

               IND = INDEX1( MCNV_SPCS( N, 1 ), NSPCS_IN, INFL_SP_NAME )

               DO L = 1, NLAYS
                  DO NBND = 1, NBNDY
                     COUT( NBND, L ) = MCNV_COEFF( N, 1 ) * 
     &                                 BCVI( NBND, L, IND )
                     IF( COUT( NBND, L ) .LT. 0.0 ) THEN
                        LNEG = .TRUE.
                     ELSEIF( COUT( NBND, L ) .LT. CMIN ) THEN
                        COUT( NBND, L ) = CMIN 
                     ENDIF

                  ENDDO
               ENDDO

               IF( N_MCNV_SP( N ) .GT. 1 ) THEN

                  DO SPC = 2, N_MCNV_SP( N ) 

                     IND = INDEX1( MCNV_SPCS( N, SPC ), NSPCS_IN, INFL_SP_NAME )

                     DO L = 1, NLAYS
                        DO NBND = 1, NBNDY

                           COUT( NBND, L ) = COUT( NBND, L ) +
     &                                       MCNV_COEFF( N, SPC ) * 
     &                                       BCVI( NBND, L, IND )
                           IF( COUT( NBND, L ) .LT. 0.0 ) THEN
                              LNEG = .TRUE.
                           ELSEIF( COUT( NBND, L ) .LT. CMIN ) THEN
                              COUT( NBND, L ) = CMIN 
                           ENDIF

                        ENDDO
                     ENDDO

                  ENDDO

               ENDIF

            ELSE

               IND = SPMAP( N )

               DO L = 1, NLAYS
                  DO NBND = 1, NBNDY

                     COUT( NBND, L ) = BCVI( NBND, L, IND )
                     IF( COUT( NBND, L ) .LT. 0.0 ) THEN
                        LNEG = .TRUE.
                     ELSEIF( COUT( NBND, L ) .LT. CMIN ) THEN
                        COUT( NBND, L ) = CMIN 
                     ENDIF

                  ENDDO
               ENDDO

            ENDIF

            IF( .NOT. WRITE3( BC_FNAME( FLN ), VNAME, JDATE, JTIME,
     &                        COUT( 1, 1 ) ) ) THEN
               MSG =  'Could not WRITE species ' //  VNAME // 
     &                'to file ' // BC_FNAME( FLN ) 
               CALL M3ERR( PNAME, JDATE, JTIME, MSG, .TRUE. )
            ENDIF

         ENDDO

         IF( LNEG ) THEN
            MSG = 'Negative BCs output'
            CALL M3EXIT( PNAME, JDATE, JTIME, MSG, 1 ) 
         ENDIF

         WRITE( LOGUNIT, '( /5X, 3( A, :, 1X ), I8, ":", I6.6 )' )
     &         'Timestep written to', BC_FNAME( FLN ),
     &         'for date and time', JDATE, JTIME

         CALL NEXTIME( JDATE, JTIME, TSTEP )

      ENDDO

      RETURN

C************************* FORMAT STATEMENTS ***************************

      END
@


1.1.1.1
log
@CMAQv4_5_1 release
@
text
@@
