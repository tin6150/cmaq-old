head     1.1;
branch   1.1.1;
access   ;
symbols  CMAQv4_5_1:1.1.1.1 ASMD:1.1.1;
locks    ; strict;
comment  @c @;


1.1
date     2006.03.21.13.43.11;  author sjr;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2006.03.21.13.43.11;  author sjr;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@
C***********************************************************************
C   Portions of Models-3/CMAQ software were developed or based on      *
C   information from various groups: Federal Government employees,     *
C   contractors working on a United States Government contract, and    *
C   non-Federal sources (including research institutions).  These      *
C   research institutions have given the Government permission to      *
C   use, prepare derivative works, and distribute copies of their      *
C   work in Models-3/CMAQ to the public and to permit others to do     *
C   so.  EPA therefore grants similar permissions for use of the       *
C   Models-3/CMAQ software, but users are requested to provide copies  *
C   of derivative works to the Government without restrictions as to   *
C   use by others.  Users are responsible for acquiring their own      *
C   copies of commercial software associated with Models-3/CMAQ and    *
C   for complying with vendor requirements.  Software copyrights by    *
C   the MCNC Environmental Modeling Center are used with their         *
C   permissions subject to the above restrictions.                     *
C***********************************************************************

C RCS file, release, date & time of last delta, author, state, [and locker]
C $Header: /project/work/rep/BCON/src/mech_conv/user_defined/gc_spc_map.F,v 1.3 2002/04/12 14:19:34 yoj Exp $ 

C what(1) key, module and SID; SCCS file; date and time of last delta:
C %W% %P% %G% %U%


      SUBROUTINE GC_SPC_MAP( LOGUNIT, NSPCS_IN, N_GC_OUT, SPMAP, N_MECHSP,
     &                       SFAC, MECH_COEFF, LCONV, LSCALE, LCONVSP,
     &                       EXT_IC_NAME, INFL_SP_NAME, MCNV_SPCS, 
     &                       SPNAME_OUT )


C*************************************************************************
C
C  FUNCTION: Load arrays that are used in subsequent operations 
C            to convert species concentrations from one mechanism
C            to another using user specified conversion procedures.             
C             
C  PRECONDITIONS: None
C 
C  KEY SUBROUTINES/FUNCTIONS CALLED: None  
C
C  REVISION HISTORY: Prototype created by Jerry Gipson, January, 1998
C
C*************************************************************************

      IMPLICIT NONE

C..INCLUDE FILES:
      INCLUDE SUBST_GC_SPC    ! gas chemistry species table
      INCLUDE 'BC_PARMS.EXT'  ! BCON paramters

C..ARGUMENTS:
      CHARACTER*( * ) EXT_IC_NAME( * )      ! List of all BC species in
                                            ! .EXT files

      CHARACTER*( * ) INFL_SP_NAME( * )     ! List of species on the input
                                            ! file

      CHARACTER*( * ) SPNAME_OUT( * )       ! Output file species names

      CHARACTER*( * ) MCNV_SPCS(  N_GC_SPCD, * )  ! Mechanism species names
                                                  ! to convert from

      INTEGER LOGUNIT             ! Ouput log unit number
      INTEGER N_GC_OUT            ! No. of GC species for mech. conversion 
      INTEGER NSPCS_IN            ! Total no. of species in input file
      INTEGER SPMAP( * )          ! Map of output species to input species
      INTEGER N_MECHSP( * )       ! No. of mech species to convert from

      LOGICAL LCONV               ! Flag for mech conversion
      LOGICAL LCONVSP( * )        ! Flag for species mech conversion
      LOGICAL LSCALE( * )         ! Flag for scaling input concs 


      REAL MECH_COEFF( N_GC_SPCD, * ) ! Mech input species coefficients
      REAL SFAC( * )                  ! Input species conc scale factor
      
C..PARAMETERS: None
                                 
C..EXTERNAL FUNCTIONS:
      INTEGER INDEX1    ! Looks up name in table
      INTEGER JUNIT


C..SAVED LOCAL VARIABLES: None

C..SCRATCH LOCAL VARIABLES:
      CHARACTER*16  ENV_DFLT       ! Environment variable default value
      CHARACTER*80  ENV_DESC       ! Environment variable description
      CHARACTER*80  LINEIN         ! Input line
      CHARACTER*16  MECH_CONV_FILE ! Logical name of mech conv. file
      CHARACTER*80  MSG            ! Log message
      CHARACTER*16  PNAME          ! Program Name
      CHARACTER*256 MECHFL_NAME    ! Name of mech conv. file 

      INTEGER IND, IND2 ! Array index
      INTEGER MFILE     ! Unit number of mech conv file      
      INTEGER N, SPC    ! Loop indices
      INTEGER N_IC_NF   ! No. output mech species not in *.EXT file
      INTEGER N_SP_NF   ! No. input mech species not in input IC file
      INTEGER NSP       ! Species counter
      INTEGER STATUS    ! Status code


      LOGICAL LFIRST                ! Flag for first pass
      LOGICAL LUSED( MX_MECHFL_IC ) ! Flag for fully defined output species

      CHARACTER*16 MECHFL_IC_NAME( MX_MECHFL_IC )  ! Output mech names read
                                                   ! from mech conv file

      CHARACTER*16 MECHFL_SP_NAME( MX_MECHFL_IC, MXCVSP )  ! Input mech names
                                                           ! read from mech
                                                           ! conv file

      CHARACTER*16 MECHFL_IC_NF( MX_MECHFL_IC ) ! Output mech species not
                                                ! not in *.EXT file
 
      CHARACTER*16 MECHFL_SP_NF( MX_INFL_SP )   ! Input mech species not
                                                ! not in the input file

      INTEGER N_MECHFL_IC                 ! No. of output mech names referenced
                                          ! in mech conv file

      INTEGER N_MECHFL_SP( MX_MECHFL_IC ) ! No. of input mech species for each
                                          ! output species in mech conv file
                                           

      REAL MECHFL_COEFF( MX_MECHFL_IC, MXCVSP ) ! Coefficient for input mech
                                                ! species in mech conv file


C**********************************************************************
      DATA PNAME / 'SPC_MAP' /
      DATA MECH_CONV_FILE / 'MECH_CONV_FILE' /

ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c  Write appropriate log data
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      LCONV = .TRUE.

      WRITE( LOGUNIT, 92000 ) 

      LFIRST = .TRUE.

      ENV_DFLT = ' '
      ENV_DESC = 'Mechanism conversion file'        
      CALL ENVSTR( MECH_CONV_FILE , ENV_DESC, ENV_DFLT, MECHFL_NAME, 
     &             STATUS)

      IF( STATUS .NE. 0 ) THEN
         MSG = 'No Mechanism conversion file assigned to MECH_CONV_FILE'
         CALL M3ERR( PNAME, 0, 0, MSG, .TRUE. )
      ENDIF

      WRITE( LOGUNIT, 92020) MECHFL_NAME( 1 : 100 )

      MFILE = JUNIT()

      OPEN( UNIT = MFILE, FILE = MECHFL_NAME , ERR = 999 )

   20 CONTINUE
         READ( MFILE, 93000 , END = 40 ) LINEIN
         WRITE( LOGUNIT, 92040 ) LINEIN
         GO TO 20
   40 CONTINUE

      WRITE( LOGUNIT, 92060 )

      CLOSE( MFILE )

ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c  Get the conversion rules and determine those that can be used
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

      CALL RD_MECH_FL( LOGUNIT, N_MECHFL_IC, N_MECHFL_SP, MECHFL_COEFF,
     &                 MECHFL_NAME, MECHFL_IC_NAME, MECHFL_SP_NAME )


      N_IC_NF = 0

      DO N = 1, N_MECHFL_IC

         LUSED( N ) = .TRUE.

         IF( INDEX1( MECHFL_IC_NAME( N ), N_GC_SPC, GC_SPC ) .EQ. 0 ) THEN
             LUSED( N ) = .FALSE.
             N_IC_NF = N_IC_NF + 1
             MECHFL_IC_NF( N_IC_NF ) = MECHFL_IC_NAME( N )
         ENDIF 

      ENDDO

      N_SP_NF = 0

      DO N = 1, N_MECHFL_IC

         DO SPC = 1, N_MECHFL_SP( N )
            
            IND = INDEX1( MECHFL_SP_NAME( N, SPC ), NSPCS_IN, INFL_SP_NAME ) 

            IF( IND .EQ. 0 ) THEN
               LUSED(  N ) = .FALSE.
               IND2 = INDEX1( MECHFL_SP_NAME( N, SPC ), N_SP_NF, 
     &                        MECHFL_SP_NF )
               IF( IND2 .EQ. 0 ) THEN
                  N_SP_NF = N_SP_NF + 1
                  MECHFL_SP_NF( N_SP_NF ) = MECHFL_SP_NAME( N, SPC )
               ENDIF

            ENDIF


         ENDDO

      ENDDO
    
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c  Load arrays
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      NSP = 0

      DO N = 1, N_MECHFL_IC


         IF( LUSED( N ) ) THEN

            NSP = NSP + 1

            LSCALE( NSP ) = .FALSE.
            SFAC( NSP ) = 1.0

            N_MECHSP( NSP )     = N_MECHFL_SP( N )
            SPNAME_OUT( NSP )   = MECHFL_IC_NAME( N )

            DO SPC = 1, N_MECHFL_SP( N )
               MCNV_SPCS( NSP, SPC )    = MECHFL_SP_NAME( N, SPC )
               MECH_COEFF( NSP, SPC )   = MECHFL_COEFF( N, SPC )
            ENDDO

            IF( N_MECHSP( NSP ) .EQ. 1 .AND.
     &         MECH_COEFF( NSP, 1 ) .EQ. 1.0 ) THEN
               IND = INDEX1( MCNV_SPCS( NSP, 1 ), NSPCS_IN, 
     &                       INFL_SP_NAME )
               SPMAP( NSP )   = IND
               LCONVSP( NSP ) = .FALSE.
            ELSE
               SPMAP( NSP )   = 0
               LCONVSP( NSP ) = .TRUE.
            ENDIF


         ENDIF

      ENDDO 

      N_GC_OUT = NSP         

ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c  Output warning messages
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

      IF( N_IC_NF .GT. 0 ) THEN
         WRITE( LOGUNIT, 92080 )
         WRITE( LOGUNIT, 92100 ) ( MECHFL_IC_NF( N ), N = 1, N_IC_NF )
      ENDIF

      IF( N_SP_NF .GT. 0 ) THEN
         WRITE( LOGUNIT, 92120 )
         WRITE( LOGUNIT, 92100 ) ( MECHFL_SP_NF( N ), N = 1, N_SP_NF )
      ENDIF

      RETURN

  999 CONTINUE

      MSG = 'Could not open file ' // MECHFL_NAME
      STATUS = 2
      CALL M3EXIT( PNAME, 0, 0,' ', STATUS) 

C************************* FORMAT STATEMENTS ***************************
 
92000 FORMAT(  /1X, 79 ( '#' ) 
     &         /1X, '#   Species map section'
     &         /1X, 79 ( '#' )
     &        //5X, 'Input BC species converted from one mechanism ',
     &              'to another by user specified rules.' )

92020 FORMAT( //5X, 'Mechanism conversion file name: ', A 
     &        //5X, 'Mechanism conversion file contents: '
     &         /1X )

92040 FORMAT(  10X, A )

92060 FORMAT( //5X, 'End of file contents.' )

92080 FORMAT( // 5X, 'WARNING: The following output species in the ',
     &               'mechanism conversion file are not in the '
     &               '*.EXT files.'
     &         / 5X, '         BCs will not be generated for them. ' )

92100 FORMAT(   (15X, 4( A, 2X ) ) )

92120 FORMAT( // 5X, 'WARNING: The following input species in the ',
     &               'mechanism conversion file are not in the input',
     &               ' file.'
     &          /5X, '         BCs will not be generated for any ',
     &               'species that references them. ' )

93000 FORMAT( A )

      END
@


1.1.1.1
log
@CMAQv4_5_1 release
@
text
@@
