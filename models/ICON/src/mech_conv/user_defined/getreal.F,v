head     1.1;
branch   1.1.1;
access   ;
symbols  CMAQv4_5_1:1.1.1.1 ASMD:1.1.1;
locks    ; strict;
comment  @c @;


1.1
date     2006.03.21.13.54.11;  author sjr;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2006.03.21.13.54.11;  author sjr;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@
C***********************************************************************
C   Portions of Models-3/CMAQ software were developed or based on      *
C   information from various groups: Federal Government employees,     *
C   contractors working on a United States Government contract, and    *
C   non-Federal sources (including research institutions).  These      *
C   research institutions have given the Government permission to      *
C   use, prepare derivative works, and distribute copies of their      *
C   work in Models-3/CMAQ to the public and to permit others to do     *
C   so.  EPA therefore grants similar permissions for use of the       *
C   Models-3/CMAQ software, but users are requested to provide copies  *
C   of derivative works to the Government without restrictions as to   *
C   use by others.  Users are responsible for acquiring their own      *
C   copies of commercial software associated with Models-3/CMAQ and    *
C   for complying with vendor requirements.  Software copyrights by    *
C   the MCNC Environmental Modeling Center are used with their         *
C   permissions subject to the above restrictions.                     *
C***********************************************************************

C RCS file, release, date & time of last delta, author, state, [and locker]
C $Header: /project/work/rep/ICON/src/mech_conv/user_defined/getreal.F,v 1.3 2002/04/12 14:13:25 yoj Exp $ 

C what(1) key, module and SID; SCCS file; date and time of last delta:
C %W% %P% %G% %U%


      SUBROUTINE GETREALNUM
C     %W%  %P%  %G%  %U%
C***********************************************************************
C
C  FUNCTION: GETREALNUM gets the next real number in the input buffer. 
C
C  PRECONDITIONS: None
C 
C  KEY SUBROUTINES/FUNCTIONS CALLED: None
C
C  REVISION HISTORY: Prototype created by Jerry Gipson, January, 1998
C
C***********************************************************************
      IMPLICIT NONE
      
C..INCLUDES:
      INCLUDE 'PARSE.EXT' 
      
C..ARGUMENTS: None
                                        
C..PARAMETERS: None

C..EXTERNAL FUNCTIONS: None

C..SAVED LOCAL VARIABLES: None 

C..SCRATCH LOCAL VARIABLES:
      CHARACTER*15        NUMSTRING  ! String holding number

      INTEGER ICHR      ! ASCII code number of character
      INTEGER LENGTH    ! Length of numeric string
      INTEGER NOSIGNS   ! Number of pos or neg signs found
      INTEGER START     ! Starting position in input buffer

      LOGICAL LDECIMAL  ! Flag to indicate decimal point found
      LOGICAL LEXP      ! Flag to indicate exponent found
         
C***********************************************************************

      START = LPOINT
      LENGTH = 0
      NOSIGNS = 0
      LDECIMAL = .FALSE.
      LEXP = .FALSE.

c..Top of loop for getting characters in the number string
   10 CONTINUE
      IF( LENGTH .NE. 0 ) THEN
         LPOINT = LPOINT + 1
         IF( LPOINT .GT. IEOL ) THEN
            CHR = ' '
         ELSE
            CHR = INBUF( LPOINT : LPOINT )
         ENDIF
      ENDIF
      ICHR = ICHAR( CHR )
      LENGTH = LENGTH + 1

c..Check for decimal point
      IF( CHR .EQ. '.' ) THEN
         IF( .NOT. LDECIMAL ) THEN
            LDECIMAL=.TRUE.
            GO TO 10
         ELSE
            EXITSTAT = 2
            WRITE( MSG, 94000 ) 
            CALL M3MESG( MSG )
            WRITE( MSG, 94500 ) LINNUM, INBUF
            CALL M3MESG( MSG )
            WRITE( MSG, 94520 ) INBUF( START : LPOINT )
            CALL M3MESG( MSG )
            CALL M3EXIT( 'GETREALNUM', IZERO, IZERO,' ',EXITSTAT )
         ENDIF        
      ENDIF   

c..numeric value
      IF( ICHR .GE. 48 .AND. ICHR .LE. 57 ) GO TO 10

c..Exponent term
      IF( CHR .EQ. 'E' .OR. CHR .EQ. 'e' ) THEN
         IF( .NOT. LEXP) THEN
            LEXP = .TRUE.
            GO TO 10
         ELSE
            EXITSTAT = 2
            WRITE( MSG, 94020 ) 
            CALL M3MESG( MSG )
            WRITE( MSG, 94500 ) LINNUM, INBUF
            CALL M3MESG( MSG )
            WRITE( MSG, 94520 ) INBUF( START : LPOIN T)
            CALL M3MESG( MSG )
            CALL M3EXIT( 'GETREALNUM', IZERO, IZERO,' ',EXITSTAT )
         ENDIF
      ENDIF
      
      IF( CHR .EQ. '+' .OR. CHR .EQ. '-' ) THEN
         NOSIGNS = NOSIGNS + 1
         IF( NOSIGNS .LE. 2 ) THEN
            GO TO 10
         ELSE
            EXITSTAT = 2
            WRITE( MSG, 94040 ) 
            CALL M3MESG( MSG )
            WRITE( MSG, 94500 ) LINNUM, INBUF
            CALL M3MESG( MSG )
            WRITE( MSG, 94520 ) INBUF( START : LPOINT )
            CALL M3MESG( MSG )
            CALL M3EXIT( 'GETREALNUM', IZERO, IZERO,' ',EXITSTAT )
         ENDIF
      ENDIF

c..End of the numeric string; convert to real number
      NUMSTRING = INBUF( START : LPOINT - 1 )
      LENGTH = LENGTH - 1
      IF( ( .NOT. LEXP ) .AND. ( .NOT. LDECIMAL ) ) THEN
         NUMSTRING = NUMSTRING( 1 : LENGTH )//'.'
         LENGTH = LENGTH + 1
      ENDIF
      READ( NUMSTRING( 1 : LENGTH ),'( E20.6 )',ERR = 999 ) NUMBER
      IF( LPOINT .GT. IEOL ) CALL RDLINE
      IF( CHR .EQ. ' ' ) CALL GETCHR

      RETURN

c..Error converting numeric string to real number
  999 CONTINUE
      EXITSTAT = 2
      WRITE( MSG, 94060) 
      CALL M3MESG( MSG )
      WRITE( MSG, 94500 ) LINNUM, INBUF
      CALL M3MESG( MSG )
      WRITE( MSG, 94520 ) INBUF( START : LPOINT )
      CALL M3MESG( MSG )
      CALL M3EXIT('GETREALNUM', IZERO, IZERO,' ',EXITSTAT )
            
C*********************** FORMAT STATEMENTS ***************************** 
     

94000 FORMAT( 'ERROR: Two decimal points found in a numeric field' )
94020 FORMAT( 'ERROR: More than one E or e found in a numeric field' )
94040 FORMAT( 'ERROR: Too many + or - signs found in a numeric field' )
94060 FORMAT( 'ERROR: Numeric field contains an invalid character' )
94500 FORMAT( '       Line No. ',I4,': ',A )
94520 FORMAT( '       Numeric field: ',A )

      END
@


1.1.1.1
log
@CMAQv4_5_1 release
@
text
@@
