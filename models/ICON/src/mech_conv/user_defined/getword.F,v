head     1.1;
branch   1.1.1;
access   ;
symbols  CMAQv4_5_1:1.1.1.1 ASMD:1.1.1;
locks    ; strict;
comment  @c @;


1.1
date     2006.03.21.13.54.11;  author sjr;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2006.03.21.13.54.11;  author sjr;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@
C***********************************************************************
C   Portions of Models-3/CMAQ software were developed or based on      *
C   information from various groups: Federal Government employees,     *
C   contractors working on a United States Government contract, and    *
C   non-Federal sources (including research institutions).  These      *
C   research institutions have given the Government permission to      *
C   use, prepare derivative works, and distribute copies of their      *
C   work in Models-3/CMAQ to the public and to permit others to do     *
C   so.  EPA therefore grants similar permissions for use of the       *
C   Models-3/CMAQ software, but users are requested to provide copies  *
C   of derivative works to the Government without restrictions as to   *
C   use by others.  Users are responsible for acquiring their own      *
C   copies of commercial software associated with Models-3/CMAQ and    *
C   for complying with vendor requirements.  Software copyrights by    *
C   the MCNC Environmental Modeling Center are used with their         *
C   permissions subject to the above restrictions.                     *
C***********************************************************************

C RCS file, release, date & time of last delta, author, state, [and locker]
C $Header: /project/work/rep/ICON/src/mech_conv/user_defined/getword.F,v 1.3 2002/04/12 14:13:25 yoj Exp $ 

C what(1) key, module and SID; SCCS file; date and time of last delta:
C %W% %P% %G% %U%


      SUBROUTINE GETWORD

C***********************************************************************
C
C  FUNCTION: GETWORD gets the next word from the input buffer starting
C            with the current character; the word can be any length,
C            but only the first sixteen characters are retained.  The
C            first character must be alphabetic.
C
C  PRECONDITIONS: None
C 
C  KEY SUBROUTINES/FUNCTIONS CALLED: None
C
C  REVISION HISTORY: Prototype created by Jerry Gipson, January, 1998
C
C***********************************************************************
      IMPLICIT NONE
      
C..INCLUDES:
      INCLUDE 'PARSE.EXT' 
      
C..ARGUMENTS: None
                                        
C..PARAMETERS: None

C..EXTERNAL FUNCTIONS: None

C..SAVED LOCAL VARIABLES: None 

C..SCRATCH LOCAL VARIABLES:
      CHARACTER*( BUFLEN )  SAVBUF  ! Saved input buffer

      INTEGER START     ! Starting position in input buffer
      INTEGER LENGTH    ! Length of word
         
C***********************************************************************

c..Setup and make sure the first character is alphabetic
      LENGTH = 0
      START = LPOINT
      SAVBUF = INBUF
      IF( ( CHR .LT. 'A' .OR. CHR .GT. 'Z' ) .AND. 
     &    ( CHR .LT. 'a' .OR. CHR. GT. 'z' ) ) THEN
         EXITSTAT = 2
         WRITE( MSG, 94000 ) 
         CALL M3MESG( MSG )
         WRITE( MSG, 94020 ) LINNUM, INBUF 
         CALL M3MESG( MSG )
         WRITE( MSG, 94040 ) CHR 
         CALL M3MESG( MSG )
         CALL M3EXIT( 'GETWORD', IZERO, IZERO, ' ', EXITSTAT )
      ENDIF

c..Get the remaining characters; stop if a word spans a line
   20 CONTINUE
      LENGTH = LENGTH + 1
      LPOINT = LPOINT + 1

c..Get the next line if necessary (word wrap not allowed)
      IF( LPOINT .GT. IEOL ) THEN
         CALL RDLINE
         CALL GETCHR
         CHR = INBUF( LPOINT : LPOINT )
         IF( ( CHR .GE. 'A' .AND. CHR .LE. 'Z' ) .OR.
     &       ( CHR .GE. 'a' .AND. CHR. LE. 'z' ) .OR.
     &       ( CHR .EQ. ':' ) .OR. ( CHR .EQ. '_' ) ) THEN
            EXITSTAT = 2
            WRITE( MSG, 94060 ) 
            CALL M3MESG( MSG )
            WRITE( MSG, 94020 ) LINNUM, SAVBUF 
            CALL M3EXIT( 'GETWORD', IZERO, IZERO, ' ', EXITSTAT )
         ELSE
            GO TO 40  ! Word does not wrap around line
         ENDIF
      ENDIF

c..Include all characters in word that are valid; stop reading on an 
c..ivalid character
      CHR = SAVBUF(LPOINT:LPOINT)
      IF( CHR .GE. 'A' .AND. CHR .LE. 'Z' ) GO TO 20
      IF( CHR .GE. 'a' .AND. CHR .LE. 'z' ) GO TO 20      
      IF( CHR .GE. '0' .AND. CHR .LE. '9' ) GO TO 20
      IF( CHR .EQ. ':' ) GO TO 20
      IF( CHR .EQ. '_' ) GO TO 20
      IF( CHR .EQ. '(' .OR. CHR .EQ. '{' ) THEN 
         LENGTH = LENGTH - 1
         CALL EATCOM
         GO TO 20
      ENDIF
      
c..Truncate the word and get the next character if necessary
   40 CONTINUE
      LENGTH = MIN( LENGTH, WRDLEN )
      WORD = SAVBUF( START : START + LENGTH - 1)
      IF( CHR .EQ. ' ' ) CALL GETCHR
      RETURN
            
C*********************** FORMAT STATEMENTS *****************************      
      
94000 FORMAT('ERROR: The first character of a word must be alphabetic')
94020 FORMAT('   Line No. ',I4,': ',A)
94040 FORMAT('   First character: ',A)
94060 FORMAT('ERROR: A word cannot span two lines')

      END
   
@


1.1.1.1
log
@CMAQv4_5_1 release
@
text
@@
