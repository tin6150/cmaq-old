head     1.1;
branch   1.1.1;
access   ;
symbols  CMAQv4_5_1:1.1.1.1 ASMD:1.1.1;
locks    ; strict;
comment  @c @;


1.1
date     2006.03.21.13.54.00;  author sjr;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2006.03.21.13.54.00;  author sjr;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@
C***********************************************************************
C   Portions of Models-3/CMAQ software were developed or based on      *
C   information from various groups: Federal Government employees,     *
C   contractors working on a United States Government contract, and    *
C   non-Federal sources (including research institutions).  These      *
C   research institutions have given the Government permission to      *
C   use, prepare derivative works, and distribute copies of their      *
C   work in Models-3/CMAQ to the public and to permit others to do     *
C   so.  EPA therefore grants similar permissions for use of the       *
C   Models-3/CMAQ software, but users are requested to provide copies  *
C   of derivative works to the Government without restrictions as to   *
C   use by others.  Users are responsible for acquiring their own      *
C   copies of commercial software associated with Models-3/CMAQ and    *
C   for complying with vendor requirements.  Software copyrights by    *
C   the MCNC Environmental Modeling Center are used with their         *
C   permissions subject to the above restrictions.                     *
C***********************************************************************

C RCS file, release, date & time of last delta, author, state, [and locker]
C $Header: /project/work/rep/ICON/src/input/m3conc/m3_driver.F,v 1.7 2005/02/17 16:43:04 yoj Exp $ 

C what(1) key, module and SID; SCCS file; date and time of last delta:
C %W% %P% %G% %U%


      SUBROUTINE INIC( LOGUNIT, SDATE, STIME, EXT_IC_NAME )   

C*************************************************************************
C
C  FUNCTION: Opens the Models-3 CTM conc file(s) and checks for 
C            data consistency, and calls the routine to 
C            compute the BCs and write the output IC file  
C             
C  PRECONDITIONS: None
C 
C  KEY SUBROUTINES/FUNCTIONS CALLED: CK_CTM_FLS
C                                    GC_SPC_MAP
C                                    NGC_SPC_MAP
C                                    LST_SPC_MAP
C                                    BCOUT  
C
C  REVISION HISTORY: Prototype created by Jerry Gipson, January, 1998          
C                   
C      12/12/00 David Wong, LM
C        -- initialized N_PING_FLS = 0
C      01/24/02 Steve Howard (Jeff Young) - dynamic allocation
C      12/13/04 J.Young: vert dyn alloc - Use VGRD_DEFN
C*************************************************************************

      USE HGRD_DEFN   ! Module to store and load the horizontal grid variables
      USE VGRD_DEFN             ! vertical layer specifications

      IMPLICIT NONE     

C..INCLUDE FILES:
      INCLUDE SUBST_IOPARMS     ! IOAPI parameters
      INCLUDE SUBST_IOFDESC     ! IOAPI file description
      INCLUDE SUBST_IODECL      ! IOAPI declarations
!     INCLUDE SUBST_HGRD_ID     ! Horizontal grid
!     INCLUDE SUBST_VGRD_ID     ! Vertical grid
!     INCLUDE SUBST_COORD_ID    ! Grid coordinate data
      INCLUDE SUBST_GC_SPC      ! gas chemistry species table
      INCLUDE SUBST_AE_SPC      ! aerosol species table
      INCLUDE SUBST_NR_SPC      ! non-reactive species table
      INCLUDE SUBST_TR_SPC      ! tracer species table

      INCLUDE 'IC_PARMS.EXT'    ! ICON paramters

C..ARGUMENTS:
      CHARACTER( 16 ) :: EXT_IC_NAME( * )  ! Names of species in *.EXTs

      INTEGER LOGUNIT                 ! Unit number for output log
      INTEGER SDATE                   ! Date for IC output
      INTEGER STIME                   ! Time for IC output

C..PARAMETERS:
      ! Total number of species
      INTEGER, PARAMETER :: NSPCS = N_GC_SPC
     &                            + N_AE_SPC 
     &                            + N_NR_SPC 
     &                            + N_TR_SPC

      ! Dimension for total number of species
      INTEGER, PARAMETER :: NSPCSD = N_GC_SPCD
     &                             + N_AE_SPCD 
     &                             + N_NR_SPCD 
     &                             + N_TR_SPCD

C..EXTERNAL FUNCTIONS:

      LOGICAL ENVYN        !  gets value of logical environment variable


C..SAVED LOCAL VARIABLES: None

C..SCRATCH LOCAL VARIABLES:
      CHARACTER( 16 ) :: ENV_DFLT       ! Environment variable default value
      CHARACTER( 80 ) :: ENV_DESC       ! Environment variable description
      CHARACTER( 16 ) :: ICON_PING = 'ICON_PING' ! Environment variable for PinG (Y/N)
      CHARACTER( 16 ) :: FL_NAME        ! Input CTM file name
      CHARACTER( 80 ) :: MSG            ! Log message
      CHARACTER( 16 ) :: PNAME = 'INIC' ! Program name
      CHARACTER( 256 ) :: RET_VAL       ! Returned value of environment variable
      CHARACTER( 80 ) :: VARDESC        ! environment variable description

      CHARACTER( 16 ) :: CTM_FL_NAME( MXCTMS )            ! Name of CTM file
      CHARACTER( 16 ) :: PING_FL_NAME( MXCTMS )           ! Names of PinG files
      CHARACTER( 16 ) :: INFL_SP_NAME( MXCTMS * MXVARS3 ) ! Names of CTM species
      CHARACTER( 16 ) :: SPNAME_OUT( NSPCSD )             ! Output file species
                                                          ! names
      CHARACTER( 16 ) :: MCNV_SPCS( N_GC_SPCD, MXCVSP )   ! Mech conv species
                                                          ! names
      CHARACTER( 15 ) :: VALR1, VALR2                     ! Character value of real
      CHARACTER(  3 ) :: VALI1, VALI2                     ! Character value of real

      INTEGER N            ! File loop index
      INTEGER N_CTM_FLS    ! Number of input CTM files
      INTEGER N_PING_FLS   ! No. of PinG files
      INTEGER N_GC_OUT     ! No. of GC species for conversion 
      INTEGER NCOLS_IN     ! No. of columns in input conc file
      INTEGER NLAYS_IN     ! No. of layers in input conc file
      INTEGER NROWS_IN     ! No. of rows in input conc file
      INTEGER NSEGS        ! No. of plume segments on CTM_PING file
      INTEGER NSPCS_IN     ! CTM files species counter
      INTEGER NSPCS_OUT    ! Number of IC species on output file(s)
      INTEGER STATUS       ! Status code
      INTEGER V            ! Variable loop index
      INTEGER L            ! Layer loop index

      INTEGER SPMAP( NSPCSD )            ! Map to input file species from BC
                                         ! species
      INTEGER N_MCNV_SP( N_GC_SPCD )     ! No. of mech input species for each
                                         ! mech output species

      LOGICAL LCHKL                      ! Flag for layer consistency check
      LOGICAL LCHKD                      ! Flag for met file checked
      LOGICAL LCONV                      ! Flag for mech conversion
      LOGICAL LPING                      ! Flag to process PinG files
      LOGICAL LCONVSP( NSPCSD )          ! Flag for species mech conversion  
      LOGICAL LSCALE( MXVARS3 * MXCTMS)  ! Flag for scaling input concs 

      REAL MCNV_COEFF( N_GC_SPCD, MXCVSP )
      REAL SFAC( MXVARS3 * MXCTMS )      ! Scale factor for input spec concs

C**********************************************************************

      WRITE( LOGUNIT, 92000 )

ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c  Determine the number of input CTM conc files that need to be read
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      N_CTM_FLS = 0
      N_PING_FLS = 0

      WRITE( LOGUNIT, 92020 )

      DO N = 1, MXCTMS

         WRITE( FL_NAME, '( ''CTM_CONC_'', I1 )' ) N
         WRITE( ENV_DESC, '( ''CTM Concentration file no. '', I1 )' ) N 
         ENV_DFLT = ' '        
         CALL ENVSTR( FL_NAME, ENV_DESC, ENV_DFLT, RET_VAL, STATUS)

         IF( STATUS .EQ. 0 ) THEN
            N_CTM_FLS = N_CTM_FLS + 1
            CTM_FL_NAME( N_CTM_FLS ) = FL_NAME
         ENDIF
     
      ENDDO

      IF( N_CTM_FLS .EQ. 0 ) THEN
         MSG = 'No CTM CONC files found'
         CALL M3ERR( PNAME, 0, 0, MSG, .TRUE. )
      ENDIF

ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c  Open the input Models-3 CTM concentration file(s) and check that the
c  required time step is available on each file; save the species 
c  names on each file in one contiguous array
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      NSPCS_IN = 0

      DO N = 1, N_CTM_FLS

         IF( .NOT. OPEN3( CTM_FL_NAME( N ), FSREAD3, PNAME ) ) THEN
            MSG = 'Could not open ' // CTM_FL_NAME( N ) // ' file'
            CALL M3ERR( PNAME, SDATE, STIME, MSG, .TRUE. )
         ENDIF

         IF( .NOT. DESC3( CTM_FL_NAME( N ) ) ) THEN
            MSG = 'Could not read DESC of  ' // CTM_FL_NAME( N ) 
     &            // ' file'
            CALL M3ERR( PNAME, SDATE, STIME, MSG, .TRUE. )
         ENDIF

         IF( .NOT. CHECK3( CTM_FL_NAME( N ), 'ALL', SDATE, STIME ) ) THEN
            MSG = 'Requested time is not on the ' // CTM_FL_NAME( N )
     &            // ' file'
            CALL M3ERR( PNAME, SDATE, STIME, MSG, .TRUE. )
         ENDIF
     
         DO V = 1, NVARS3D
            NSPCS_IN = NSPCS_IN + 1
            INFL_SP_NAME( NSPCS_IN ) = VNAME3D( V )
         ENDDO

      ENDDO

ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c  Check multiple input CTM files for consistency & set input domain
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      IF( N_CTM_FLS .GT. 1 ) CALL CK_CTM_FLS( LOGUNIT, N_CTM_FLS,
     &                                        CTM_FL_NAME )

      IF( .NOT. DESC3( CTM_FL_NAME( 1 ) ) ) THEN
         MSG = 'Could not read DESC of  ' // CTM_FL_NAME( N ) 
     &         // ' file'
         CALL M3ERR( PNAME, SDATE, STIME, MSG, .TRUE. )
      ENDIF
      NCOLS_IN = NCOLS3D
      NROWS_IN = NROWS3D
      NLAYS_IN = NLAYS3D

ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c  Check input CTM files for layer consistency with MET_CRO_3D
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

      IF( NLAYS .NE. NLAYS3D ) THEN
!        WRITE( LOGUNIT, 94080 ) NLAYS, NLAYS3D
         WRITE( VALI1, '( I3 )' ) NLAYS
         WRITE( VALI2, '( I3 )' ) NLAYS3D
         MSG = 'No. of layers in MET_CRO_3D, ' // VALI1 //
     &         ' .ne. no. in CTM files, ' // VALI2
         CALL M3ERR( PNAME, SDATE, STIME, MSG, .TRUE. )
      ENDIF

      LCHKL = .FALSE.
      DO L = 1 , NLAYS + 1
         WRITE( VALR1, '( E15.5)' ) VGLVS_GD(  L )
         WRITE( VALR2, '( E15.5)' ) VGLVS3D( L )
         IF( VALR1 .NE. VALR2 ) THEN
            WRITE( LOGUNIT, 94440 ) L, VGLVS_GD( L ), L, VGLVS3D( L )
            LCHKL = .TRUE.
         ENDIF
      ENDDO
      IF ( LCHKL ) THEN
         MSG = 'CTM files layers inconsistent with MET_CRO_3D'
         CALL M3ERR( PNAME, SDATE, STIME, MSG, .TRUE. )
      ENDIF

ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c   Check MET_CRO_3D and MET_BDY_3 if necessary
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      LCHKD = .FALSE.

      IF( VGTYP_GD .NE. VGTYP3D .OR. VGTOP_GD .NE. VGTOP3D ) THEN 
          LCHKD = .TRUE.

         CALL CK_CTMMET_FL( LOGUNIT, SDATE, STIME, CTM_FL_NAME )

         CALL CK_ICMET_FL( LOGUNIT, SDATE, STIME  )
      ENDIF

ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c   Check PinG files for consistency if necessary 
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      LPING = .FALSE.
      VARDESC = 'PING flag'
      LPING = ENVYN( ICON_PING, VARDESC, LPING, STATUS )
      IF( STATUS .EQ. 1 ) THEN
         MSG = 'Environment variable improperly formatted'
         CALL M3ERR( PNAME, 0, 0, MSG, .TRUE. )
      ENDIF

      IF( LPING ) THEN 
         MSG = 'PinG processing requested'
         WRITE( LOGUNIT, '( /5X, A )' ) MSG

         CALL CK_PING_FLS( LOGUNIT, SDATE, STIME, 
     &                     N_CTM_FLS, CTM_FL_NAME, N_PING_FLS,
     &                     PING_FL_NAME, NSEGS )

         CALL CK_PDM_FL( LOGUNIT, SDATE, STIME, 
     &                   N_CTM_FLS, CTM_FL_NAME, NSEGS )

         IF( .NOT. LCHKD ) CALL CK_CTMMET_FL( LOGUNIT, SDATE, STIME, 
     &                                        CTM_FL_NAME )

      ELSE
         MSG = 'PinG processing NOT requested'
         WRITE( LOGUNIT, '( /5X, A )' ) MSG
      ENDIF

ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c   Build a species map and report 
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      CALL GC_SPC_MAP( LOGUNIT, NSPCS_IN, N_GC_OUT, SPMAP, N_MCNV_SP,
     &                 SFAC, MCNV_COEFF, LCONV, LSCALE, LCONVSP, 
     &                 EXT_IC_NAME, INFL_SP_NAME, MCNV_SPCS,  
     &                 SPNAME_OUT )

      CALL NGC_SPC_MAP( LOGUNIT, NSPCS_IN, N_GC_OUT, NSPCS_OUT, SPMAP, 
     &                  SFAC, LCONV, LSCALE, LCONVSP, EXT_IC_NAME,
     &                  INFL_SP_NAME, SPNAME_OUT )


      CALL LST_SPC_MAP( LOGUNIT, NSPCS_IN, N_GC_OUT, NSPCS_OUT, SPMAP, 
     &                  N_MCNV_SP, SFAC, MCNV_COEFF, LCONV, LSCALE,  
     &                  LCONVSP, EXT_IC_NAME, INFL_SP_NAME, MCNV_SPCS, 
     &                  SPNAME_OUT )

cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c  Call the routine that computes and outputs ICs from the input
c  CTM conc file(s)
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

      CALL ICOUT( LOGUNIT,
     &            N_CTM_FLS,
     &            SDATE, STIME,
     &            NCOLS_IN, NROWS_IN,
     &            NLAYS_IN, NSPCS_IN,
     &            NSPCS_OUT,
     &            SPMAP,
     &            N_MCNV_SP,
     &            SFAC, 
     &            MCNV_COEFF,
     &            LCONV,
     &            LSCALE,
     &            LCONVSP,
     &            EXT_IC_NAME,
     &            INFL_SP_NAME,
     &            MCNV_SPCS,
     &            SPNAME_OUT,
     &            CTM_FL_NAME,
     &            LPING,
     &            N_PING_FLS,
     &            PING_FL_NAME )

      RETURN

C************************* FORMAT STATEMENTS ***************************

92000 FORMAT( // 1X, 79( '#' ) 
     &         / 1X, '#  Input file section '
     &         / 1X, 79( '#' )
     &        // 5X, 'Initial Concentrations from a CMAQ CTM ',
     &               'concentration file.' )

92020 FORMAT( // 5X, 'Input CMAQ CTM file names: ' )

94080 FORMAT( / 5X, 'NLAYS = ', I3, '   NLAYS3D = ', I3 )
94440 FORMAT( / 5X, 'VGLVS_GD(', I2, ' ) = ', 1PE12.5, 
     &          2X,  'VGLVS3D(', I2, ' ) = ', 1PE12.5 )

      END
@


1.1.1.1
log
@CMAQv4_5_1 release
@
text
@@
