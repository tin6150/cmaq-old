head     1.1;
branch   1.1.1;
access   ;
symbols  CMAQv4_5_1:1.1.1.1 ASMD:1.1.1;
locks    ; strict;
comment  @c @;


1.1
date     2006.03.15.20.43.49;  author sjr;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2006.03.15.20.43.49;  author sjr;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@
C***********************************************************************
C   Portions of Models-3/CMAQ software were developed or based on      *
C   information from various groups: Federal Government employees,     *
C   contractors working on a United States Government contract, and    *
C   non-Federal sources (including research institutions).  These      *
C   research institutions have given the Government permission to      *
C   use, prepare derivative works, and distribute copies of their      *
C   work in Models-3/CMAQ to the public and to permit others to do     *
C   so.  EPA therefore grants similar permissions for use of the       *
C   Models-3/CMAQ software, but users are requested to provide copies  *
C   of derivative works to the Government without restrictions as to   *
C   use by others.  Users are responsible for acquiring their own      *
C   copies of commercial software associated with Models-3/CMAQ and    *
C   for complying with vendor requirements.  Software copyrights by    *
C   the MCNC Environmental Modeling Center are used with their         *
C   permissions subject to the above restrictions.                     *
C***********************************************************************

C RCS file, release, date & time of last delta, author, state, [and locker]
C $Header: /project/work/rep/CCTM/src/cloud/cloud_acm_hg/aqchem.F,v 1.7 2006/03/15 16:43:18 sjr Exp $

C what(1) key, module and SID; SCCS file; date and time of last delta:
C %W% %P% %G% %U%

      SUBROUTINE AQCHEM ( JDATE, JTIME, TEMP, PRES_PA, TAUCLD, PRCRATE,
     &                    WCAVG, WTAVG, AIRM, ALFA0, ALFA2, ALFA3, GAS,
     &                    AEROSOL, GASWDEP, AERWDEP, HPWDEP,
     &                    col, row)

C-----------------------------------------------------------------------
C
C  DESCRIPTION:
C    Compute concentration changes in cloud due to aqueous chemistry,
C    scavenging and wet deposition amounts.
C
C  Revision History:
C      No   Date   Who	What
C      -- -------- ---  -----------------------------------------
C      0  / /86    CW   BEGIN PROGRAM - Walceks's Original Code
C      1  / /86    RB   INCORPORATE INTO RADM
C      2  03/23/87 DH   REFORMAT
C      3  04/11/88 SJR  STREAMLINED CODE - ADDED COMMENTS
C      4  08/27/88 SJR  COMMENTS, MODIFIED FOR RPM
C      4a 03/15/96 FSB  Scanned hard copy to develop Models3
C                       Version.
C      5  04/24/96 FSB  Made into Models3 Format
C      6  02/18/97 SJR  Revisions to link with Models3
C      7  08/12/97 SJR  Revised for new concentration units (moles/mole)
C                       and new treatment of nitrate and nitric acid
C      8  01/15/98 sjr  revised to add new aitken mode scavenging
C                       and aerosol number scavenging
C      9  12/15/98 David Wong at LM:
C             -- change division of XL, TEMP to multiplication of XL, TEMP
C                reciprocal, respectively
C             -- change / TOTOX / TSIV to / ( TOTOX * TSIV )
C     10  03/18/99 David Wong at LM:
C             -- removed "* 1.0" redundant calculation at TEMP1 calculation
C     11  04/27/00 sjr  Added aerosol surface area as modeled species
C     12  12/02    sjr  changed calls to HLCONST and updated the dissociation
C                       constants
C     13  06/26/03 sjr  revised calculations of DTW based on CMAS website
C                       discussions
C     14  08/05/03 sjr  revision made to the coarse aerosol number washout
C     15  04/20/05  us  revisions to add sea salt species in the fine and
C                       coarse aerosol modes, and HCl dissolution/dissociation
C     16  07/06/05 bro  add mercury species.
C     17  10/13/05 sjr  fixed bug in the integration time step calculation
C                       (reported by Bonyoung Koo)
C     18  03/01/06 sjr  separate organic aerosols into primary, secondary
C                       biogenic, and secondary anthropogenic; fixed 3rd
C                       moment calc to include EC and primary organics
C                       (not secondary); re-arranged logic for setting
C                       Cl & Na ending conc; added pointers/indirect
C                       addressing for arrays WETDEP and LIQUID
C
C  Reference:
C     Walcek & Taylor, 1986, A theoretical Method for computing
C      vertical distributions of acidity and sulfate within cumulus
C      clouds, J. Atmos Sci.,  Vol. 43, no. 4 pp 339 - 355
C
C  Called by:  AQMAP
C
C  Calls the following subroutines:  calczen
C
C  Calls the following functions:  HLCONST
C
C  ARGUMENTS     TYPE      I/O       DESCRIPTION
C  ---------     ----  ------------  --------------------------------
C  GAS(ngas)     real  input&output  Concentration for species i=1,17
C  GASWDEP(ngas) real     output     wet deposition for species
C                                    (01)= SO2   conc (mol/mol)
C                                    (02)= HNO3  conc (mol/mol)
C                                    (03)= N2O5  conc (mol/mol)
C                                    (04)= CO2   conc (mol/mol)
C                                    (05)= NH3   conc (mol/mol)
C                                    (06)= H2O2  conc (mol/mol)
C                                    (07)= O3    conc (mol/mol)
C                                    (08)= FOA   conc (mol/mol)
C                                    (09)= MHP   conc (mol/mol)
C                                    (10)= PAA   conc (mol/mol)
C                                    (11)= H2SO4 conc (mol/mol)
C                                    (12)= HCL   conc (mol/mol)
C          OH radical                (13)= HO    conc (mol/mol)
C                                    (14)= HO2   conc (mol/mol)
C                                    (15)= Cl2   conc (mol/mol)
C          elemental merc.           (16)= Hg    conc (mol/mol)
C          HgCl2                     (17)= HgCl2 conc (mol/mol)
C
C  AEROSOL(naer) real input&output   Concentration for species i=1,38
C  AERWDEP(naer) real     output     wet deposition for species
C                                    (01)= SO4AKN  conc (mol/mol)
C                                    (02)= SO4ACC  conc (mol/mol)
C                                    (03)= SO4COR  conc (mol/mol)
C                                    (04)= NH4AKN  conc (mol/mol)
C                                    (05)= NH4ACC  conc (mol/mol)
C                                    (06)= NO3AKN  conc (mol/mol)
C                                    (07)= NO3ACC  conc (mol/mol)
C                                    (08)= NO3COR  conc (mol/mol)
C                                    (09)= ORGAAKN conc (mol/mol)
C                                    (10)= ORGAACC conc (mol/mol)
C                                    (11)= ORGPAKN conc (mol/mol)
C                                    (12)= ORGPACC conc (mol/mol)
C                                    (13)= ORGBAKN conc (mol/mol)
C                                    (14)= ORGBACC conc (mol/mol)
C                                    (15)= ECAKN   conc (mol/mol)
C                                    (16)= ECACC   conc (mol/mol)
C                                    (17)= PRIAKN  conc (mol/mol)
C                                    (18)= PRIACC  conc (mol/mol)
C                                    (19)= PRICOR  conc (mol/mol)
C                                    (20)= NAAKN   conc (mol/mol)
C                                    (21)= NAACC   conc (mol/mol)
C                                    (22)= NACOR   conc (mol/mol)
C                                    (23)= CLAKN   conc (mol/mol)
C                                    (24)= CLACC   conc (mol/mol)
C                                    (25)= CLCOR   conc (mol/mol)
C                                    (26)= NUMAKN  conc ( #/mol )
C                                    (27)= NUMACC  conc ( #/mol )
C                                    (28)= NUMCOR  conc ( #/mol )
C                                    (29)= SRFAKN  conc (m2/mol )
C                                    (30)= SRFACC  conc (m2/mol )
C                                    (31)= NACL    conc (mol/mol)
C                                    (32)= CACO3   conc (mol/mol)
C                                    (33)= MGCO3   conc (mol/mol)
C                                    (34)= A3FE    conc (mol/mol)
C                                    (35)= B2MN    conc (mol/mol)
C                                    (36)= K       conc (mol/mol)
C           mercury aitken           (37)= PHGAKN  conc (mol/mol)
C           mercury accum            (38)= PHGACC  conc (mol/mol)
C
C-----------------------------------------------------------------------

c mercury version

c based on earlier work done by Russ Bullock of USEPA and Kathy Brehme of
c CSC to incorporate mercury into the cloud model.

c mercury version adds statements to standard code to include mercury.

c Russ Bullock:
C >corrected array out-of-bounds problem, 9-2000
C >added Total Carbon Aerosol (EC) to input variable list, 9-2000
C >added Hg sorption rates to follow 1-hr e-folding time, 9-2000
C >added new calculation for DHg(IHgOP) to prevent accumulation of truncation
C  error when HgOL is depleted by reaction #4, 10-2000
C >removed second part of HO2 reaction for HgCl2 and combined all Hg(II)
C  into one reaction using the slower rate (1.1E4 M-1 s-1). 2-2001
C >changed dissolved chlorine oxidation reaction to use temperature
C  variable intrinsic Henry's constant for chlorine gas, 2/26/2001
C >eliminated scavenging ratio for EC and now put all EC into cloud
C  water just like particulate mercury, 2/26/2001
C >added sorption of Hg(II) ion to carbon aerosol in cloud water, 3/15/01
C >set the initial Hg(II) sorption ratio based on the gas/particle
C  ratio for Hg(II) species in the gas phase, 3/19/01
C >eliminated mercuric oxide (HgO) and the reaction HgO + H+ = Hg(II)
C  from the chemistry mechanism, and made Hg(II) the product of the
C  oxidation of elemental mercury by ozone, 3/20/01
C >puts all dissolved Hg(II) into RGM and all sorbed Hg(II) into the
C  particulate Hg species of the gas phase at the end of the cloud
C  chemistry step, 03/21/01
C >added molecular chlorine gas (Cl2) to the gas-phase species list
C  to simulate oxidation of Hg(0) by dissolved chlorine, 03/21/01
C >removed all feedback of mercury chemistry to pre-existing species
C  in the mechanism (no significant effect on any species), 03/22/01
C >added HO and HO2 to the gas-phase species list and eliminated
C  hard coded test values for their aqueous concentrations, 03/27/01
C >cleaned up variable test prints and other test logic, 03/28/01
C >changed cloud chemistry timestep to not be limited by the depletion
C  of elemental mercury by the Hg-oxidation reactions or by the sorption
C  and desorption of mercury species to EC, 03/17/04
C >modified timestep expansion based on S(IV) oxidation rate since
C  this could cause problems with the mercury chemistry, 03/23/04
C >maximums for loop counters I30C and ICNTAQ increased from 1000 to
C  3000 and from 3000 to 9000, respectively, to allow for the smaller
C  timesteps required for the mercury chemistry, 03/23/04
c >increased loop limits again to attempt to get program to run for
c  July1-15 2001 episode work cdt5.
c  I20C at 10000, I7777C at 10000, I30C at 10000, ICNTAQ at 30000.
c  bkx, 16apr2004.


c from phot.F
      USE GRID_CONF           ! horizontal & vertical domain specifications
      USE SUBST_MODULES

      IMPLICIT NONE

      INCLUDE SUBST_CONST          ! constants
      INCLUDE SUBST_IOPARMS        ! I/O parameters definitions
      INCLUDE SUBST_RXCMMN         ! Mechanism reaction common block
      INCLUDE 'AQ_PARAMS.EXT'      ! aqueous chemistry shared parameters

      INCLUDE SUBST_IODECL     ! I/O definitions and declarations
      INCLUDE SUBST_IOFDESC    ! file header data structuer
      INCLUDE SUBST_FILES_ID   ! file name parameters

      CHARACTER*120 XMSG           ! Exit status message
      DATA          XMSG / ' ' /

C...........PARAMETERS and their descriptions:

      INTEGER      NUMOX           ! number of S oxidizing reactions
      PARAMETER  ( NUMOX =  5 )

      INTEGER      NPR           ! number of Hg reactions exclude adsorb/absorb
      PARAMETER  ( NPR =  6 )

      INTEGER      NHgRXN           ! number of Hg reactions
      PARAMETER  ( NHgRXN =  20 )

      INTEGER      NRXN           ! number of all reactions
      PARAMETER  ( NRXN =  NUMOX + NHgRXN )


      REAL         H2ODENS         ! density of water at 20 C and 1 ATM
      PARAMETER  ( H2ODENS = 1000.0 )  ! (kg/m3)

      REAL         ONETHIRD       ! 1/3
      PARAMETER  ( ONETHIRD = 1.0 / 3.0 )

      REAL         TWOTHIRDS       ! 2/3
      PARAMETER  ( TWOTHIRDS = 2.0 / 3.0 )

      REAL         CONCMIN         ! minimum concentration
      PARAMETER  ( CONCMIN = 1.0E-30 )

      REAL         SEC2HR          ! convert seconds to hours
      PARAMETER  ( SEC2HR = 1.0 / 3600.0 )

C...........ARGUMENTS and their descriptions

      INTEGER      JDATE           ! current model date, coded YYYYDDD
      INTEGER      JTIME           ! current model time, coded HHMMSS

      REAL         AIRM            ! total air mass in cloudy layers (mol/m2)
      REAL         ALFA0           ! scav coef for aitken aerosol number
      REAL         ALFA2           ! scav coef for aitken aerosol sfc area
      REAL         ALFA3           ! scav coef for aitken aerosol mass
      REAL         HPWDEP          ! hydrogen wet deposition (mm mol/liter)
      REAL         PRCRATE         ! precip rate (mm/hr)
      REAL         PRES_PA         ! pressure (Pa)
      REAL         TAUCLD          ! timestep for cloud (s)
      REAL         TEMP            ! temperature (K)
      REAL         WCAVG           ! liquid water content (kg/m3)
      REAL         WTAVG           ! total water content (kg/m3)
      REAL         GAS    ( NGAS ) ! gas phase concentrations (mol/molV)
      REAL         AEROSOL( NAER ) ! aerosol concentrations (mol/molV)
      REAL         GASWDEP( NGAS ) ! gas phase wet deposition array (mm mol/liter)
      REAL         AERWDEP( NAER ) ! aerosol wet deposition array (mm mol/liter)
      INTEGER      COL
      INTEGER      ROW

C...........LOCAL VARIABLES (scalars) and their descriptions:

      LOGICAL, SAVE :: FIRSTIME = .TRUE. ! flag for first pass thru
      LOGICAL, SAVE :: L_AE3_VRSN        ! flag for AE3 mechanism version

      CHARACTER*16 PNAME           ! driver program name
      DATA         PNAME / 'AQCHEM' /
      SAVE         PNAME

      INTEGER      I20C            ! loop counter for do loop 20
      INTEGER      I30C            ! loop counter for do loop 30
      INTEGER      ITERAT          ! # iterations of aqueous chemistry solver
      INTEGER      I7777C          ! aqueous chem iteration counter
      INTEGER      ICNTAQ          ! aqueous chem iteration counter
      INTEGER      LIQ             ! loop counter for liquid species
      INTEGER      IOX             ! index over oxidation reactions

      INTEGER      IHg             ! index over Hg rxns, or general counter
      INTEGER      IHg_ox          ! index for an Hg rxn
      INTEGER      IHgSO3          ! index for an Hg rxn
      INTEGER      IHgHY           ! index for an Hg rxn
      INTEGER      IOHRAD          ! index for an Hg rxn
      INTEGER      IClI            ! index for an Hg rxn
      INTEGER      IHO2            ! index for an Hg rxn

      INTEGER      ISHgCl2         ! index for sorption
      INTEGER      ISHgSO3         ! index for sorption
      INTEGER      ISHgHY          ! index for sorption
      INTEGER      ISHgdisulf      ! index for sorption
      INTEGER      ISHgOHp         ! index for sorption
      INTEGER      ISHgOHCl        ! index for sorption
      INTEGER      ISHgII          ! index for sorption
      INTEGER      IDHgCl2         ! index for desorption
      INTEGER      IDHgSO3         ! index for desorption
      INTEGER      IDHgHY          ! index for desorption
      INTEGER      IDHgdisulf      ! index for desorption
      INTEGER      IDHgOHp         ! index for desorption
      INTEGER      IDHgOHCl        ! index for desorption
      INTEGER      IDHgII          ! index for desorption

      REAL         TMPVAR          ! temporary variable for calculations

      REAL         DEPSUM
      REAL         BETASO4
      REAL         A               ! iron's anion concentration
      REAL         AC              ! H+ concentration in cloudwater (mol/liter)
      REAL         ACT1            ! activity corretion factor!single ions
      REAL         ACT2            ! activity factor correction!double ions
      REAL         ACTB            !
      REAL         AE              ! guess for H+ conc in cloudwater (mol/liter)
      REAL         B               ! manganese's anion concentration
      REAL         PRES_ATM        ! pressure (Atm)
      REAL         BB              ! lower limit guess of cloudwater pH
      REAL         CA              ! Calcium conc in cloudwater (mol/liter)
      REAL         CAA             ! inital Calcium in cloudwater (mol/liter)
      REAL         CL              ! total Cl-  conc in cloudwater (mol/liter)
      REAL         CLACC           ! fine Cl- in cloudwater (mol/liter)
      REAL         CLACCA          ! initial fine Cl in cloudwater (mol/liter)
      REAL         CLAKNA          ! initial interstitial aero Cl (mol/liter)
      REAL         CLCOR           ! coarse Cl-  conc in cloudwater (mol/liter)
      REAL         CLCORA          ! init coarse Cl-  in cloudwater (mol/liter)
      REAL         ClI             ! Cl(I) conc in cloudwater (mol/liter), from Cl2(aq)
      REAL         CO2H            ! Henry's Law constant for CO2
      REAL         CO21            ! First dissociation constant for CO2
      REAL         CO22            ! Second dissociation constant for CO2
      REAL         CO212           ! CO21*CO22
      REAL         CO212H          ! CO2H*CO21*CO22
      REAL         CO21H           ! CO2H*CO21
      REAL         CO2L            ! CO2 conc in cloudwater (mol/liter)
      REAL         CO3             ! CO3= conc in cloudwater (mol/liter)
      REAL         CO3A            ! initial CO3 in cloudwater (mol/liter)
      REAL         CTHK1           ! cloud thickness (m)
      REAL         DTRMV           !
      REAL         DTS6            !
      REAL         DTWHG           ! safe timestep for mercury chemistry
      REAL         EBETASO4T       ! EXP( -BETASO4 * TAUCLD )
      REAL         EALFA0T         ! EXP( -ALFA0 * TAUCLD )
      REAL         EALFA2T         ! EXP( -ALFA2 * TAUCLD )
      REAL         EALFA3T         ! EXP( -ALFA3 * TAUCLD )
      REAL         EC              ! elemental carbon acc+akn aerosol in cloudwater (mol/liter)
      REAL         ECACCA          ! init EC ACC aerosol in cloudwater (mol/liter)
      REAL         ECAKNA          ! init EC AKN aerosol in cloudwater (mol/liter)
      REAL         ECw             ! elem. carbon suspended in water (g / liter)
      REAL         EC5             ! EC * 5
      REAL         FA              ! functional value ??
      REAL         FB              ! functional value ??
      REAL         FE              ! Fe+++ conc in cloudwater (mol/liter)
      REAL         FEA             ! initial Fe in cloudwater (mol/liter)
      REAL         FNH3            ! frac weight of NH3 to total ammonia
      REAL         FNH4ACC         ! frac weight of NH4 acc to total ammonia
      REAL         FHNO3           ! frac weight of HNO3 to total NO3
      REAL         FNO3ACC         ! frac weight of NO3 acc to total NO3
      REAL         FRACLIQ         ! fraction of water in liquid form
      REAL         FOA1            ! First dissociation constant for FOA
      REAL         FOAH            ! Henry's Law constant for FOA
      REAL         FOA1H           ! FOAH*FOA1
      REAL         FOAL            ! FOA conc in cloudwater (mol/liter)
      REAL         FTST            !
      REAL         GM              !
      REAL         GM1             !
      REAL         GM1LOG          !
      REAL         GM2             ! activity correction factor
      REAL         GM2LOG          !
      REAL         HA              !
      REAL         HB              !
      REAL         H2OW            !
      REAL         H2O2H           ! Henry's Law Constant for H2O2
      REAL         H2O2L           ! H2O2 conc in cloudwater (mol/liter)
      REAL         HCLH            ! Henry's Law Constant for HCL
      REAL         HCL1            ! First dissociation constant for HCL
      REAL         HCL1H           ! HCL1*HCLH
      REAL         HCLL            ! HCl  conc in  cloudwater (mol/liter)
      REAL         HCO2            ! HCO2 conc in cloudwater (mol/liter)
      REAL         HCO3            ! HCO3 conc in cloudwater (mol/liter)
      REAL         HeffHgCl2       ! Effective Henry's Law Constant for HgCl2
      REAL         HeffCl2         ! Effective Henry's Law Constant for Cl2
      REAL         HintCl2         ! Intrinsic Henry's Law Constant for Cl2
      REAL         HNO3H           ! Henry's Law Constant for HNO3
      REAL         HNO31           ! First dissociation constant for HNO3
      REAL         HNO31H          !
      REAL         HNO3L           ! HNO3 conc in cloudwater (mol/liter)
      REAL         HOH             ! Henry's Law Constant for HO
      REAL         HO2H            ! Henry's Law Constant for HO2
      REAL         HSO3            ! HSO3 conc in cloudwater (mol/liter)
      REAL         HSO4            ! HSO4 concn in cloudwater (mol/liter)
      REAL         HSO4ACC         ! accumulation mode HSO4 concn in cloudwater (mol/liter)
      REAL         HSO4COR         ! coarse HSO4 concn in cloudwater (mol/liter)
      REAL         HTST            !
      REAL         HgII            ! Hg(II) conc in cloudwater (mol/liter)
      REAL         HgH             ! Henry's Law Constant for Hg
      REAL         HgL             ! Hg conc in cloudwater (mol/liter)
      REAL         HgOHp           ! HgOH+ conc in cloudwater (mol/liter)
      REAL         HgOHp1          ! First dissociation constant for HgOH+
      REAL         HgOHp1I         ! Inverse HgOHp1
      REAL         HgOHCl          ! HgOHCl conc in cloudwater (mol/liter)
      REAL         HgOHCl1         ! First dissociation constant for HgOHCl
      REAL         HgOHCl1I        ! Inverse HgOHCl1
      REAL         HgCl21          ! First dissociation constant for HgCl2
      REAL         HgCl21I         ! Inverse HgCl21
      REAL         HgCl2H          ! Henry's Law Constant for HgCl2
      REAL         HgCl21H         ! HgCl21 * HgCl2H
      REAL         HgCl2L          ! HgCl2(aq) conc in cloudwater (mol/liter)
      REAL         HgHY            ! Hg(OH)2 conc in cloudwater (mol/liter)
      REAL         HgHY1           ! Equilibrium constant for Hg(OH)2
      REAL         HgHY1I          ! Inverse HgHY1
      REAL         HgSO3           ! HgSO3 conc in cloudwater (mol/liter)
      REAL         HgSO31          ! Equilibrium constant for HgSO3
      REAL         HgSO31I         ! Inverse HgSO31
      REAL         Hgdisulf        ! Hg(SO3)2-- conc in cloudwater (mol/liter)
      REAL         Hgdisulf1       ! Equilibrium constant for Hg(SO3)2--
      REAL         Hgdisulf1I      ! Inverse Hgdisulf1
      REAL         HO2             ! HO2 radical conc in cloudwater (mol/liter)
      REAL         K1K2I           ! HgSO31I * Hgdisulf1I
      REAL         K4K5I           ! HgOHp1I * HgHY1I
      REAL         K4K6I           ! HgOHp1I * HgOHCl1I
      REAL         K6a             ! Rate constant used in ox of Hg by chlorine
      REAL         K6b             ! Rate constant used in ox of Hg by chlorine
      REAL         KHO2            ! Rate constant used in redux of all HgII by HO2
      REAL         KeqHOCl         ! equilib constant used in ox of Hg by chlorine
      REAL         K               ! K conc in cloudwater (mol/liter)
      REAL         KA              ! initial K in cloudwater (mol/liter)
      REAL         Kp              ! sorption coeff. from Seigneur et al.(1998)
      REAL         LGTEMP          ! log of TEMP
      REAL         M3NEW           ! accumulation mode mass at time t
      REAL         M3OLD           ! accumulation mode mass at time 0
      REAL         MG              !
      REAL         MGA             ! inital Mg in cloudwater (mol/liter)
      REAL         MHPH            ! Henry's Law Constant for MHP
      REAL         MHPL            ! MHP conc in cloudwater (mol/liter)
      REAL         mincarb         ! 1.0E-18/WCAVG in g/Liter
      REAL         MN              ! Mn++ conc in cloudwater (mol/liter)
      REAL         MNA             ! initial Mn in cloudwater (mol/liter)
      REAL         NA              ! Na conc in cloudwater (mol/liter)
      REAL         NAACC           ! Na in cloudwater (mol/liter)
      REAL         NAACCA          ! initial Na in cloudwater (mol/liter)
      REAL         NAAKNA          ! init Aitken mode aer conc (mol/liter)
      REAL         NACOR           ! coarse Na in cloudwater (mol/liter)
      REAL         NACORA          ! init Coarse Na in cloudwater (mol/liter)
      REAL         NH31            ! First dissociation constant for NH3
      REAL         NH3H            ! Henry's Law Constant for NH3
      REAL         NH3DH20         !
      REAL         NH31HDH         !
      REAL         NH3L            ! NH3 conc in cloudwater (mol/liter)
      REAL         NH4             ! NH4+ conc in cloudwater (mol/liter)
      REAL         NH4AKNA         ! init NH4 akn conc in cloudwater (mol/liter)
      REAL         NH4ACCA         ! init NH4 acc conc in cloudwater (mol/liter)
      REAL         NITAER          ! total aerosol nitrate
      REAL         NO3             ! NO3 conc in cloudwater (mol/liter)
      REAL         NO3ACC          ! NO3 acc conc in cloudwater (mol/liter)
      REAL         NO3ACCA         ! init NO3 acc conc in cloudwater (mol/liter)
      REAL         NO3AKNA         ! init NO3 akn conc in cloudwater (mol/liter)
      REAL         NO3CORA         ! init NO3 coa conc in cloudwater (mol/liter)
      REAL         NO3COR          ! NO3 coarse conc in cloudwater (mol/liter)
      REAL         NUMCOR          ! coarse aerosol number in cloudwater (mol/liter)
      REAL         NUMCORA         ! initial coarse aerosol number in cloudwater (mol/liter)
      REAL         O3H             ! Henry's Law Constant for O3
      REAL         O3L             ! O3 conc in cloudwater (mol/liter)
      REAL         OH              ! OH- (ion)  conc in cloudwater (mol/liter)
      REAL         OHRAD           ! OH radical conc in cloudwater (mol/liter)
      REAL         ORGA            ! anthro SOA in cloudwater (mol/liter)
      REAL         ORGAACCA        ! init anthro ACC SOA in cloudwater (mol/liter)
      REAL         ORGAAKNA        ! init anthro AKN SOA in cloudwater (mol/liter)
      REAL         ORGP            ! primary ORGANIC aerosol in cloudwater (mol/liter)
      REAL         ORGPACCA        ! init primary ORG ACC aerosol in cloudwater (mol/liter)
      REAL         ORGPAKNA        ! init primary ORG AKN aerosol in cloudwater (mol/liter)
      REAL         ORGB            ! biogenic SOA in cloudwater (mol/liter)
      REAL         ORGBACCA        ! init biogenic ACC SOA in cloudwater (mol/liter)
      REAL         ORGBAKNA        ! init biogenic AKN SOA in cloudwater (mol/liter)
      REAL         PAAH            ! Henry's Law Constant for PAA
      REAL         PAAL            ! PAA conc in cloudwater (mol/liter)
      REAL         PCl20           ! total Cl2 partial pressure (atm)
      REAL         PCl2F           ! gas only Cl2 partial pressure (atm)
      REAL         PCO20           ! total CO2 partial pressure (atm)
      REAL         PCO2F           ! gas only CO2 partial pressure (atm)
      REAL         PFOA0           ! total ORGANIC acid partial pressure (atm)
      REAL         PFOAF           ! gas only ORGANIC ACID partial press (atm)
      REAL         PH2O20          ! total H2O2 partial pressure (atm)
      REAL         PH2O2F          ! gas only H2O2 partial pressure (atm)
      REAL         PHCL0           ! total HCL partial pressure (atm)
      REAL         PHCLF           ! gas only HCL partial pressure (atm)
      REAL         PHGAKNA         ! aitken mercury aerosol in water (moles/L)
      REAL         PHGACCA         ! accum  mercury aerosol in water (moles/L)
      REAL         PHNO30          ! total HNO3 partial pressure (atm)
      REAL         PHNO3F          ! gas only HNO3 partial pressure (atm)
      REAL         PHO0            ! total HO partial Pressure (atm)
      REAL         PHOF            ! gas only HO partial pressure (atm)
      REAL         PHO20           ! total HO2 partial Pressure (atm)
      REAL         PHO2F           ! gas only HO2 partial pressure (atm)
      REAL         PHg0            ! total Hg partial pressure (atm)
      REAL         PHgF            ! gas only Hg partial pressure (atm)
      REAL         PHgCl20         ! total HgCl2 partial pressure (atm)
      REAL         PHgCl2F         ! gas only HgCl2 partial pressure (atm)
      REAL         PMHP0           ! total MHP partial pressure (atm)
      REAL         PMHPF           ! gas only MHP partial pressure (atm)
      REAL         PNH30           ! total NH3 partial pressure (atm)
      REAL         PNH3F           ! gas only NH3 partial pressure (atm)
      REAL         PO30            ! total O3 partial pressure (atm)
      REAL         PO3F            ! gas only O3 partial pressure (atm)
      REAL         PPAA0           ! total PAA partial pressure (atm)
      REAL         PPAAF           ! gas only PAA partial pressure (atm)
      REAL         PRIM            ! PRIMARY acc+akn aerosol in cloudwater (mol/liter)
      REAL         PRIMCOR         ! PRIMARY coarse aerosol in cloudwater (mol/liter)
      REAL         PRIACCA         ! init PRI ACC aerosol in cloudwater (mol/liter)
      REAL         PRIAKNA         ! init PRI AKN aerosol in cloudwater (mol/liter)
      REAL         PRICORA         ! init PRI COR aerosol in cloudwater (mol/liter)
      REAL         PSO20           ! total SO2 partial pressure (atm)
      REAL         PSO2F           ! gas only SO2 partial pressure (atm)
      REAL         RATE            !
      REAL         RECIPA1         !
      REAL         RECIPA2         !
      REAL         RECIPAP1        ! one over pressure (/atm)
      REAL         RECIPCL2        !
      REAL         RGML            ! total dissolved Hg(II) in liquid phase
      REAL         RGMSOLD         ! previous sorbed Hg(II) in liquid phase
      REAL         RGMSNEW         ! current  sorbed Hg(II) in liquid phase
      REAL         RGMSINC         ! RGMSNEW - RGMSOLD
      REAL         RH2O2           !
      REAL         RHg6            !     ''        Hg with chlorine
      REAL         RHg_ox          !     ''        Hg ox by O3
      REAL         RHgSO3          !     ''
      REAL         RHgSO3I         !     ''        , inverse
      REAL         RHgHY           !     ''
      REAL         RHgHYI          !     ''        , inverse
      REAL         RMHP            !
      REAL         RPAA            !
      REAL         RHgad           !     ''        , overall adsorption
      REAL         RHgadI          !     ''        , inverse
      REAL         RHgde           !     ''        , overall desorption
      REAL         RHgdeI          !     ''        , inverse
      REAL         ROHRAD          !     ''
      REAL         RT              ! gas const * temperature (liter atm/mol)
      REAL         SCVEFF          ! Scavenging efficiency (%)
      DATA         SCVEFF / 100.0 / ! currently set to 100%
      SAVE         SCVEFF
      REAL         SF              ! fraction of aqueous Hg(II) sorbed to E.C.
      REAL         SIV             ! dissolved so2 in cloudwater (mol/liter)
      REAL         SK6             !
      REAL         SK6TS6          !
      REAL         SOVERL          ! Ratio of sorbed to dissolved Hg(II)
      REAL         SO21            ! First dissociation constant for SO2
      REAL         SO22            ! Second dissociation constant for SO2
      REAL         SO2H            ! Henry's Law Constant for SO2
      REAL         SO212           ! SO21*SO22
      REAL         SO212H          ! SO21*SO22*SO2H
      REAL         SO21H           ! SO21*SO2H
      REAL         SO2L            ! SO2 conc in cloudwater (mol/liter)
      REAL         SO3             ! SO3= conc in cloudwater (mol/liter)
      REAL         SO4             ! SO4= conc in cloudwater (mol/liter)
      REAL         SO4ACC          ! accumulation mode SO4= conc in cloudwater (mol/liter)
      REAL         SO4COR          ! coarse SO4= conc in cloudwater (mol/liter)
      REAL         SHgCl2          ! Sorbed HgCl2 conc in cloudwater (mol/liter)
      REAL         SHgSO3          ! Sorbed HgSO3 conc in cloudwater (mol/liter)
      REAL         SHgdisulf       ! Sorbed Hg(SO3)2-- conc in cloudwater (mol/liter)
      REAL         SHgOHp          ! Sorbed HgOHp conc in cloudwater (mol/liter)
      REAL         SHgHY           ! Sorbed Hg(OH)2 conc in cloudwater (mol/liter)
      REAL         SHgOHCl         ! Sorbed HgOHCl conc in cloudwater (mol/liter)
      REAL         SHgII           ! Sorbed HgII conc in cloudwater (mol/liter)
      REAL         SHgINIT         ! Initial total sorbed Hg in cloudwater (mol/liter)

      REAL         AHgCl2    ! additional mass from RGMS to add to SHgCl2
      REAL         AHgSO3    ! additional mass from RGMS to add to SHgSO3
      REAL         AHgdisulf ! additional mass from RGMS to add to SHgdisulf
      REAL         AHgOHp    ! additional mass from RGMS to add to SHgOHp
      REAL         AHgHY     ! additional mass from RGMS to add to SHgHY
      REAL         AHgOHCl   ! additional mass from RGMS to add to SHgOHCl
      REAL         AHgII     ! additional mass from RGMS to add to SHgII

      REAL         SovD            ! sorbed Hg(II) / desorbed Hg(II)
      REAL         STION           ! ionic strength
      REAL         TAC             !
      REAL         TEMP1           !
      REAL         TEMPC           ! temperature in degrees Centigrade
      REAL         TFOLD           ! e-folding time for adsorption equilibrium (sec)
      REAL         TIMEW           ! cloud chemistry clock (sec)
      REAL         TOTOX           !
      REAL         TOTAMM          ! total ammonium
      REAL         TOTNIT          ! total nitrate (excluding coarse mode)
      REAL         TS6             ! SO4 conc in cloudwater (mol/liter)
      REAL         TS6AKNA         ! init SO4 akn conc in cloudwater (mol/liter)
      REAL         TS6ACC          ! SO4 acc conc in cloudwater (mol/liter)
      REAL         TS6ACCA         ! init SO4 acc conc in cloudwater (mol/liter)
      REAL         TS6COR          ! coarse SO4 conc in cloudwater   (mol/liter)
      REAL         TS6CORA         ! init SO4 coa conc in cloudwater (mol/liter)
      REAL         TSIV            !
      REAL         TST             !
      REAL         WETFAC          ! converts mol/l to mm-mol/l based on precip
      REAL         XC1             ! (/mm)
      REAL         XC2             ! (liter-atm/mol/mm)
      REAL         XL              ! conversion factor (liter-atm/mol)
      REAL         ONE_OVER_XL     ! 1.0 / XL
      REAL         PRES_ATM_OVER_XL ! PRES_ATM / XL
      REAL         XLCO2           !
      REAL         XLH2O2          !
      REAL         XLHCL           ! const in calc of HCL final partial pres
      REAL         XLHNO3          !
      REAL         XLMHP           !
      REAL         XLNH3           !
      REAL         XLO3            !
      REAL         XLPAA           !
      REAL         XLSO2           !
      REAL         XLHg            !
      REAL         XLHgCl2         !

C...........LOCAL VARIABLES (arrays) and their descriptions:

      REAL         LIQUID( NLIQS ) ! wet deposition array (mm mol/liter)
      REAL         WETDEP( NLIQS ) ! wet deposition array (mm mol/liter)
      REAL         DSIVDT( 0:NUMOX ) ! rate of so2 oxid incloud (mol/liter/sec)
      REAL         DS4   ( 0:NUMOX ) ! S(IV) oxidized over timestep DTW(0)
      REAL         DTW   ( 0:NRXN ) ! cloud chemistry timestep (sec)
      REAL         DHgDT( NHgRXN ) ! rate of Hg spcs prod in cld (mol/liter/sec)
      REAL         DHg  ( NHgRXN ) ! Hg species product produced over tstep DTW(0)
c      CHARACTER*30 RXNSTRING ( NHgRXN ) ! Hg reaction description

      REAL         ONE_OVER_TEMP     ! 1.0 / TEMP

C...........EXTERNAL FUNCTIONS and their descriptions:

      REAL          HLCONST
      EXTERNAL      HLCONST

C...........INSORB is a logical variable used to initialize the fraction
C           of aqueous Hg(II) sorbed to suspended carbon

      LOGICAL      INSORB

c...this section of code based on phot.F method of retrieving lat and
c   lon from the grid coordinate file

      INTEGER      LOGDEV
      SAVE         LOGDEV
      REAL, ALLOCATABLE, SAVE :: LAT( :,: ) ! north lat in deg (cross pt.)
      REAL, ALLOCATABLE, SAVE :: LON( :,: ) ! west long in deg (cross pt.)
      INTEGER ALLOCSTAT
      CHARACTER( 16 ) :: VARNM

      INTEGER      GXOFF, GYOFF            ! global origin offset from file
C for INTERPX
      INTEGER       :: STRTCOLGC2, ENDCOLGC2, STRTROWGC2, ENDROWGC2

c these vars based on jproc method of zenith calculation

      real    csz  ! FRACTION OF THE SOLAR CONSTANT

C     XLON   - LONGITUDE (west longitudes > 0)
C     XLAT   - LATITUDE  (south latitudes < 0 < north latitudes)
      real    xlat    ! latitude  of single cell
      real    xlon    ! longitude of single cell
      INTEGER      DAY                ! julian day of year
      INTEGER      YEAR               ! year (yyyy)
      INTEGER      MONTH              ! month counter
      INTEGER ihr,imin,isec ! time in hrs, min, seconds
      INTEGER idate         ! yyyymmdd
      real    gmt  ! utc, military time in decimal hours

      LOGICAL      SCNDTIME ! Flag for 2ND call to aqchem for testing
      DATA         SCNDTIME / .FALSE. /
      SAVE         SCNDTIME

      real gw(2),aw(12),fac,wk,ga(2),aa(12)

C*********************************************************************
C     begin body of subroutine AQCHEM

D      if ( scndtime ) then    ! lat/lon array check
D        scndtime = .FALSE.
D        write(logdev,*)'lat array:'
D        write(logdev,1002)lat
D        write(logdev,*)'lon array:'
D        write(logdev,1002)lon
D1002    format(f10.5)
D        write(logdev,*)'k0: ',jdate,jtime,col,row,lat(col,row),lon(col,row)
D        write(logdev,*)'k1,1:',lat(1,1),lon(1,1)
D        write(logdev,*)'k1,5:',lat(1,5),lon(1,5)
D        write(logdev,*)'k5,10:',lat(5,10),lon(5,10)
D        write(logdev,*)'k10,5:',lat(10,5),lon(10,5)
D      endif  ! scndtime check

C...Initialization

      IF ( FIRSTIME ) THEN

        FIRSTIME = .FALSE.

         IF ( INDEX( MECHNAME, 'AE3' ) .NE. 0 ) THEN
           L_AE3_VRSN = .TRUE.
         ELSE
           L_AE3_VRSN = .FALSE.
         END IF

        scndtime = .TRUE.
        logdev = init3()

c this code extracted from phot.F

        CALL SUBHFILE ( GRID_CRO_2D, GXOFF, GYOFF,
     &                  STRTCOLGC2, ENDCOLGC2, STRTROWGC2, ENDROWGC2 )

D        write(logdev,*)'GXOFF,GYOFF,STRTCOLGC2,ENDCOLGC2,STRTROWGC2,ENDROWGC2'
D        write(logdev,*) GXOFF,GYOFF,STRTCOLGC2,ENDCOLGC2,STRTROWGC2,ENDROWGC2
D        write(logdev,*)'MY_NCOLS,MY_NROWS: ',MY_NCOLS,MY_NROWS

C...Get latitudes

        ALLOCATE ( LAT( MY_NCOLS,MY_NROWS ), STAT = ALLOCSTAT )
        IF ( ALLOCSTAT .NE. 0 ) THEN
          XMSG = 'Failure allocating LAT'
          CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT1 )
        END IF

        VARNM = 'LAT'
        XMSG = 'Could not read LAT from ' // GRID_CRO_2D
        IF ( .NOT. INTERPX( GRID_CRO_2D, VARNM, PNAME,
     &                      STRTCOLGC2,ENDCOLGC2, STRTROWGC2,ENDROWGC2, 1,1,
     &                      JDATE, JTIME, LAT ) ) THEN
          CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT1 )
        END IF

C...Get longitudes

        ALLOCATE ( LON( MY_NCOLS,MY_NROWS ), STAT = ALLOCSTAT )
        IF ( ALLOCSTAT .NE. 0 ) THEN
          XMSG = 'Failure allocating LON'
          CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT1 )
        END IF

        VARNM = 'LON'
        XMSG = 'Could not read LON from ' // GRID_CRO_2D
        IF ( .NOT. INTERPX( GRID_CRO_2D, VARNM, PNAME,
     &                      STRTCOLGC2,ENDCOLGC2, STRTROWGC2,ENDROWGC2, 1,1,
     &                      JDATE, JTIME, LON ) ) THEN
          CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT1 )
        END IF

        lon = lon * (-1.)

      END IF    ! FIRSTIME

c jproc method of zenith calculation
C...convert julian date to year, month, and day
C...  and to yyyymmdd format

      xlat = lat(col,row)
      xlon = lon(col,row)

      YEAR = INT( JDATE / 1000 )
      CALL DAYMON ( JDATE, MONTH, DAY )
      IDATE = YEAR * 10000 + MONTH * 100 + DAY

      ihr  =      int(JTIME/10000)
      imin = int( mod(JTIME,10000) / 100 )
      isec =      mod(JTIME,100)
      gmt  = float(ihr) + imin/60. + isec/3600.

      call calczen(xlat,xlon,idate,gmt,csz)
D      write(logdev,1040)'csz',col,row,xlat,xlon,jdate,jtime,idate,gmt,csz
D1040  format(a,2i3,f6.2,f7.2,i8,i7,i9,f8.2,3x,f6.2)

C...set logical Hg(II) sorption initialization variable

      INSORB = .TRUE.

      ONE_OVER_TEMP = 1.0 / TEMP

C...check for bad temperature, cloud air mass, or pressure

      IF ( TEMP .LE. 0.0 ) THEN
        IF ( AIRM .LE. 0.0 ) THEN
          IF ( PRES_PA .LE. 0.0 ) THEN
            XMSG = 'MET DATA ERROR'
            CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT2 )
          END IF
        END IF
      END IF

C...initialize counters and compute several conversion factors

      ICNTAQ = 0
      ITERAT = 0
      RT = ( MOLVOL / STDTEMP ) * TEMP             ! R * T (liter atm / mol)
      PRES_ATM = PRES_PA /  STDATMPA               ! pressure (atm)
      CTHK1 = AIRM * RT / ( PRES_ATM * 1000.0 )    ! cloud thickness (m)
      XL   = WCAVG * RT / H2ODENS     ! conversion factor (l-atm/mol)
      ONE_OVER_XL = 1.0 / XL
      PRES_ATM_OVER_XL = PRES_ATM / XL
      TST  = 0.999
      GM   = SCVEFF / 100.0
      ACT1 = 1.0
      ACT2 = 1.0
      GM2  = 1.0
      TIMEW = 0.0
      RECIPAP1 = 1.0 / PRES_ATM
      XC1  = 1.0 / ( WCAVG * CTHK1 )
      XC2  = RT / ( 1000.0 * CTHK1 )
      FRACLIQ = WCAVG / WTAVG

c output input amounts

D      ga(1) = gas(lhg)
D      ga(2) = gas(lhgcl2)
D      aa(1) = aerosol(lphgakn)
D      aa(2) = aerosol(lphgacc)
D
D      aa(3) = aerosol(lpriakn)
D      aa(4) = aerosol(lpriacc)
D      aa(5) = aerosol(lecakn)
D      aa(6) = aerosol(lecacc)
D
D      aa(7) = aerosol(lorgaakn)
D      aa(8) = aerosol(lorgaacc)
D      aa(9) = aerosol(lorgpakn)
D      aa(10)= aerosol(lorgpacc)
D      aa(11)= aerosol(lorgbakn)
D      aa(12)= aerosol(lorgbacc)
D
D      ga = ga * pres_atm_over_xl
D      aa = aa * pres_atm_over_xl
D
D       write(logdev,1000)'i1',jdate,jtime,xlat,xlon,
D    &   ga(1),ga(2),aa(1),aa(2)
 1000  format(a,i8,i7,f6.1,f7.1,4(4e15.7))
D
D       write(logdev,1010)'i2',jdate,jtime,xlat,xlon,
D    &     aa(3),aa(4),aa(5),aa(6)
D1010    format(a2,i8,i7,f6.1,f7.1,4(4e15.7))
D
D       write(logdev,1015)'i3',jdate,jtime,xlat,xlon,
D    &     aa(7),aa(8),aa(9)
D
D       write(logdev,1015)'i4',jdate,jtime,xlat,xlon,
D    &     aa(10),aa(11),aa(12)
D1015    format(a2,i8,i7,f6.1,f7.1,6(4e15.7))

C...set equilibrium constants as a function of temperature
C...   Henry's law constants

      SO2H  = HLCONST( 'SO2             ', TEMP, .FALSE., 0.0 )
      CO2H  = HLCONST( 'CO2             ', TEMP, .FALSE., 0.0 )
      NH3H  = HLCONST( 'NH3             ', TEMP, .FALSE., 0.0 )
      H2O2H = HLCONST( 'H2O2            ', TEMP, .FALSE., 0.0 )
      O3H   = HLCONST( 'O3              ', TEMP, .FALSE., 0.0 )
      HCLH  = HLCONST( 'HCL             ', TEMP, .FALSE., 0.0 )
      HNO3H = HLCONST( 'HNO3            ', TEMP, .FALSE., 0.0 )
      MHPH  = HLCONST( 'METHYLHYDROPEROX', TEMP, .FALSE., 0.0 )
      PAAH  = HLCONST( 'PEROXYACETIC_ACI', TEMP, .FALSE., 0.0 )
      FOAH  = HLCONST( 'FORMIC_ACID     ', TEMP, .FALSE., 0.0 )
      HgH   = HLCONST( 'HG              ', TEMP, .FALSE., 0.0 )
      HgCl2H= HLCONST( 'HGIIGAS         ', TEMP, .FALSE., 0.0 )
      HOH   = HLCONST( 'OH              ', TEMP, .FALSE., 0.0 )
      HO2H  = HLCONST( 'HO2             ', TEMP, .FALSE., 0.0 )

      TEMP1 = ONE_OVER_TEMP - 1.0 / 298.0

C...dissociation constants

      FOA1  = 1.80E-04 * EXP( -2.00E+01 * TEMP1 )      ! Martell and Smith (1977)
      SK6   = 1.02E-02 * EXP(  2.72E+03 * TEMP1 )      ! Smith and Martell (1976)
      SO21  = 1.30E-02 * EXP(  1.96E+03 * TEMP1 )      ! Smith and Martell (1976)
      SO22  = 6.60E-08 * EXP(  1.50E+03 * TEMP1 )      ! Smith and Martell (1976)
      CO21  = 4.30E-07 * EXP( -1.00E+03 * TEMP1 )      ! Smith and Martell (1976)
      CO22  = 4.68E-11 * EXP( -1.76E+03 * TEMP1 )      ! Smith and Martell (1976)
      H2OW  = 1.00E-14 * EXP( -6.71E+03 * TEMP1 )      ! Smith and Martell (1976)
      NH31  = 1.70E-05 * EXP( -4.50E+02 * TEMP1 )      ! Smith and Martell (1976)
      HCL1  = 1.74E+06 * EXP(  6.90E+03 * TEMP1 )      ! Marsh and McElroy (1985)
      HNO31 = 1.54E+01 * EXP(  8.70E+03 * TEMP1 )      ! Schwartz (1984)

C...for dissolved mercury species

c     K1:
      HgSO31 = 2.e-13      ! (M)
      HgSO31I= 1./HgSO31   !  (M**-1)
c     K2:
      Hgdisulf1 = 4.e-12   ! (M)
      Hgdisulf1I= 1./Hgdisulf1
c     K3:
      HgCl21  = 1.E-14     ! (M**2)
      HgCl21I = 1./HgCl21  ! (M**-2)
      HgCl21H = HgCl21 * HgCl2H   !RB: HgCl21H is never used
c     K4:
      HgOHp1   =  2.51e-11 ! (M)
      HgOHp1I   =  1./HgOHp1
c     K5:
      HgHY1  = 6.31e-12    ! (M)
      HgHY1I = 1./HgHY1
c     K6:
      HgOHCl1 = 3.72e-8    ! (M)
      HgOHCl1I = 1./3.72e-8

      K1K2I = HgSO31I * Hgdisulf1I
      K4K5I = HgOHp1I * HgHY1I
      K4K6I = HgOHp1I * HgOHCl1I

C...Kinetic oxidation rates
C...   From Chamedies (1982)

      RH2O2 = 8.0E+04 * EXP( -3650.0 * TEMP1 )

C...From Kok

      RMHP = 1.75E+07 * EXP( -3801.0 * TEMP1 )
      RPAA = 3.64E+07 * EXP( -3994.0 * TEMP1 )

C...Hg reaction rates  RXN

C  Hg(aq) + O3(aq) => HgO(aq)     RXN 1  4.7E7
      RHg_ox  = 4.7E7
      IHg_ox = 1
c      RXNSTRING ( IHg_ox ) = 'Hg(aq) + O3(aq) => HgO(aq)    '

C  HgSO3 => Hg(aq) + S(IV)        RXN 2 from Van Loon et al.
      RHgSO3  =  temp * EXP( (31.971*temp - 12595.)/temp )
      RHgSO3I = 1./RHgSO3
      IHgSO3  = 2
c      RXNSTRING ( IHgSO3 ) = 'HgSO3 => Hg(aq) + S(IV)       '

C  Hg(OH)2 => Hg + products        RXN 3   3.0E-7
      if ( csz .gt. 0. ) then
        RHgHY = 6.0E-7 * csz   ! csz = 1 with sun at zenith
        RHgHYI = 1./RHgHY
      else
        RHgHY  = 0.
        RHgHYI = 0.               ! not used if rhghy = 0
      endif
      IHgHY = 3
c      RXNSTRING ( IHgHY  ) = 'Hg(OH)2 => Hg + products      '

C  Hg(aq) + OHRAD(aq) => Hg(II)     RXN 4  2.0E9
      ROHRAD = 2.0E9
      IOHRAD = 4
c      RXNSTRING ( IOHRAD ) = 'Hg(aq) + OHRAD(aq) => Hg(II)  '

C  OXIDATION OF Hg(aq) BY CHLORINE (HOCl and OCl-)  RXN 5
C
C  Hg(aq) + HOCl(aq) => Hg(II) + products
C  Hg(aq) + OCl-   --(H+)-->  Hg(II) + products
C  HOCl <=> H+ + OCl-                   K = 10**-7.5
      K6a     = 2.09e6
      K6b     = 1.99e6
      KeqHOCl = 3.1623e-8    ! equals 10**(-7.5)
      IClI = 5
c      RXNSTRING ( IClI   ) = 'OX OF Hg BY (HOCl and OCl-)   '

C Reduction of all Hg(II) species by HO2      RXN 6
C  Hg(II) + HO2 =>  Hg+ + products
C  Hg+    + HO2 =>  Hg(aq) + products
C  Overall: Hg(II) + 2 HO2 => Hg(aq) + products

      KHO2   = 1.1e4       ! 1/(M s)
      IHO2 = 6
c      RXNSTRING ( IHO2  ) =
c     &   'Hg(II)tot + 2 HO2 => Hg(aq) + prod'

C ADSORPTION AND DESORPTION:  RXN 7-20
C
C All Hg(II) species sorb/desorb at the same time rate
C
C HgCl2L => SHgCl2                 RXN 7  adsorb = RHgad
      ISHgCl2  =  NPR + 1
c      RXNSTRING (ISHgCl2 ) = 'Adsorption  HgCl2L => SHgCl2   '
C SHgCl2 => HgCl2L                 RXN 8  desorb = RHgde
      IDHgCl2  =  NPR + 2
c      RXNSTRING (IDHgCl2 ) = 'Desorption  SHgCl2 => HgCl2L  '
C HgSO3  => SHgSO3                 RXN 9  adsorb = RHgad
      ISHgSO3  =  NPR + 3
c      RXNSTRING (ISHgSO3 ) = 'Adsorption  HgSO3  => SHgSO3   '
C SHgSO3 => HgSO3                  RXN 10 desorb = RHgde
      IDHgSO3  =  NPR + 4
c      RXNSTRING (IDHgSO3 ) = 'Desorption  SHgSO3 => HgSO3    '
C HgHY   => SHgHY                  RXN 11 adsorb = RHgad
      ISHgHY   =  NPR + 5
c      RXNSTRING (ISHgHY  ) = 'Adsorption  HgHY   => SHgHY    '
C SHgHY  => HgHY                   RXN 12 desorb = RHgde
      IDHgHY   =  NPR + 6
c      RXNSTRING (IDHgHY  ) = 'Desorption  SHgHY  => HgHY     '
C Hgdisulf  => SHgdisulf           RXN 13 adsorb = RHgad
      ISHgdisulf = NPR + 7
c      RXNSTRING (ISHgdisulf) = 'Adsorp  Hgdisulf  => SHgdisulf '
C SHgdisulf => Hgdisulf            RXN 14 desorb = RHgde
      IDHgdisulf = NPR + 8
c      RXNSTRING (IDHgdisulf) = 'Desorp  SHgdisulf => Hgdisulf  '
C HgOHp     => SHgOHp              RXN 15 adsorb = RHgad
      ISHgOHp  =  NPR + 9
c      RXNSTRING (ISHgOHp ) = 'Adsorption  HgOHp   => SHgOHp  '
C SHgOHp    => HgOHp               RXN 16 desorb = RHgad
      IDHgOHp  = NPR + 10
c      RXNSTRING (IDHgOHp ) = 'Desorption  SHgOHp => HgOHp    '
C HgOHCl    => SHgOHCl             RXN 17 adsorb = RHgad
      ISHgOHCl = NPR + 11
c      RXNSTRING (ISHgOHCl) = 'Adsorption HgOHCl => SHgOHCl   '
C SHgOHCl   => HgOHCl              RXN 18 desorb = RHgad
      IDHgOHCl = NPR + 12
c      RXNSTRING (IDHgOHCl) = 'Desorption SHgOHCl => HgOHCl   '
C HgII      => SHgII               RXN 19 adsorb = RHgad
      ISHgII   = NPR + 13
c      RXNSTRING (ISHgII  ) = 'Adsorption HgII   => SHgII     '
C SHgII     => HgII                RXN 20 desorb = RHgad
      IDHgII   = NPR + 14
c      RXNSTRING (IDHgII  ) = 'Desorption SHgII  => HgII      '

C...new definition of the intrinsic Henry's constant for chlorine
C   from Figure A2 in Lin and Pehkonen (JGR,1998)
c
      TEMPC = TEMP-273.15
      HintCl2 = 5.67E-8*TEMPC**3
     &         +2.5E-5*TEMPC*TEMPC
     &         -3.59E-3*TEMPC
     &         +1.49E-1

C...make initializations

      DO LIQ = 1, NLIQS
        WETDEP( LIQ ) = 0.0
      END DO

      DTRMV = 300.0
      DO IOX = 0, NUMOX
        DSIVDT( IOX ) = 0.0
c       DTW   ( IOX ) = 0.0
        DTW   ( IOX ) = DTRMV
        DS4   ( IOX ) = 0.0
      END DO
      DO IHg = 1, NHgRXN
        DHgDT( IHg ) = 0.0
        DTW  ( IHg + NUMOX ) = DTRMV
        DHg  ( IHg ) = 0.0
      END DO
      SHgINIT = 0.0

c...set history rgms to 0 hg before the time loop begins.
      RGMSOLD  = 0.

C...compute the initial accumulation aerosol 3rd moment
C...  secondary organic aerosol and water are not included
C...  the last factor in these equations is the bulk density of the
C...  particulate in grams aero / m**3 aero.
C...  for densities given in kg/m**3.

      M3OLD = ( AEROSOL( LSO4ACC  ) * SGRAERMW( LSO4ACC  ) / 1.8e6
     &      +   AEROSOL( LNH4ACC  ) * SGRAERMW( LNH4ACC  ) / 1.8e6
     &      +   AEROSOL( LNO3ACC  ) * SGRAERMW( LNO3ACC  ) / 1.8e6
     &      +   AEROSOL( LORGPACC ) * SGRAERMW( LORGPACC ) / 2.0e6
     &      +   AEROSOL( LECACC   ) * SGRAERMW( LECACC   ) / 2.2e6
     &      +   AEROSOL( LPRIACC  ) * SGRAERMW( LPRIACC  ) / 2.2e6
     &      +   AEROSOL( LNAACC   ) * SGRAERMW( LNAACC   ) / 2.2e6
     &      +   AEROSOL( LCLACC   ) * SGRAERMW( LCLACC   ) / 2.2e6
     &      +   AEROSOL( LPHGACC  ) * SGRAERMW( LPHGACC  ) / 8.0e6 )
ccc     &      * 6.0 / PI    ! cancels out in division at end of subroutine

C...compute fractional weights for several species

      TOTNIT = GAS( LHNO3 ) + AEROSOL( LNO3ACC )
      IF ( TOTNIT .GT. 0.0 ) THEN
        FHNO3   = GAS( LHNO3 ) / TOTNIT
        FNO3ACC = AEROSOL( LNO3ACC ) / TOTNIT
      ELSE
        FHNO3   = 1.0
        FNO3ACC = 0.0
      END IF

      TOTAMM = GAS( LNH3 ) + AEROSOL( LNH4ACC )
      IF ( TOTAMM .GT. 0.0 ) THEN
        FNH3    = GAS( LNH3 ) / TOTAMM
        FNH4ACC = AEROSOL( LNH4ACC ) / TOTAMM
      ELSE
        FNH3    = 1.0
        FNH4ACC = 0.0
      END IF

C...initial concentration from accumulation-mode aerosol loading (mol/liter)
C...  an assumption is made that all of the accumulation-mode
C...  aerosol mass in incorporated into the cloud droplets

      TS6ACCA = ( AEROSOL( LSO4ACC )
     &        +   GAS    ( LH2SO4  ) ) * PRES_ATM_OVER_XL
      NO3ACCA =   AEROSOL( LNO3ACC )   * PRES_ATM_OVER_XL
      NH4ACCA =   AEROSOL( LNH4ACC )   * PRES_ATM_OVER_XL
      ORGAACCA =  AEROSOL( LORGAACC )  * PRES_ATM_OVER_XL
      ORGPACCA =  AEROSOL( LORGPACC )  * PRES_ATM_OVER_XL
      ORGBACCA =  AEROSOL( LORGBACC )  * PRES_ATM_OVER_XL
      ECACCA  =   AEROSOL( LECACC  )   * PRES_ATM_OVER_XL
      PRIACCA =   AEROSOL( LPRIACC )   * PRES_ATM_OVER_XL
      NAACCA  =   AEROSOL( LNAACC  )   * PRES_ATM_OVER_XL
      CLACCA  =   AEROSOL( LCLACC  )   * PRES_ATM_OVER_XL
      PHGACCA =   AEROSOL( LPHGACC )   * PRES_ATM_OVER_XL

C...initial concentration from coarse-mode aerosol loading (mol/liter)
C...  an assumption is made that all of the coarse-mode
C...  aerosol mass in incorporated into the cloud droplets

      TS6CORA =   AEROSOL( LSO4COR )   * PRES_ATM_OVER_XL
      NO3CORA =   AEROSOL( LNO3COR )   * PRES_ATM_OVER_XL

      IF ( L_AE3_VRSN ) THEN
        CLCORA  = AEROSOL( LNACL   )   * PRES_ATM_OVER_XL
        NACORA  = AEROSOL( LNACL   )   * PRES_ATM_OVER_XL
      ELSE
        CLCORA  = AEROSOL( LCLCOR  )   * PRES_ATM_OVER_XL
        NACORA  = AEROSOL( LNACOR  )   * PRES_ATM_OVER_XL
      END IF

      KA      =   AEROSOL( LK      )   * PRES_ATM_OVER_XL
      CAA     =   AEROSOL( LCACO3  )   * PRES_ATM_OVER_XL
      MGA     =   AEROSOL( LMGCO3  )   * PRES_ATM_OVER_XL
      FEA     =   AEROSOL( LA3FE   )   * PRES_ATM_OVER_XL
      MNA     =   AEROSOL( LB2MN   )   * PRES_ATM_OVER_XL
      CO3A    = ( AEROSOL( LCACO3  )
     &        +   AEROSOL( LMGCO3  ) ) * PRES_ATM_OVER_XL
      PRICORA =   AEROSOL( LPRICOR )   * PRES_ATM_OVER_XL
      NUMCORA =   AEROSOL( LNUMCOR )   * PRES_ATM_OVER_XL

C...set constant factors that will be used in later multiplications (moles/atm)

      XLH2O2  = H2O2H * XL
      XLO3    = O3H   * XL
      XLMHP   = MHPH  * XL
      XLPAA   = PAAH  * XL
      XLSO2   = SO2H  * XL
      XLNH3   = NH3H  * XL
      XLHCL   = HCLH  * XL
      XLHNO3  = HNO3H * XL
      XLCO2   = CO2H  * XL
      XLHg    = HgH   * XL
      XLHgCl2 = HgCl2H* XL

      SO212   = SO21  * SO22
      SO21H   = SO21  * SO2H
      SO212H  = SO212 * SO2H
      CO212   = CO21  * CO22
      CO21H   = CO21  * CO2H
      CO212H  = CO22  * CO21H
      NH3DH20 = NH31  / H2OW
      NH31HDH = NH3H  * NH3DH20
      FOA1H   = FOA1  * FOAH
      HCL1H   = HCL1  * HCLH
      HNO31H  = HNO31 * HNO3H

C...If kinetic calculations are made, return to this point

      I20C = 0
20    CONTINUE

      I20C = I20C + 1
      IF ( I20C .GE. 10000 ) THEN
      write(logdev,1000)'dtwo',jdate,jtime,xlat,xlon,taucld,timew,dtw(0)
      write(logdev,1060)'dtw1,2,3,4,5,7,8,11:',
     &     dtw(1),dtw(2),dtw(3),dtw(4),dtw(5),dtw(7),dtw(8),dtw(11)
1060  format(a,10(/,4e15.7))
        XMSG = 'WARNING: EXCESSIVE LOOPING AT I20C'
        CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT2 )
      END IF

C...this sets the aqueous concentration for HO and HO2 based on
C   the gas concentrations at the call to aqchem (no feedback)

      PHO0 = GAS( LHO ) * PRES_ATM
      PHOF = PHO0 / ( 1.0 + HOH * XL )
      OHRAD = PHOF * HOH
      PHO20 = GAS( LHO2 ) * PRES_ATM
      PHO2F = PHO20 / ( 1.0 + HO2H * XL )
      HO2 = PHO2F * HO2H

C...this sets the total gaseous chlorine partial pressure based
C   on the gas concentration at the call to aqchem (no feedback)

      PCl20  = GAS( LCl2) * PRES_ATM

C...set aitken-mode aerosol loading (mol/liter)

      NO3AKNA = AEROSOL( LNO3AKN ) * PRES_ATM_OVER_XL
     &        * ( 1.0 - EXP( -ALFA3 * TIMEW ) )
      NH4AKNA = AEROSOL( LNH4AKN ) * PRES_ATM_OVER_XL
     &        * ( 1.0 - EXP( -ALFA3 * TIMEW ) )
      TS6AKNA = AEROSOL( LSO4AKN ) * PRES_ATM_OVER_XL
     &        * ( 1.0 - EXP( -ALFA3 * TIMEW ) )
      ORGAAKNA = AEROSOL( LORGAAKN ) * PRES_ATM_OVER_XL
     &         * ( 1.0 - EXP( -ALFA3 * TIMEW ) )
      ORGPAKNA = AEROSOL( LORGPAKN ) * PRES_ATM_OVER_XL
     &         * ( 1.0 - EXP( -ALFA3 * TIMEW ) )
      ORGBAKNA = AEROSOL( LORGBAKN ) * PRES_ATM_OVER_XL
     &         * ( 1.0 - EXP( -ALFA3 * TIMEW ) )
      ECAKNA  = AEROSOL( LECAKN  ) * PRES_ATM_OVER_XL
     &        * ( 1.0 - EXP( -ALFA3 * TIMEW ) )
      PRIAKNA = AEROSOL( LPRIAKN ) * PRES_ATM_OVER_XL
     &        * ( 1.0 - EXP( -ALFA3 * TIMEW ) )
      NAAKNA  = AEROSOL( LNAAKN  ) * PRES_ATM_OVER_XL
     &        * ( 1.0 - EXP( -ALFA3 * TIMEW ) )
      CLAKNA  = AEROSOL( LCLAKN  ) * PRES_ATM_OVER_XL
     &        * ( 1.0 - EXP( -ALFA3 * TIMEW ) )
      PHGAKNA = AEROSOL( LPHGAKN ) * PRES_ATM_OVER_XL
     &        * ( 1.0 - EXP( -ALFA3 * TIMEW ) )

C...concentration of Hg(II) aerosol in cloud water includes now
c   accum and time-dependent aitken mass additions.
c   find new rgms, and difference between previous rgms and new

      RGMSNEW = PHGACCA + PHGAKNA ! current (new) rgms
      RGMSINC = RGMSNEW - RGMSOLD ! new minus previous rgms
      RGMSOLD = RGMSNEW           ! reset history (previous) rgms

C...Initial gas phase partial pressures (atm)
C...   = initial partial pressure - amount deposited partial pressure

      PSO20  = GAS( LSO2  ) * PRES_ATM
     &       + DS4( 0 ) * XL
     &       - ( WETDEP( LSO3L ) + WETDEP( LHSO3L ) + WETDEP( LSO2L ) ) * XC2
      PNH30  = GAS( LNH3  ) * PRES_ATM
     &       + ( NH4ACCA + NH4AKNA ) * XL
     &       - ( WETDEP( LNH4L ) + WETDEP( LNH3L ) ) * XC2
      PHNO30 = ( GAS( LHNO3 ) + 2.0 * GAS( LN2O5 ) ) * PRES_ATM
     &       + ( NO3ACCA + NO3CORA + NO3AKNA ) * XL
     &       - ( WETDEP( LNO3ACCL ) + WETDEP( LHNO3L ) + WETDEP( LNO3CORL ) ) * XC2
      PHCL0  = GAS(  LHCL ) * PRES_ATM
     &       + ( CLACCA + CLCORA + CLAKNA ) * XL ! new for sea salt
     &       - ( WETDEP( LCLACCL ) + WETDEP( LHCLL ) + WETDEP( LCLCORL ) ) * XC2
      PH2O20 = GAS( LH2O2 ) * PRES_ATM - WETDEP( LH2O2L ) * XC2
      PO30   = GAS( LO3   ) * PRES_ATM - WETDEP( LO3L   ) * XC2
      PFOA0  = GAS( LFOA  ) * PRES_ATM
     &       - ( WETDEP( LFOAL ) + WETDEP( LHCO2L ) ) * XC2
      PMHP0  = GAS( LMHP  ) * PRES_ATM - WETDEP( LMHPL  ) * XC2
      PPAA0  = GAS( LPAA  ) * PRES_ATM - WETDEP( LPAAL  ) * XC2
      PCO20  = GAS( LCO2  ) * PRES_ATM
     &       + CO3A * XL
     &       - ( WETDEP( LCO3L ) + WETDEP( LHCO3L ) + WETDEP( LCO2L ) ) * XC2

      PHg0   = GAS( LHg   ) * PRES_ATM
     &       + ( DHg(IHgSO3) + DHg(IHgHY) -DHg(IHg_ox) -DHg(IOHRAD)
     &       -  DHg(IClI) + DHg(IHO2) )*XL
     &       - WETDEP( LHgL ) * XC2
      PHgCl20= GAS( LHgCl2) *PRES_ATM
C    &       + AEROSOL(LHgII) *PRES_ATM
C    &       +( DHg(IHg_ox)
     &       +( SHgINIT
     &        + DHg(IHg_ox)
     &        + DHg(IOHRAD)
     &        + DHg(IClI)
     &        - DHg(IHgSO3)
     &        - DHg(IHgHY)
     &        - DHg(IHO2)
     &        - DHg(ISHgCl2) + DHg(IDHgCl2)
     &        - DHg(ISHgSO3) + DHg(IDHgSO3)
     &        - DHg(ISHgHY)  + DHg(IDHgHY)
     &        - DHg(ISHgII)  + DHg(IDHgII)
     &        - DHg(ISHgdisulf) + DHg(IDHgdisulf)
     &        - DHg(ISHgOHp) + DHg(IDHgOHp)
     &        - DHg(ISHgOHCl) + DHg(IDHgOHCl)  )*XL
     &        -(WETDEP(LHgCl2L)+WETDEP(LHgSO3L)+WETDEP(LHgdisulfL)+WETDEP(LHgIIL)
     &         +WETDEP(LHgOHpL)+WETDEP(LHgHYL)+WETDEP(LHgOHClL))*XC2

C...don't allow gas concentrations to go below zero

      PSO20  = MAX( PSO20,  0.0 )
      PNH30  = MAX( PNH30,  0.0 )
      PH2O20 = MAX( PH2O20, 0.0 )
      PO30   = MAX( PO30,   0.0 )
      PFOA0  = MAX( PFOA0,  0.0 )
      PMHP0  = MAX( PMHP0,  0.0 )
      PPAA0  = MAX( PPAA0,  0.0 )
      PCO20  = MAX( PCO20,  0.0 )
      PHCL0  = MAX( PHCL0,  0.0 )
      PHNO30 = MAX( PHNO30, 0.0 )
      PHg0   = MAX( PHg0,   0.0 )
      PHgCl20= MAX( PHgCl20,0.0 )

C...Molar concentrations of soluble aerosols
C...   = Initial amount - amount deposited  (mol/liter)

      TS6COR  = MAX( TS6CORA - WETDEP( LTS6CORL ) * XC1, 0.0 )
      NO3COR  = MAX( NO3CORA - WETDEP( LNO3CORL ) * XC1, 0.0 )
      NACOR   = MAX( NACORA  - WETDEP( LNACORL  ) * XC1, 0.0 )
      CLCOR   = MAX( CLCORA  - WETDEP( LCLCORL  ) * XC1, 0.0 )

      TS6     = TS6ACCA  + TS6AKNA + TS6COR
     &        - ( WETDEP( LSO4ACCL ) + WETDEP( LHSO4ACCL ) ) * XC1
     &        - DS4( 0 )
      NA      = NAACCA   + NAAKNA  + NACOR
     &        - WETDEP( LNAACCL ) * XC1
      CA      = CAA      -   WETDEP( LCAL ) * XC1
      MG      = MGA      -   WETDEP( LMGL ) * XC1
      K       = KA       -   WETDEP( LKL  ) * XC1
      FE      = FEA      -   WETDEP( LFEL ) * XC1
      MN      = MNA      -   WETDEP( LMNL ) * XC1
      ORGA    = ORGAACCA + ORGAAKNA - WETDEP( LORGAL ) * XC1
      ORGP    = ORGPACCA + ORGPAKNA - WETDEP( LORGPL ) * XC1
      ORGB    = ORGBACCA + ORGBAKNA - WETDEP( LORGBL ) * XC1
      EC      = ECACCA   + ECAKNA   - WETDEP( LECL   ) * XC1
      PRIM    = PRIACCA  + PRIAKNA  - WETDEP( LPRIML ) * XC1
      PRIMCOR = PRICORA - WETDEP( LPRIMCORL ) * XC1
      NUMCOR  = NUMCORA - WETDEP( LNUMCORL  ) * XC1
      A       = 3.0 * FE
      B       = 2.0 * MN

C...don't allow aerosol concentrations to go below zero

      TS6     = MAX( TS6,     0.0 )
      NA      = MAX( NA,      0.0 )
      CA      = MAX( CA,      0.0 )
      MG      = MAX( MG,      0.0 )
      K       = MAX( K,       0.0 )
      FE      = MAX( FE,      0.0 )
      MN      = MAX( MN,      0.0 )
      ORGA    = MAX( ORGA,    0.0 )
      ORGP    = MAX( ORGP,    0.0 )
      ORGB    = MAX( ORGB,    0.0 )
      EC      = MAX( EC,      0.0 )
      PRIM    = MAX( PRIM,    0.0 )
      PRIMCOR = MAX( PRIMCOR, 0.0 )
      NUMCOR  = MAX( NUMCOR,  0.0 )
      A       = MAX( A,       0.0 )
      B       = MAX( B,       0.0 )

      SK6TS6 = SK6 * TS6

C..Molar concentrations of sorbed Hg species
C...   = Initial amount - amount deposited  (mol/liter)

      SHgCl2   = DHg(ISHgCl2)-DHg(IDHgCl2)-WETDEP(LSHgCl2L)*XC1
c     SHgCl2   = MAX( SHgCl2, 0.0 )

      SHgSO3   = DHg(ISHgSO3)-DHg(IDHgSO3)-WETDEP(LSHgSO3L)*XC1
c     SHgSO3   = MAX( SHgSO3, 0.0 )

      SHgdisulf = DHg(ISHgdisulf)-DHg(IDHgdisulf)-WETDEP(LSHgdisulfL)*XC1
c     SHgdisulf = MAX( SHgdisulf, 0.0 )

      SHgII   = DHg(ISHgII  ) - DHg(IDHgII  ) - WETDEP(LSHgIIL)*XC1
c     SHgII   = MAX( SHgII , 0.0 )

      SHgOHp  = DHg(ISHgOHp) - DHg(IDHgOHp) - WETDEP(LSHgOHpL)*XC1
c     SHgOHp  = MAX( SHgOHp , 0.0 )

      SHgHY    = DHg(ISHgHY)-DHg(IDHgHY)-WETDEP(LSHgHYL)*XC1
c     SHgHY    = MAX( SHgHY , 0.0 )

      SHgOHCl = DHg(ISHgOHCl) - DHg(IDHgOHCl) - WETDEP(LSHgOHClL)*XC1
c     SHgOHCl = MAX( SHgOHCl , 0.0 )

C...find solution of the equation using a method of reiterative
C...  bisections Make initial guesses for pH:   between .01  to  10.

      HA =  0.01
      HB = 10.0

      I7777C = 0
7777  CONTINUE

      I7777C = I7777C + 1
      IF ( I7777C .GE. 10000 ) THEN
      write(logdev,1000)'dtwo',jdate,jtime,xlat,xlon,taucld,timew,dtw(0)
      write(logdev,1060)'dtw1,2,3,4,5,7,8,11:',
     &     dtw(1),dtw(2),dtw(3),dtw(4),dtw(5),dtw(7),dtw(8),dtw(11)
        XMSG = 'WARNING: EXCESSIVE LOOPING AT I7777C'
        CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT2 )
      END IF

      HA = MAX( HA - 0.8, 0.1 )
      HB = MIN( HB + 0.8, 9.9 )
      AE = 10.0**( -HA )

      RECIPA1 = 1.0 / ( AE * ACT1 )
      RECIPA2 = 1.0 / ( AE * AE * ACT2 )

C...calculate final gas phase partial pressure of SO2, NH3, HNO3
C...  HCOOH, and CO2 (atm)

      PSO2F = PSO20 / ( 1.0 + XLSO2 * ( 1.0 + SO21 * RECIPA1
     &      + SO212 * RECIPA2 ) )

      PNH3F = PNH30 / ( 1.0 + XLNH3 * ( 1.0 + NH3DH20 * AE ) )

      PHCLF = PHCL0 / ( 1.0 + XLHCL *  ( 1.0 + HCL1 * RECIPA1 ) )

      PFOAF = PFOA0 / ( 1.0 + XL * ( FOAH + FOA1H * RECIPA1 ) )

      PHNO3F = PHNO30 / ( 1.0 + XLHNO3 * ( 1.0 + HNO31 * RECIPA1 ) )

      PCO2F = PCO20 / ( 1.0 + XLCO2 * ( 1.0 + CO21 * RECIPA1
     &      + CO212 * RECIPA2 ) )

C...calculate liquid phase concentrations (moles/liter)

      SO4  = SK6TS6 / ( AE * GM2 + SK6 )
      HSO4 = TS6 - SO4
      SO3  = SO212H  * PSO2F  * RECIPA2
      HSO3 = SO21H   * PSO2F  * RECIPA1
      CO3  = CO212H  * PCO2F  * RECIPA2
      HCO3 = CO21H   * PCO2F  * RECIPA1
      OH   = H2OW    * RECIPA1
      NH4  = NH31HDH * PNH3F  * AE
      HCO2 = FOA1H   * PFOAF  * RECIPA1
      NO3  = HNO31H  * PHNO3F * RECIPA1
      CL   = HCL1H   * PHCLF  * RECIPA1 ! new for sea salt

c set minimum of 0.1 mg/L or 0.0001/35.453 moles/L
c to avoid arithmetic fault.
      CL      = MAX( CL, 2.820636E-06 )
      RECIPCL2 = 1.0 / ( CL * CL * ACT2 )

C...calculate final gas phase partial pressure of HgCl2,
C...  Hg, and HgO (atm)

      HeffHgCl2 = XLHgCl2*(1.+HgCl21*RECIPCL2 *
     &   (1. + HgSO31I*SO3 + K1K2I*SO3*SO3 + HgOHp1I*OH +
     &         K4K5I*OH*OH + K4K6I*OH*CL ))

      PHgCl2F = PHgCl20 / (1.+HeffHgCl2)

      PHgF    = PHg0 / ( 1.0 + XLHg )

C...calculate ClI (total Cl2(aq))

      HeffCl2 = XL * HintCl2 * (1.+(5.0e-4 /(CL*AE) ) +
     &      (1.58e-11 / (CL * AE * AE ) ) )
      PCl2F = PCl20 / (1. + HeffCl2)
      ClI    = PCl2F   * HeffCl2 /XL

C...calculate liquid phase concentrations (moles/liter)

      HgL       = PHgF    * HgH
      HgCl2L    = PHgCl2F * HgCl2H
      HgII      = HgCl2L * HgCl21 * RECIPCL2
      HgSO3     = HgII * SO3 * HgSO31I
      Hgdisulf  = HgSO3 *SO3 * Hgdisulf1I
      HgOHp     = HgII * OH * HgOHp1I
      HgHY      = HgOHp * OH * HgHY1I
      HgOHCl    = HgOHp * Cl * HgOHCl1I

C...compute functional value

      FA = AE + NH4 + NA + 2.0 * ( CA + MG - CO3 - SO3 - SO4 )
     &   - OH - HCO3 - HSO3 - NO3 - HSO4 - HCO2 - CL
     &   + HgOHp + 2.0 * (HgII - Hgdisulf) ! mercury contribution

C...Start iteration and bisection ****************<<<<<<<

      I30C = 0
30    CONTINUE

      I30C = I30C + 1
      IF ( I30C .GE. 10000 ) THEN  ! increased from 1000 (RB)
      write(logdev,1000)'dtwo',jdate,jtime,xlat,xlon,taucld,timew,dtw(0)
      write(logdev,1060)'dtw1,2,3,4,5,7,8,11:',
     &     dtw(1),dtw(2),dtw(3),dtw(4),dtw(5),dtw(7),dtw(8),dtw(11)
        XMSG = 'WARNING: EXCESSIVE LOOPING AT I30C'
        CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT2 )
      END IF

      BB = ( HA + HB ) / 2.0
      AE = 10.0**( -BB )

      ICNTAQ = ICNTAQ + 1
      IF ( ICNTAQ .GE. 30000 ) THEN  ! increased from 3000 (RB)
      write(logdev,1000)'dtwo',jdate,jtime,xlat,xlon,taucld,timew,dtw(0)
      write(logdev,1060)'dtw1,2,3,4,5,7,8,11:',
     &     dtw(1),dtw(2),dtw(3),dtw(4),dtw(5),dtw(7),dtw(8),dtw(11)
        XMSG = 'Warning: Maximum AQCHEM total iterations exceeded'
        CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT2 )
      END IF

      RECIPA1 = 1.0 / ( AE * ACT1 )
      RECIPA2 = 1.0 / ( AE * AE * ACT2 )

C...calculate final gas phase partial pressure of SO2, NH3, HCL, HNO3
C...  HCOOH, and CO2 (atm)

      PSO2F = PSO20 / ( 1.0 + XLSO2
     &	    * ( 1.0 + SO21 * RECIPA1 + SO212 * RECIPA2 ) )

      PNH3F = PNH30 / ( 1.0 + XLNH3 * ( 1.0 + NH3DH20 * AE ) )

      PHCLF = PHCL0  / ( 1.0 + XLHCL *  ( 1.0 + HCL1 * RECIPA1 ) )

      PHNO3F = PHNO30 / ( 1.0 + XLHNO3 * ( 1.0 + HNO31 * RECIPA1 ) )

      PFOAF = PFOA0 / ( 1.0 + XL * ( FOAH + FOA1H * RECIPA1 ) )

      PCO2F = PCO20 / ( 1.0 + XLCO2 * ( 1.0 + CO21 * RECIPA1
     &      + CO212 * RECIPA2 ) )

C...calculate liquid phase concentrations (moles/liter)

      SO4  = SK6TS6 / ( AE * GM2 + SK6 )
      HSO4 = TS6 - SO4
      SO3  = SO212H  * PSO2F  * RECIPA2
      HSO3 = SO21H   * PSO2F  * RECIPA1
      CO3  = CO212H  * PCO2F  * RECIPA2
      HCO3 = CO21H   * PCO2F  * RECIPA1
      OH   = H2OW    * RECIPA1
      NH4  = NH31HDH * PNH3F  * AE
      HCO2 = FOA1H   * PFOAF  * RECIPA1
      NO3  = HNO31H  * PHNO3F * RECIPA1
      CL   = HCL1H   * PHCLF  * RECIPA1 ! new for sea salt

c set minimum of 0.1 mg/L or 0.0001/35.453 moles/L
c to avoid arithmetic fault.
      CL      = MAX( CL, 2.820636E-06 )
      RECIPCL2 = 1.0 / ( CL * CL * ACT2 )

C...calculate final gas phase partial pressure of HgCl2,
C...  Hg, and HgO (atm)

      HeffHgCl2 = XLHgCl2*(1.+HgCl21*RECIPCL2 *
     &   (1. + HgSO31I*SO3 + K1K2I*SO3*SO3 + HgOHp1I*OH +
     &         K4K5I*OH*OH + K4K6I*OH*CL ))

      PHgCl2F = PHgCl20 / (1.+HeffHgCl2)

      PHgF    = PHg0 / ( 1.0 + XLHg )

C...calculate ClI (total Cl2(aq))

      HeffCl2 = XL * HintCl2 * (1.+(5.0e-4 /(CL*AE) ) +
     &      (1.58e-11 / (CL * AE * AE ) ) )
      PCl2F = PCl20 / (1. + HeffCl2)
      ClI    = PCl2F   * HeffCl2 /XL

C...calculate liquid phase concentrations (moles/liter)

      HgL       = PHgF    * HgH
      HgCl2L    = PHgCl2F * HgCl2H
      HgII      = HgCl2L * HgCl21 * RECIPCL2
      HgSO3     = HgII * SO3 * HgSO31I
      Hgdisulf  = HgSO3 *SO3 * Hgdisulf1I
      HgOHp     = HgII * OH * HgOHp1I
      HgHY      = HgOHp * OH * HgHY1I
      HgOHCl    = HgOHp * CL * HgOHCl1I

C...compute functional value

      FB = AE + NH4 + NA + 2.0 * ( CA + MG - CO3 - SO3 - SO4 )
     &     - OH - HCO3 - HSO3 - NO3 - HSO4 - HCO2 - CL
     &   + HgOHp + 2.0 * (HgII - Hgdisulf)  ! mercury contribution

C...Calculate and check the sign of the product of the two functional values

      FTST = FA * FB
      IF ( FTST .LE. 0.0 ) THEN
        HB = BB
      ELSE
        HA = BB
        FA = FB
      END IF

C...Check convergence of solutions

      HTST = HA / HB
      IF ( HTST .LE. TST ) GO TO 30

C...end of zero-finding routine ****************<<<<<<<<<<<<

C...compute Ionic strength and activity coefficient by the Davies equation

      STION = 0.5 * (AE + NH4 + OH + HCO3 + HSO3
     &      + 4.0 * (SO4 + CO3 + SO3 + CA + MG + MN)
     &      + NO3 + HSO4 + 9.0 * FE + NA + K + CL + A + B + HCO2)
      GM1LOG = -0.509 * ( SQRT( STION )
     &       / ( 1.0 + SQRT( STION ) ) - 0.2 * STION )
      GM2LOG = GM1LOG * 4.0
      GM1  = 10.0**GM1LOG
      GM2  = MAX( 10.0**GM2LOG, 1.0E-30 )
      ACTB = ACT1
      ACT1 = MAX( GM1 * GM1, 1.0E-30 )
      ACT2 = MAX( GM1 * GM1 * GM2, 1.0E-30 )

C...check for convergence and possibly go to 7777, to recompute
C...  Gas and liquid phase concentrations

      TAC = ABS( ACTB - ACT1 ) / ACTB
      IF ( TAC .GE. 1.0E-2 ) GO TO 7777

C...return an error if the pH is not in range

ccc      IF ( ( HA .LT. 0.02 ) .OR. ( HA .GT. 9.49 ) ) THEN
      IF ( ( HA .LT. 0.1 ) .OR. ( HA .GT. 9.9 ) ) THEN
        print *, ha
        XMSG = 'PH VALUE OUT OF RANGE'
        CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT2 )
      END IF

C...Make those concentration calculations which can be made outside
C...  of the function.

      SO2L = SO2H * PSO2F
      AC = 10.0**( -BB )
      SIV = SO3 + HSO3 + SO2L

C...Calculate final gas phase concentrations of oxidants (atm)

      PH2O2F = ( PH2O20 + XL * DS4( 1 ) ) / ( 1.0 + XLH2O2 )
      PO3F   = ( PO30   + XL * DS4( 2 ) ) / ( 1.0 + XLO3   )
      PMHPF  = ( PMHP0  + XL * DS4( 4 ) ) / ( 1.0 + XLMHP  )
      PPAAF  = ( PPAA0  + XL * DS4( 5 ) ) / ( 1.0 + XLPAA  )

      PH2O2F = MAX( PH2O2F, 0.0 )
      PO3F   = MAX( PO3F,   0.0 )
      PMHPF  = MAX( PMHPF,  0.0 )
      PPAAF  = MAX( PPAAF,  0.0 )

C...Calculate liquid phase concentrations of oxidants (moles/liter)

      H2O2L = PH2O2F * H2O2H
      O3L   = PO3F   * O3H
      MHPL  = PMHPF  * MHPH
      PAAL  = PPAAF  * PAAH
      FOAL  = PFOAF  * FOAH
      NH3L  = PNH3F  * NH3H
      CO2L  = PCO2F  * CO2H
      HCLL  = PHCLF  * HCLH
      HNO3L = PHNO3F * HNO3H

C...distribute the new aerosol Hg(II) to the sorbed-phase Hg(II) species
c   in the same proportions as exists for the liquid-phase Hg(II) species.
c   If there are no liquid-phase Hg(II) species, distribute the new aerosol
c   Hg(II) evenly among the sorbed-phase Hg(II) species.

      RGML = HgCl2L+Hgdisulf+HgSO3+HgOHp+HgOHCl+HgHY+HgII
      IF(RGML.GT.0.) THEN
        SOVERL   = RGMSINC / RGML
        AHgCl2   = SOVERL * HgCl2L
        AHgII    = SOVERL * HgII
        AHgSO3   = SOVERL * HgSO3
        AHgdisulf= SOVERL * Hgdisulf
        AHgOHp   = SOVERL * HgOHp
        AHgHY    = SOVERL * HgHY
        AHgOHCl  = SOVERL * HgOHCl
      ELSE
        SOVERL   = RGMSINC / 7.
        AHgCl2   = SOVERL
        AHgII    = SOVERL
        AHgSO3   = SOVERL
        AHgdisulf= SOVERL
        AHgOHp   = SOVERL
        AHgHY    = SOVERL
        AHgOHCl  = SOVERL
      END IF
      SHgINIT  = SHgINIT  + RGMSINC
      SHgCl2   = SHgCl2   + AHgCl2
      SHgII    = SHgII    + AHgII
      SHgSO3   = SHgSO3   + AHgSO3
      SHgdisulf= SHgdisulf+ AHgdisulf
      SHgOHp   = SHgOHp   + AHgOHp
      SHgHY    = SHgHY    + AHgHY
      SHgOHCl  = SHgOHCl  + AHgOHCl

      DHg(ISHgCl2   ) = DHg(ISHgCl2   ) + AHgCl2
      DHg(ISHgII    ) = DHg(ISHgII    ) + AHgII
      DHg(ISHgSO3   ) = DHg(ISHgSO3   ) + AHgSO3
      DHg(ISHgdisulf) = DHg(ISHgdisulf) + AHgdisulf
      DHg(ISHgOHp   ) = DHg(ISHgOHp   ) + AHgOHp
      DHg(ISHgHY    ) = DHg(ISHgHY    ) + AHgHY
      DHg(ISHgOHCl  ) = DHg(ISHgOHCl  ) + AHgOHCl

C...compute modal concentrations

      SO4COR  = SK6 * TS6COR / ( AE * GM2 + SK6 )
      HSO4COR = MAX( TS6COR - SO4COR, 0.0 )

      TS6ACC  = MAX( TS6  - TS6COR,   0.0 )
      SO4ACC  = MAX( SO4  - SO4COR,   0.0 )
      HSO4ACC = MAX( HSO4 - HSO4COR,  0.0 )
      NO3ACC  = MAX( NO3  - NO3COR,   0.0 )
      NAACC   = MAX( NA   - NACOR,    0.0 )
      CLACC   = MAX( CL   - CLCOR,    0.0 )

C...load the liquid concentration array with current values

      LIQUID( LACL      ) = AC
      LIQUID( LNH4L     ) = NH4
      LIQUID( LCAL      ) = CA
      LIQUID( LNAACCL   ) = NAACC
      LIQUID( LOHL      ) = OH
      LIQUID( LSO4ACCL  ) = SO4ACC
      LIQUID( LHSO4ACCL ) = HSO4ACC
      LIQUID( LSO3L     ) = SO3
      LIQUID( LHSO3L    ) = HSO3
      LIQUID( LSO2L     ) = SO2L
      LIQUID( LCO3L     ) = CO3
      LIQUID( LHCO3L    ) = HCO3
      LIQUID( LCO2L     ) = CO2L
      LIQUID( LNO3ACCL  ) = NO3ACC
      LIQUID( LNH3L     ) = NH3L
      LIQUID( LCLACCL   ) = CLACC
      LIQUID( LH2O2L    ) = H2O2L
      LIQUID( LO3L      ) = O3L
      LIQUID( LFEL      ) = FE
      LIQUID( LMNL      ) = MN
      LIQUID( LAL       ) = A
      LIQUID( LFOAL     ) = FOAL
      LIQUID( LHCO2L    ) = HCO2
      LIQUID( LMHPL     ) = MHPL
      LIQUID( LPAAL     ) = PAAL
      LIQUID( LHCLL     ) = HCLL
      LIQUID( LORGAL    ) = ORGA
      LIQUID( LPRIML    ) = PRIM
      LIQUID( LMGL      ) = MG
      LIQUID( LKL       ) = K
      LIQUID( LBL       ) = B
      LIQUID( LHNO3L    ) = HNO3L
      LIQUID( LPRIMCORL ) = PRIMCOR
      LIQUID( LNUMCORL  ) = NUMCOR
      LIQUID( LTS6CORL  ) = TS6COR
      LIQUID( LNACORL   ) = NACOR
      LIQUID( LCLCORL   ) = CLCOR
      LIQUID( LNO3CORL  ) = NO3COR
      LIQUID( LORGPL    ) = ORGP
      LIQUID( LORGBL    ) = ORGB
      LIQUID( LECL      ) = EC
      LIQUID( LHgL        ) = HgL
      LIQUID( LHgCl2L     ) = HgCl2L
      LIQUID( LHgSO3L     ) = HgSO3
      LIQUID( LHgdisulfL  ) = Hgdisulf
      LIQUID( LHgIIL      ) = HgII
      LIQUID( LHgOHpL     ) = HgOHp
      LIQUID( LHgHYL      ) = HgHY
      LIQUID( LHgOHClL    ) = HgOHCl
      LIQUID( LSHgCl2L    ) = SHgCl2
      LIQUID( LSHgSO3L    ) = SHgSO3
      LIQUID( LSHgdisulfL ) = SHgdisulf
      LIQUID( LSHgIIL     ) = SHgII
      LIQUID( LSHgOHpL    ) = SHgOHp
      LIQUID( LSHgHYL     ) = SHgHY
      LIQUID( LSHgOHClL   ) = SHgOHCl

C...new sorption/desorption code to allow adjustable elemental carbon
C   aerosol air concentrations (Russ Bullock, 09/19/2000)
c   using carbon aerosol within water

c EC here in moles/liter of water
c
c times 5 to estimate amount of elem carbon avail if 5% of pm2.5 rather
c than 1% had been set to elem carbon originally in aero_driver.F of
c /project/work/rep/CCTM/src/aero/aero2 of hpcc, and now set in AERO_EMIS.F
C of /project/work/rep/CCTM/src/vdiff/eddy, part of aero3 code.

c      EC5 = max(0.0, (EC * 5.0)) ! moles/L
      EC5 = max(0.0, EC) ! moles/L

c set min carb as equivilant to 1e-12 microg/m**3, and convert this
c to grams carbon/Liter of water.  1e-12 microg/m**3 is
c 1e-18g/m**3, which is (1e-18g/m**3)/WCAVG grams/Liter,
c where WCAVG is liquid water content (kg/m3)
c (1e-18g carb)/m**3 / [(?Kg H20)/m**3] = (1e-18g carb) /(?Kg H20)
c = (1e-18g carb) /(?Liters H20)
c (density of H20 is assumed to be close to 1kg/Liter)

      mincarb = 1.0E-18/WCAVG ! in g/L

      Kp = 900.               ! adapted from Seigneur et al. (1998)
      TFOLD = 3600.           ! e-folding time for adsorption equilibrium
      ECw = EC5 * 12.01      ! moles/liter * 12g per mole = g/liter
      ECw = max(ECw,mincarb)  ! forced min of 1e-12ug/m**3 as g/liter
c      print*,'jdate,jtime,i20c,ecw(g/L) ', jdate,jtime,i20c,ecw
      SovD = Kp*ECw           ! sorbed Hg(II) / desorbed Hg(II)
      SF = SovD/(1.0+SovD)    ! fraction sorbed at equilibrium
c
      RHgad = SF/TFOLD        ! adsorb rate for e-folding time
      RHgadI = 1./RHgad
      RHgde = RHgad/SovD      ! desorb rate to yield SF at equilibrium
      RHgdeI = 1./RHgde

C...if the maximum cloud lifetime has not been reached, then compute
C...  the next timestep.

      IF ( TIMEW .LT. TAUCLD ) THEN

C...make kinetics calculations
C...  note: DS4(i) and DSIV(I) are negative numbers!

        DTRMV = 300.0
        IF ( ( CTHK1 .GT. 1.0E-10 ) .AND. ( PRCRATE .GT. 1.0E-10 ) )
     &     DTRMV = 3.6 * WTAVG * 1000.0 * CTHK1 / PRCRATE  ! <<<uma found bug, was .36
        DTRMV = MIN( DTRMV, 300.0 )
        ITERAT = ITERAT + 1

C...Define the total S(iv) available for oxidation

        TSIV = PSO20 * ONE_OVER_XL

C...Calculate sulfur iv oxidation rate due to H2O2

        DSIVDT( 1 ) = -RH2O2 * H2O2L * SO2L / ( 0.1 + AC )
        TOTOX = PH2O20 * ONE_OVER_XL
        IF ( ( DSIVDT( 1 ) .EQ. 0.0 ) .OR.
     &       ( TSIV  .LE. CONCMIN ) .OR.
     &       ( TOTOX .LE. CONCMIN ) ) THEN
          DTW( 1 ) = DTRMV
        ELSE
          DTW( 1 ) = -0.05 * MIN( TOTOX, TSIV ) / DSIVDT( 1 )
        END IF

C...Calculate sulfur iv oxidation rate due to O3

        IF ( BB .GE. 2.7 ) THEN
          DSIVDT( 2 ) = -4.19E5 * ( 1.0 + 2.39E-4 / AC ) * O3L * SIV
        ELSE
          DSIVDT( 2 ) = -1.9E4 * SIV * O3L / SQRT( AC )
        END IF
        TOTOX = PO30 * ONE_OVER_XL
        IF ( ( DSIVDT( 2 ) .EQ. 0.0 ) .OR.
     &       ( TSIV  .LE. CONCMIN ) .OR.
     &       ( TOTOX .LE. CONCMIN ) ) THEN
          DTW( 2 ) = DTRMV
        ELSE
          DTW( 2 ) = -0.01 * MIN( TOTOX, TSIV ) / DSIVDT( 2 )
        END IF

C...Calculate sulfur iv oxidation rate due to 02 catalyzed by Mn++
C...  and Fe+++  See Table IV Walcek & Taylor ( 1986)

        IF ( BB .GE. 4.0 )  THEN  ! 4.0  < pH

          IF ( SIV .LE. 1.0E-5 ) THEN
            DSIVDT( 3 ) = -5000.0 * MN * HSO3
          ELSE IF ( SIV .GT. 1.0E-5 ) THEN
            DSIVDT( 3 ) = -( 4.7 * MN * MN / AC
     &                  + 1.0E7 * FE * SIV * SIV )
          END IF  ! end of first pass through SIV conc.

        ELSE          ! pH , + 4.0

	  IF ( SIV .LE. 1.0E-5 ) THEN
            DSIVDT( 3 ) = -3.0 * ( 5000.0 * MN * HSO3
     &                  + 0.82 * FE * SIV / AC )
          ELSE
            DSIVDT( 3 ) = -( 4.7 * MN * MN / AC
     &                  + ( 0.82 * FE * SIV / AC )
     &                  * ( 1.0 + 1.7E3 * MN**1.5 / ( 6.3E-6 + FE ) ) )
          END IF ! end of second pass through SIV conc.

        END IF  ! end of pass through pH

        IF ( ( DSIVDT( 3 ) .EQ. 0.0 ) .OR. ( TSIV .LE. CONCMIN ) ) THEN
          DTW( 3 ) = DTRMV
        ELSE
          DTW( 3 ) = -0.1 * TSIV / DSIVDT( 3 )
        END IF

C...Calculate sulfur oxidation rate due to MHP

        DSIVDT( 4 ) = -RMHP * AC * MHPL * HSO3
        TOTOX = PMHP0 * ONE_OVER_XL
        IF ( ( DSIVDT( 4 ) .EQ. 0.0 ) .OR.
     &       ( TSIV  .LE. CONCMIN ) .OR.
     &       ( TOTOX .LE. CONCMIN ) ) THEN
          DTW( 4 ) = DTRMV
        ELSE
          DTW( 4 ) = -0.1 * MIN( TOTOX, TSIV ) / DSIVDT( 4 )
        END IF

C...Calculate sulfur oxidation due to PAA

        DSIVDT( 5 ) = -RPAA * HSO3 * PAAL * ( AC + 1.65E-5 )
        TOTOX = PPAA0 * ONE_OVER_XL
        IF ( ( DSIVDT( 5 ) .EQ. 0.0 ) .OR.
     &       ( TSIV  .LE. CONCMIN ) .OR.
     &       ( TOTOX .LE. CONCMIN ) ) THEN
          DTW( 5 ) = DTRMV
        ELSE
          DTW( 5 ) = -0.1 * MIN( TOTOX, TSIV ) / DSIVDT( 5 )
        END IF

C...Calculate total sulfur iv oxidation rate

        DSIVDT( 0 ) = 0.0
        DO IOX = 1, NUMOX
          DSIVDT( 0 ) = DSIVDT( 0 ) + DSIVDT( IOX )
        END DO

C...first Hg reaction:  Hg(aq) + O3(aq) => HgO(aq)

        DHgDT(IHg_ox) = RHg_ox * O3L * HgL
c        IF ((DHgDT(IHg_ox) .EQ. 0.0).OR.( HgL .LE. 1.0E-30 ) ) THEN
c          DTW(IHg_ox + NUMOX) = DTRMV
c        ELSE
cC         at completion, dtw*dhgdt=min(O3L, HgL) (limiting reagent)
c          DTW(IHg_ox + NUMOX) = 0.1 * (MIN(O3L, HgL))/DHgDT(IHg_ox )
c        END IF

C...second Hg reaction:  HgSO3 => Hg(aq) + S(IV)

        DHgDT(IHgSO3) = RHgSO3 * HgSO3
        IF ( ( DHgDT(IHgSO3) .EQ. 0.0 ).OR.(HgSO3 .LE. 1.0E-30) ) THEN
          DTW(IHgSO3 + NUMOX ) = DTRMV
        ELSE
          DTW(IHgSO3 + NUMOX ) = .1* RHgSO3I
        END IF

C...third Hg reaction:  Hg(OH)2 => Hg + products

        DHgDT(IHgHY) = RHgHY * HgHY
        IF ( ( DHgDT(IHgHY) .EQ. 0.0 ) .OR. ( HgHY .LE. 1.0E-30 ) ) THEN
          DTW(IHgHY + NUMOX ) = DTRMV
        ELSE
          DTW(IHgHY + NUMOX ) = .1* RHgHYI
        END IF

C...fourth Hg reaction:  Hg(aq) + OHRAD(aq) => Hg(II)

        DHgDT(IOHRAD) = ROHRAD * OHRAD * HgL
c        IF ( ( DHgDT(IOHRAD) .EQ. 0.0 ) .OR. ( HgL .LE. 1.0E-30 ) .OR.
c     &      ( OHRAD .LE. 1.0E-30 ) ) THEN
c          DTW(IOHRAD + NUMOX ) = DTRMV
c        ELSE
cC         at completion, dtw*dhgdt=min(OHRAD, HgL) (limiting reagent)
c          DTW(IOHRAD + NUMOX ) = 0.1 * (MIN(OHRAD, HgL))/DHgDT(IOHRAD)
c        END IF

C...fifth Hg reaction:  OXIDATION OF Hg(aq) BY CHLORINE (HOCl and OCl-)
C
C  Hg(aq) + HOCl(aq) => Hg(II) + products
C  Hg(aq) + OCl-   --(H+)-->  Hg(II) + products
C  HOCl <=> H+ + OCl-                   K = 10**-7.5
C
        RHg6 =  K6a*AC/(AC+KeqHOCl) + K6b*KeqHOCl/(AC+KeqHOCl)
        DHgDT(IClI) = RHg6 *  HgL * ClI
c        IF ( ( DHgDT(IClI) .EQ. 0.0 ) .OR. ( HgL .LE. 1.0E-30 ) ) THEN
c          DTW(IClI + NUMOX ) = DTRMV
c        ELSE
c          DTW(IClI+ NUMOX ) = 0.1 * (MIN(HgL, ClI))/DHgDT(IClI)
c        END IF
c        if(DTW(IClI+ NUMOX ) .lt. 0.1 ) then  !temporary check
c           DTW(IClI+ NUMOX ) = DTRMV
c           print*,"Warning: DTW too short for Chlorine ox. of Hg(0)"
c        endif

C...sixth Hg reaction:  REDUCTION OF Hg(II) by HO2
C
C  Hg(II) + HO2 =>  Hg+ + products
C  Hg+    + HO2 =>  Hg(aq) + products
C  Overall: Hg(II) + 2 HO2 => Hg(aq) + products
C
        TMPVAR =HgII+HgHY+HgSO3+Hgdisulf+HgOHp+HgOHCl+HgCl2L
        DHgDT(IHO2) = KHO2 *  TMPVAR * HO2
        IF ( ( DHgDT(IHO2) .EQ. 0.0 ) .OR.(TMPVAR.LE. 1.0E-30 ) ) THEN
          DTW(IHO2 + NUMOX ) = DTRMV
        ELSE
          DTW(IHO2+ NUMOX ) = 0.1 * (MIN(HO2, TMPVAR))/DHgDT(IHO2)
        END IF

C Adsorption of Hg Species HgSO3 -> SHgSO3
        DHgDT(ISHgSO3) = RHgad * HgSO3
c        IF ((DHgDT(ISHgSO3) .EQ. 0.0 ).OR.(HgSO3  .LE. 1.0E-30 ))THEN
c          DTW(ISHgSO3 + NUMOX ) = DTRMV
c        ELSE
c          DTW(ISHgSO3 + NUMOX ) = .1* RHgadI
c        END IF

C Desorption of Hg Species SHgSO3 -> HgSO3
        DHgDT(IDHgSO3) = RHgde * SHgSO3
c        IF ( ( DHgDT(IDHgSO3).EQ.0.0).OR.(SHgSO3.LE.1.0E-30 ) ) THEN
c          DTW(IDHgSO3 + NUMOX ) = DTRMV
c        ELSE
c          DTW(IDHgSO3 + NUMOX ) = .1* RHgdeI
c        END IF

C Adsorption of Hg Species HgCl2L -> SHgCl2
        DHgDT(ISHgCl2) = RHgad * HgCl2L
c        IF ((DHgDT(ISHgCl2) .EQ. 0.0) .OR. (HgCl2L .LE. 1.0E-30)) THEN
c          DTW(ISHgCl2 + NUMOX ) = DTRMV
c        ELSE
c          DTW(ISHgCl2 + NUMOX ) = .1* RHgadI
c        END IF

C Desorption of Hg Species SHgCl2 -> HgCl2L
        DHgDT(IDHgCl2) = RHgde * SHgCl2
c        IF ((DHgDT(IDHgCl2) .EQ. 0.0 ).OR.( SHgCl2 .LE. 1.0E-30 ))THEN
c          DTW(IDHgCl2 + NUMOX ) = DTRMV
c        ELSE
c          DTW(IDHgCl2 + NUMOX ) = .1* RHgdeI
c        END IF

C Adsorption of Hg Species Hgdisulf -> SHgdisulf
        DHgDT(ISHgdisulf) = RHgad * Hgdisulf
c        IF ((DHgDT(ISHgdisulf).EQ.0.0 ).OR.(Hgdisulf.LE.1.0E-30))THEN
c          DTW(ISHgdisulf + NUMOX ) = DTRMV
c        ELSE
c          DTW(ISHgdisulf + NUMOX ) = .1* RHgadI
c        END IF

C Desorption of Hg Species SHgdisulf -> Hgdisulf
        DHgDT(IDHgdisulf) = RHgde * SHgdisulf
c        IF ((DHgDT(IDHgdisulf).EQ.0.0).OR.(SHgdisulf.LE.1.0E-30))THEN
c          DTW(IDHgdisulf + NUMOX ) = DTRMV
c        ELSE
c          DTW(IDHgdisulf + NUMOX ) = .1* RHgdeI
c        END IF

C Adsorption of Hg Species HgOHp    -> SHgOHp
        DHgDT(ISHgOHp) = RHgad * HgOHp
c        IF ( (DHgDT(ISHgOHp) .EQ. 0.0 ).OR.( HgOHp .LE. 1.0E-30))THEN
c          DTW(ISHgOHp + NUMOX ) = DTRMV
c        ELSE
c          DTW(ISHgOHp + NUMOX ) = .1* RHgadI
c        END IF

C Desorption of Hg Species SHgOHp    -> HgOHp
        DHgDT(IDHgOHp) = RHgde * SHgOHp
c        IF (( DHgDT(IDHgOHp) .EQ. 0.0 ).OR.( SHgOHp .LE.1.0E-30) )THEN
c          DTW(IDHgOHp + NUMOX ) = DTRMV
c        ELSE
c          DTW(IDHgOHp + NUMOX ) = .1* RHgdeI
c        END IF

C Adsorption of Hg Species HgOHCl   -> SHgOHCl
        DHgDT(ISHgOHCl) = RHgad * HgOHCl
c        IF ((DHgDT(ISHgOHCl).EQ.0.0 ).OR.( HgOHCl .LE. 1.0E-30 ) )THEN
c          DTW(ISHgOHCl + NUMOX ) = DTRMV
c        ELSE
c          DTW(ISHgOHCl + NUMOX ) = .1* RHgadI
c        END IF

C Desorption of Hg Species SHgOHCl   -> HgOHCl
        DHgDT(IDHgOHCl) = RHgde * SHgOHCl
c        IF (( DHgDT(IDHgOHCl).EQ.0.0).OR.(SHgOHCl.LE. 1.0E-30 ) )THEN
c          DTW(IDHgOHCl + NUMOX ) = DTRMV
c        ELSE
c          DTW(IDHgOHCl + NUMOX ) = .1* RHgdeI
c        END IF

C Adsorption of Hg Species HgHY -> SHgHY
        DHgDT(ISHgHY) = RHgad * HgHY
c        IF ((DHgDT(ISHgHY).EQ.0.0 ) .OR. ( HgHY .LE. 1.0E-30 ) ) THEN
c          DTW(ISHgHY + NUMOX ) = DTRMV
c        ELSE
c          DTW(ISHgHY + NUMOX ) = .1* RHgadI
c        END IF

C Desorption of Hg Species SHgHY -> HgHY
        DHgDT(IDHgHY) = RHgde * SHgHY
c        IF ((DHgDT(IDHgHY) .EQ. 0.0 ).OR.( SHgHY .LE. 1.0E-30 ) ) THEN
c          DTW(IDHgHY + NUMOX ) = DTRMV
c        ELSE
c          DTW(IDHgHY + NUMOX ) = .1* RHgdeI
c        END IF

C Adsorption of Hg Species HgII -> SHgII
        DHgDT(ISHgII) = RHgad * HgII
c        IF (( DHgDT(ISHgII).EQ.0.0 ) .OR. ( HgII .LE. 1.0E-30 ) ) THEN
c          DTW(ISHgII + NUMOX ) = DTRMV
c        ELSE
c          DTW(ISHgII + NUMOX ) = .1* RHgadI
c        END IF

C Desorption of Hg Species SHgII -> HgII
        DHgDT(IDHgII) = RHgde * SHgII
c        IF ((DHgDT(IDHgII) .EQ. 0.0 ).OR.( SHgII .LE. 1.0E-30 ) ) THEN
c          DTW(IDHgII + NUMOX ) = DTRMV
c        ELSE
c          DTW(IDHgII + NUMOX ) = .1* RHgdeI
c        END IF

C...Calculate a minimum time step required

        DTW( 0 ) = MIN( DTW( 1 ), DTW( 2 ), DTW( 3 ), DTW( 4 ),
     &                  DTW( 5 ), DTW( 7 ), DTW( 8 ), DTW(11 ))
c        DTW( 0 ) = MIN( DTW( 1 ), DTW( 2 ), DTW( 3 ), DTW( 4 ),
c     &                  DTW( 5 ), DTW( 6 ), DTW( 7 ), DTW( 8 ),
c     &                  DTW( 9 ), DTW(10 ), DTW(11 ), DTW(12 ),
c     &                  DTW(13 ), DTW(14 ), DTW(15 ), DTW(16 ),
c     &                  DTW(17 ), DTW(18 ), DTW(19 ), DTW(20 ),
c     &                  DTW(21 ), DTW(22 ), DTW(23 ), DTW(24 ),
c     &                  DTW(25 ))

C...Calculate the safe timestep for the mercury chemistry (RB)

        DTWHG = MIN(DTW( 7 ), DTW( 8 ), DTW(11 ))

C...check for large time step

        IF ( DTW( 0 ) .GT. 8.0E+37 ) THEN
          WRITE(6,1001) PRCRATE, DSIVDT(0), TS6, DTW(0), CTHK1, WTAVG
        ELSE

C...calculate the change in sulfur iv for this time step

60        DTS6 = ABS( DTW( 0 ) * ( -DSIVDT( 0 ) - TS6 * PRCRATE
     &         / ( 3600.0 * CTHK1 * WTAVG ) ) )

C...If DSIV(0), sulfur iv oxidized during this time step would be
C... less than 5% of sulfur oxidized since time 0, then double DT
C... Modified to take mercury chemistry into account (RB)
  
C          IF ( DTW( 0 ) .LE. TAUCLD ) THEN
          IF ( TIMEW + DTW( 0 ) .LT. TAUCLD ) THEN  ! (RB)
            IF ( DTS6 .LT. 0.05 * TS6 ) THEN
              DTW( 0 ) = DTW( 0 ) * 2.0
              IF ( DTW( 0 ) .LT. DTWHG ) THEN
                GO TO 60
              ELSE
                DTW( 0 ) = DTWHG
              END IF
            END IF
          END IF
        END IF
        DTW( 0 ) = MIN( DTW( 0 ), DTRMV )

C...Limit the timestep to prevent negative SO2 concentrations and mass creation
C...  for sulfate (suggested by Bonyoung Koo)

        IF ( DSIVDT( 0 ) .LT. 0.0 ) THEN
          DTW( 0 ) = MIN( DTW( 0 ), -TSIV * 1.00001 / DSIVDT( 0 ) )
        END IF

C The following two conditions for timestep expansion must not exceed
C the safe timestep length for mercury chemistry.  RB

        IF ( TIMEW + DTW( 0 ) .GT. TAUCLD ) DTW( 0 ) = TAUCLD - TIMEW
C        IF ( TS6 .LT. 1.0E-11 ) DTW( 0 ) = TAUCLD - TIMEW
CCC        IF ( TS6 .LT. 1.0E-11 ) DTW( 0 ) = DTWHG
C        IF ( ITERAT .GT. 100 ) DTW( 0 ) = TAUCLD - TIMEW
        IF ( ITERAT .GT. 100 ) DTW( 0 ) = DTWHG

C...If the total time after this time increment will be greater than
C...  TAUCLD sec., then set DTW(0) so that total time will be TAUCLD

        IF ( TIMEW + DTW( 0 ) .GT. TAUCLD ) DTW( 0 ) = TAUCLD - TIMEW

C...Set DSIV(I), I = 0,NUMOX, the amount of S(IV) oxidized by each
C... individual oxidizing agent, as well as the total.

        DO IOX = 0, NUMOX
          DS4( IOX ) = DS4( IOX ) + DTW( 0 ) * DSIVDT( IOX )
        END DO

C...Hg species reactions

        DHg(IHg_ox) = DHg(IHg_ox) + DTW( 0 ) * DHgDT(IHg_ox)
        DHg(IHgSO3) = DHg(IHgSO3) + DTW( 0 ) * DHgDT(IHgSO3)
        DHg(IHgHY) = DHg(IHgHY) + DTW( 0 ) * DHgDT(IHgHY)
        DHg(IOHRAD) = DHg(IOHRAD) + DTW( 0 ) * DHgDT(IOHRAD)
        DHg(IClI) = DHg(IClI) + DTW( 0 ) * DHgDT(IClI)
        DHg(IHO2) = DHg(IHO2) + DTW( 0 ) * DHgDT(IHO2)
        DHg(ISHgCl2) = DHg(ISHgCl2) + DTW( 0 ) * DHgDT(ISHgCl2)
        DHg(IDHgCl2) = DHg(IDHgCl2) + DTW( 0 ) * DHgDT(IDHgCl2)
        DHg(ISHgSO3) = DHg(ISHgSO3) + DTW( 0 ) * DHgDT(ISHgSO3)
        DHg(IDHgSO3) = DHg(IDHgSO3) + DTW( 0 ) * DHgDT(IDHgSO3)
        DHg(ISHgHY) = DHg(ISHgHY) + DTW( 0 ) * DHgDT(ISHgHY)
        DHg(IDHgHY) = DHg(IDHgHY) + DTW( 0 ) * DHgDT(IDHgHY)
        DHg(ISHgII) = DHg(ISHgII) + DTW( 0 ) * DHgDT(ISHgII)
        DHg(IDHgII) = DHg(IDHgII) + DTW( 0 ) * DHgDT(IDHgII)
        DHg(ISHgdisulf) = DHg(ISHgdisulf) + DTW(0)*DHgDT(ISHgdisulf)
        DHg(IDHgdisulf) = DHg(IDHgdisulf) + DTW(0)*DHgDT(IDHgdisulf)
        DHg(ISHgOHp) = DHg(ISHgOHp) + DTW( 0 ) * DHgDT(ISHgOHp)
        DHg(IDHgOHp) = DHg(IDHgOHp) + DTW( 0 ) * DHgDT(IDHgOHp)
        DHg(ISHgOHCl) = DHg(ISHgOHCl) + DTW( 0 ) * DHgDT(ISHgOHCl)
        DHg(IDHgOHCl) = DHg(IDHgOHCl) + DTW( 0 ) * DHgDT(IDHgOHCl)

C...Compute depositions and concentrations for each species

        WETFAC = PRCRATE * FRACLIQ * DTW( 0 ) * SEC2HR
        DO LIQ = 1, NLIQS
          WETDEP( LIQ ) = WETDEP( LIQ ) + LIQUID( LIQ ) * WETFAC
        END DO

        TIMEW = TIMEW + DTW( 0 )

C...Return to make additional calculations

        GO TO 20
      END IF

c kick out of excessive looping here as an alternative to m3exit
40    continue

C...At this point, TIMEW=TAUCLD
C...  compute the scavenging coefficient for SO4 which will be used for
C...  scavenging aerosol number in the accumulation mode

      DEPSUM = ( WETDEP( LSO4ACCL ) + WETDEP( LHSO4ACCL ) ) * XC1

      IF ( ( TS6ACCA + TS6AKNA - DS4( 0 ) ) .NE. 0.0 ) THEN
        BETASO4 = DEPSUM / ( ( TS6ACCA + TS6AKNA - DS4( 0 ) ) * TAUCLD )
      ELSE
        BETASO4 = 0.0
      END IF

      EBETASO4T = EXP( -BETASO4 * TAUCLD )
      EALFA0T   = EXP( -ALFA0 * TAUCLD )
      EALFA2T   = EXP( -ALFA2 * TAUCLD )
      EALFA3T   = EXP( -ALFA3 * TAUCLD )

C...Compute the output concentrations and wet deposition amounts

      TOTAMM = ( PNH3F  + ( NH4 + NH3L  ) * XL ) * RECIPAP1
      TOTNIT = ( PHNO3F + ( NO3ACC + HNO3L ) * XL ) * RECIPAP1

C...gas-phase species wet deposition (mm mol/lit)

      GASWDEP( LSO2   ) = WETDEP( LSO3L  ) + WETDEP( LHSO3L )
     &                  + WETDEP( LSO2L  )
      GASWDEP( LNH3   ) = WETDEP( LNH3L  )
      GASWDEP( LH2O2  ) = WETDEP( LH2O2L )
      GASWDEP( LO3    ) = WETDEP( LO3L   )
      GASWDEP( LCO2   ) = WETDEP( LCO3L  ) + WETDEP( LHCO3L )
     &                  + WETDEP( LCO2L  )
      GASWDEP( LFOA   ) = WETDEP( LFOAL  ) + WETDEP( LHCO2L )
      GASWDEP( LMHP   ) = WETDEP( LMHPL  )
      GASWDEP( LPAA   ) = WETDEP( LPAAL  )
      GASWDEP( LHCL   ) = WETDEP( LHCLL  )
      GASWDEP( LHNO3  ) = WETDEP( LHNO3L )
      GASWDEP( LN2O5  ) = 0.0
      GASWDEP( LH2SO4 ) = 0.0
      GASWDEP( LHg    ) = WETDEP( LHgL       )
      GASWDEP( LHgCl2 ) = WETDEP( LHgCl2L    ) + WETDEP( LHgSO3L )
     &                  + WETDEP( LHgdisulfL ) + WETDEP( LHgIIL  )
     &                  + WETDEP( LHgOHpL    ) + WETDEP( LHgHYL  )
     &                  + WETDEP( LHgOHClL   )

c set to zero to assign a value to the array space
      GASWDEP( LHO    ) = 0.0
      GASWDEP( LHO2   ) = 0.0
      GASWDEP( LCL2   ) = 0.0

C...gas concentrations (mol/molV)

      GAS( LSO2   ) = ( PSO2F   + XL *  SIV )   * RECIPAP1
      GAS( LH2O2  ) = ( PH2O2F  + XL *  H2O2L ) * RECIPAP1
      GAS( LO3    ) = ( PO3F    + XL *  O3L )   * RECIPAP1
      GAS( LCO2   ) = ( PCO2F   + XL *  CO2L )  * RECIPAP1
      GAS( LFOA   ) = ( PFOAF   + XL * ( FOAL + HCO2 ) ) * RECIPAP1
      GAS( LMHP   ) = ( PMHPF   + XL *  MHPL )  * RECIPAP1
      GAS( LPAA   ) = ( PPAAF   + XL *  PAAL )  * RECIPAP1
      GAS( LHCL   ) = ( PHCLF   + XL *  HCLL )  * RECIPAP1

      GAS( LNH3   ) = FNH3  * TOTAMM
      GAS( LHNO3  ) = FHNO3 * TOTNIT
      GAS( LN2O5  ) = 0.0 ! assume all into aerosol
      GAS( LH2SO4 ) = 0.0 ! assume all into aerosol
      GAS( LHg    ) = ( PHgF    + XL *  HgL )   * RECIPAP1
      RGML = HgCl2L+Hgdisulf+HgSO3+HgOHp+HgOHCl+HgHY+HgII
      GAS( LHgCl2 ) = ( PHgCl2F + XL * RGML )   * RECIPAP1

C...aerosol species wet deposition (mm mol/lit)
C...  there is no wet deposition of aitken particles, they attached
C...  to the accumulation mode particles

      AERWDEP( LSO4AKN ) = 0.0
      AERWDEP( LNH4AKN ) = 0.0
      AERWDEP( LNO3AKN ) = 0.0
      AERWDEP( LECAKN  ) = 0.0
      AERWDEP( LPRIAKN ) = 0.0
      AERWDEP( LPHGAKN ) = 0.0

      AERWDEP( LORGAAKN ) = 0.0
      AERWDEP( LORGPAKN ) = 0.0
      AERWDEP( LORGBAKN ) = 0.0

      AERWDEP( LSO4ACC ) = WETDEP( LSO4ACCL ) + WETDEP( LHSO4ACCL )
      AERWDEP( LNH4ACC ) = WETDEP( LNH4L    )
      AERWDEP( LNO3ACC ) = WETDEP( LNO3ACCL )
      AERWDEP( LECACC  ) = WETDEP( LECL     )
      AERWDEP( LPRIACC ) = WETDEP( LPRIML   )

      AERWDEP( LORGAACC ) = WETDEP( LORGAL )
      AERWDEP( LORGPACC ) = WETDEP( LORGPL )
      AERWDEP( LORGBACC ) = WETDEP( LORGBL )

      AERWDEP( LPHGACC ) = WETDEP( LSHgCl2L    ) + WETDEP( LSHgSO3L )
     &                   + WETDEP( LSHgdisulfL ) + WETDEP( LSHgIIL  )
     &                   + WETDEP( LSHgOHpL    ) + WETDEP( LSHgHYL  )
     &                   + WETDEP( LSHgOHClL   )

      AERWDEP( LSO4COR ) = WETDEP( LTS6CORL  )
      AERWDEP( LNO3COR ) = WETDEP( LNO3CORL  )
      AERWDEP( LPRICOR ) = WETDEP( LPRIMCORL )

      IF ( L_AE3_VRSN ) THEN
        AERWDEP( LNACL  ) = WETDEP( LNACORL )
      ELSE
        AERWDEP( LNAAKN ) = 0.0
        AERWDEP( LCLAKN ) = 0.0
        AERWDEP( LNAACC ) = WETDEP( LNAACCL )
        AERWDEP( LCLACC ) = WETDEP( LCLACCL )
        AERWDEP( LNACOR ) = WETDEP( LNACORL )
        AERWDEP( LCLCOR ) = WETDEP( LCLCORL )
      END IF

      AERWDEP( LK      ) = WETDEP( LKL  )
      AERWDEP( LA3FE   ) = WETDEP( LFEL )
      AERWDEP( LB2MN   ) = WETDEP( LMNL )
      AERWDEP( LCACO3  ) = WETDEP( LCAL )
      AERWDEP( LMGCO3  ) = WETDEP( LMGL )

      AERWDEP( LNUMAKN ) = 0.0
      AERWDEP( LNUMACC ) = 0.0
      AERWDEP( LNUMCOR ) = 0.0
      AERWDEP( LSRFAKN ) = 0.0
      AERWDEP( LSRFACC ) = 0.0

C...aerosol concentrations (mol/molV)

      AEROSOL( LSO4AKN ) = AEROSOL( LSO4AKN ) * EALFA3T
      AEROSOL( LNH4AKN ) = AEROSOL( LNH4AKN ) * EALFA3T
      AEROSOL( LNO3AKN ) = AEROSOL( LNO3AKN ) * EALFA3T
      AEROSOL( LECAKN  ) = AEROSOL( LECAKN  ) * EALFA3T
      AEROSOL( LPRIAKN ) = AEROSOL( LPRIAKN ) * EALFA3T

      AEROSOL( LORGAAKN ) = AEROSOL( LORGAAKN ) * EALFA3T
      AEROSOL( LORGPAKN ) = AEROSOL( LORGPAKN ) * EALFA3T
      AEROSOL( LORGBAKN ) = AEROSOL( LORGBAKN ) * EALFA3T

      AEROSOL( LSO4ACC ) = TS6ACC * XL * RECIPAP1
      AEROSOL( LECACC  ) = EC     * XL * RECIPAP1
      AEROSOL( LPRIACC ) = PRIM   * XL * RECIPAP1

      AEROSOL( LORGAACC ) = ORGA * XL * RECIPAP1
      AEROSOL( LORGPACC ) = ORGP * XL * RECIPAP1
      AEROSOL( LORGBACC ) = ORGB * XL * RECIPAP1

      AEROSOL( LNH4ACC ) = FNH4ACC * TOTAMM
      AEROSOL( LNO3ACC ) = FNO3ACC * TOTNIT

      AEROSOL( LSO4COR ) = TS6COR * XL * RECIPAP1
      AEROSOL( LNO3COR ) = NO3COR * XL * RECIPAP1
      AEROSOL( LPRICOR ) = PRIMCOR* XL * RECIPAP1
      AEROSOL( LK      ) = K      * XL * RECIPAP1
      AEROSOL( LA3FE   ) = FE     * XL * RECIPAP1
      AEROSOL( LB2MN   ) = MN     * XL * RECIPAP1
      AEROSOL( LCACO3  ) = CA     * XL * RECIPAP1
      AEROSOL( LMGCO3  ) = MG     * XL * RECIPAP1

      IF ( L_AE3_VRSN ) THEN
        AEROSOL( LNACL  ) = NACOR * XL * RECIPAP1
      ELSE
        AEROSOL( LNAAKN ) = AEROSOL( LNAAKN ) * EALFA3T
        AEROSOL( LCLAKN ) = AEROSOL( LCLAKN ) * EALFA3T
        AEROSOL( LNAACC ) = NAACC * XL * RECIPAP1
        AEROSOL( LCLACC ) = CLACC * XL * RECIPAP1
        AEROSOL( LNACOR ) = NACOR * XL * RECIPAP1
        AEROSOL( LCLCOR ) = CLCOR * XL * RECIPAP1
      END IF

      AEROSOL( LNUMAKN ) = AEROSOL( LNUMAKN ) * EALFA0T
      AEROSOL( LNUMACC ) = AEROSOL( LNUMACC ) * EBETASO4T
      AEROSOL( LNUMCOR ) = NUMCOR * XL * RECIPAP1

      AEROSOL( LPHGAKN ) = AEROSOL( LPHGAKN ) * EALFA3T
      RGMSNEW = SHgCl2+SHgdisulf+SHgSO3+SHgOHp+SHgOHCl+SHgHY+SHgII
      AEROSOL( LPHGACC ) = RGMSNEW * XL * RECIPAP1

C...prevent negative aerosol Hg

      AEROSOL( LPHGAKN ) = MAX( 0.0, AEROSOL( LPHGAKN ) )
      AEROSOL( LPHGACC ) = MAX( 0.0, AEROSOL( LPHGACC ) )

C...compute the final accumulation aerosol 3rd moment

      M3NEW = ( AEROSOL( LSO4ACC  ) * SGRAERMW( LSO4ACC  ) / 1.8e6
     &      +   AEROSOL( LNH4ACC  ) * SGRAERMW( LNH4ACC  ) / 1.8e6
     &      +   AEROSOL( LNO3ACC  ) * SGRAERMW( LNO3ACC  ) / 1.8e6
     &      +   AEROSOL( LORGPACC ) * SGRAERMW( LORGPACC ) / 2.0e6
     &      +   AEROSOL( LECACC   ) * SGRAERMW( LECACC   ) / 2.2e6
     &      +   AEROSOL( LPRIACC  ) * SGRAERMW( LPRIACC  ) / 2.2e6
     &      +   AEROSOL( LNAACC   ) * SGRAERMW( LNAACC   ) / 2.2e6
     &      +   AEROSOL( LCLACC   ) * SGRAERMW( LCLACC   ) / 2.2e6
     &      +   AEROSOL( LPHGACC  ) * SGRAERMW( LPHGACC  ) / 8.0e6 )
CCC     &      * 6.0 / PI      ! cancels out in division below

      AEROSOL( LSRFAKN ) = AEROSOL( LSRFAKN ) * EALFA2T
      AEROSOL( LSRFACC ) = AEROSOL( LSRFACC )
     &                   * ( EXP( -BETASO4 * TAUCLD * ONETHIRD ) )
     &                   * ( M3NEW / MAX( M3OLD, CONCMIN) ) ** TWOTHIRDS

C...store the amount of hydrogen deposition

      HPWDEP = WETDEP( LACL )

D      ga(1) = gas(lhg)
D      ga(2) = gas(lhgcl2)
D      aa(1) = aerosol(lphgakn)
D      aa(2) = aerosol(lphgacc)
D
D      aa(3) = aerosol(lpriakn)
D      aa(4) = aerosol(lpriacc)
D      aa(5) = aerosol(lecakn)
D      aa(6) = aerosol(lecacc)
D
D      aa(7) = aerosol(lorgaakn)
D      aa(8) = aerosol(lorgaacc)
D      aa(9) = aerosol(lorgpakn)
D      aa(10)= aerosol(lorgpacc)
D      aa(11)= aerosol(lorgbakn)
D      aa(12)= aerosol(lorgbacc)
D
D      gw(1) = gaswdep(lhg)
D      gw(2) = gaswdep(lhgcl2)
D      aw(1) = aerwdep(lphgakn)
D      aw(2) = aerwdep(lphgacc)
D
D      aw(3) = aerwdep(lpriakn)
D      aw(4) = aerwdep(lpriacc)
D      aw(5) = aerwdep(lecakn)
D      aw(6) = aerwdep(lecacc)
D
D      aw(7) = aerwdep(lorgaakn)
D      aw(8) = aerwdep(lorgaacc)
D      aw(9) = aerwdep(lorgpakn)
D      aw(10)= aerwdep(lorgpacc)
D      aw(11)= aerwdep(lorgbakn)
D      aw(12)= aerwdep(lorgbacc)
D
D      aa = aa * pres_atm_over_xl
D      ga = ga * pres_atm_over_xl
D      aw = aw * xc1
D      gw = gw * xc1
D
D      write(logdev,1020)'o1',jdate,jtime,xlat,xlon,
D    &   ga(1),ga(2),aa(1),aa(2),
D    &   gw(1),gw(2),aw(1),aw(2)
D1020    format(a2,i8,i7,f6.1,f7.1,4(4e15.7))
D
D      write(logdev,1030)'o2',jdate,jtime,xlat,xlon,
D    &   aa(3),aa(4),aa(5),aa(6),
D    &   aw(3),aw(4),aw(5),aw(6)
D1030    format(a2,i8,i7,f6.1,f7.1,4(4e15.7))
D
D      write(logdev,1030)'o3',jdate,jtime,xlat,xlon,
D    &   aa(7),aa(8),aa(9),aw(7),aw(8),aw(9)
D
D      write(logdev,1050)'o4',jdate,jtime,xlat,xlon,
D    &   aa(10),aa(11),aa(12),aw(10),aw(11),aw(12),
D    &   pres_atm_over_xl,xc1,
D    &   i20c,i7777c,i30c
D1050    format(a2,i8,i7,f6.1,f7.1,8e15.7,3i7)

      RETURN

C...formats

1001  FORMAT (1X,'STORM RATE=', F6.3, 'DSIVDT(0) =', F10.5,
     &       'TS6=', F10.5, 'DTW(0)=', F10.5, 'CTHK1=', F10.5,
     &       'WTAVG=', F10.5)

      END
@


1.1.1.1
log
@CMAQv4_5_1 release
@
text
@@
