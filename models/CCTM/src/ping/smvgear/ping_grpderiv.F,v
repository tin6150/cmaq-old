head     1.1;
branch   1.1.1;
access   ;
symbols  CMAQv4_5_1:1.1.1.1 ASMD:1.1.1;
locks    ; strict;
comment  @c @;


1.1
date     2006.03.15.20.43.52;  author sjr;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2006.03.15.20.43.52;  author sjr;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@
C***********************************************************************
C   Portions of Models-3/CMAQ software were developed or based on      *
C   information from various groups: Federal Government employees,     *
C   contractors working on a United States Government contract, and    *
C   non-Federal sources (including research institutions).  These      *
C   research institutions have given the Government permission to      *
C   use, prepare derivative works, and distribute copies of their      *
C   work in Models-3/CMAQ to the public and to permit others to do     *
C   so.  EPA therefore grants similar permissions for use of the       *
C   Models-3/CMAQ software, but users are requested to provide copies  *
C   of derivative works to the Government without restrictions as to   *
C   use by others.  Users are responsible for acquiring their own      *
C   copies of commercial software associated with Models-3/CMAQ and    *
C   for complying with vendor requirements.  Software copyrights by    *
C   the MCNC Environmental Modeling Center are used with their         *
C   permissions subject to the above restrictions.                     *
C***********************************************************************

C RCS file, release, date & time of last delta, author, state, [and locker]
C $Header: /project/work/rep/CCTM/src/ping/smvgear/ping_grpderiv.F,v 1.6 2005/02/14 15:17:35 yoj Exp $ 

C what(1) key, module and SID; SCCS file; date and time of last delta:
C @@(#)grpderiv.F        1.1 /project/mod3/CMAQ/src/chem/smvgear/SCCS/s.grpderiv.  F 07 Jul 1997 12:45:28

       SUBROUTINE PING_PDERIV

C***********************************************************************
C
C  FUNCTION: To compute [P]=[I]-bh[J] where J is the Jacobian matrix,
C            (i.e., [J] = d[dCi/dt]/dCi), b is the Gear coefficient,
C            and h is the time-step
C
C  PRECONDITIONS: None
C
C  KEY SUBROUTINES/FUNCTIONS CALLED: None
C
C  REVISION HISTORY: Prototype created by Jerry Gipson, June, 1995,
C                      Based on  the code originally developed by 
C                      M. Jacobson, (Atm. Env., Vol 28, No 2, 1994).
C                    Revised 3/14/96 by Jerry Gipson to conform to
C                      the Models-3 minimum IOV configuration
C                    Revised December 1996 by Jerry Gipson to conform
C                      to the Models-3 interim CTM that includes emissions
C                      in chemistry.
C                    Revised April 1997 to distinguish NSPCS from NSPCSD
C                    Revised April 1997 to conform to Models-3 framework
C                    Modified June, 1997 by Jerry Gipson to be consistent
C                      with beta CTM
C                    Modified September, 1997 by Jerry Gipson to be 
C                      consistent with the targeted CTM
C        March 2000, Jeff Young for monocode
C        Sep 2001, Jeff: Use HGRD_DEFN, (PING_GRVARS3.EXT needs BLKSIZE)
C        02 Feb 05 J.Young: get BLKSIZE from dyn alloc horizontal & vertical
C                           domain specifications module (GRID_CONF)
C***********************************************************************

      USE GRID_CONF           ! horizontal & vertical domain specifications

      IMPLICIT NONE
      
C..INCLUDES:
!     INCLUDE SUBST_HGRD_ID
!     INCLUDE SUBST_VGRD_ID 
!     INCLUDE SUBST_BLKPRM
      INCLUDE SUBST_GC_SPC
      INCLUDE SUBST_RXCMMN 
      INCLUDE 'PING_GRPARMS.EXT'
      INCLUDE 'PING_GRVARS1.EXT'
      INCLUDE 'PING_GRVARS2.EXT'
      INCLUDE 'PING_GRVARS3.EXT'
      
C..ARGUMENTS: None

C..PARAMETERS: None

C..EXTERNAL FUNCTIONS: None

C..SAVED LOCAL VARIABLES: None

C..SCRATCH LOCAL VARIABLES:

      INTEGER IALP           ! Pointer to location of PD term in EXPLIC
      INTEGER IAR            ! Loop index for non-zero entries in [P]
      INTEGER IARP           ! Pointer to location of PD term in [P]
      INTEGER IARRY          ! Pointer to end of [P] entries
      INTEGER ISCP           ! Pointer to stoichiometric coefficient
      INTEGER ISPC           ! Loop index for species
      INTEGER JR1, JR2, JR3  ! Pointer to reactant species conc.
      INTEGER NCELL          ! Loop index for number of cells
      INTEGER NL             ! Loop index for loss PD terms
      INTEGER NLD            ! Number of loss PD terms for each rxn.
      INTEGER NP             ! Loop index for prod PD terms
      INTEGER NPD            ! Number of prod PD terms for each rxn.
      INTEGER NRK            ! Reaction number
      INTEGER NRX            ! Loop index for number of reactions
      INTEGER NONDIAG        ! Pointer to end of off-diagonal entries
      INTEGER NONDIAG1       ! Pointer to start of diagonal entries
      
      REAL( 8 ) :: CR2             ! Temporary product for 3 reactant rxns
      REAL( 8 ) :: FRACN           ! Stoichiometric coeff. times b*h
      REAL( 8 ) :: EXPLIC( BLKSIZE, 3 )  ! Reaction partial derivative terms
      REAL( 8 ) :: CEFF( BLKSIZE, N_GC_SPC )  ! Effective species concentrations
                                         ! (i.e., zeroed if below ZBOUND)
C***********************************************************************

cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c  Increment call counter and set up identity matrix stored in sparse
c  matrix format (i.e., values of cc2 are entries in P that may be 
c  nonzero). Diagonals come after non-diagonal entries.
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      NPDERIV = NPDERIV + 1
      IARRY = IARRAY( NCSP ) 
      NONDIAG = IARRY - ISCHAN  
      NONDIAG1 = NONDIAG + 1
      DO 20 IAR = 1, NONDIAG
         DO 20 NCELL = 1, NUMCELLS
            CC2( NCELL, IAR ) = 0.
  20  CONTINUE
      DO 40 IAR = NONDIAG1, IARRY
      DO 40 NCELL = 1, NUMCELLS
         CC2( NCELL, IAR ) = 1.
  40  CONTINUE
  
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c  Set effective concentrations to be used in PD calculations
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      DO 80 ISPC=1,ISCHAN
         DO 60 NCELL=1,NUMCELLS
            IF( CNEW( NCELL, ISPC ) .LE. ZBOUND ) THEN
               CEFF( NCELL, ISPC ) = 0.0
            ELSE
               CEFF( NCELL, ISPC ) = CNEW( NCELL, ISPC )
            ENDIF
   60    CONTINUE
   80 CONTINUE
   
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c  Loop over reaction rates adding partial derivative terms; EXPLIC
c  holds the PD terms according to number of reactants
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      DO 240 NRX = 1, NUSERAT( NCSP )
         NRK = NKUSERAT( NRX, NCSP )
         
c...partial derivative term for reactions with 1 reactant
         IF( NREACT( NRK ) .EQ. 1 ) THEN
            DO 100 NCELL = 1, NUMCELLS
               EXPLIC( NCELL, 1 )  = RK( NCELL, NRK ) 
  100       CONTINUE
  
c...partial derivative terms for reactions with 2 reactants
         ELSEIF( NREACT( NRK ) .EQ. 2 ) THEN
            JR1 = IRM2( NRK, 1, NCS )
            JR2 = IRM2( NRK, 2, NCS )
            DO 120 NCELL  = 1, NUMCELLS
               EXPLIC( NCELL, 1 )  = RK(   NCELL, NRK ) * 
     &                               CEFF( NCELL, JR2 )
               EXPLIC( NCELL, 2 )  = RK(   NCELL, NRK ) * 
     &                               CEFF( NCELL, JR1 )
 120        CONTINUE
 
c.....partial derivative terms for reactions with 3 reactants
         ELSEIF( NREACT( NRK ).EQ.3 ) THEN
            JR1 = IRM2( NRK, 1, NCS )
            JR2 = IRM2( NRK, 2, NCS )
            JR3 = IRM2( NRK, 3, NCS )
            DO 140 NCELL = 1, NUMCELLS
               CR2 = RK( NCELL, NRK ) * CEFF( NCELL, JR2 )
               EXPLIC( NCELL, 1 ) = CR2 * CEFF( NCELL, JR3 )
               EXPLIC( NCELL, 2 ) = RK(   NCELL, NRK ) * 
     &                              CEFF( NCELL, JR1 ) * 
     &                              CEFF( NCELL, JR3 ) 
               EXPLIC( NCELL, 3 ) = CR2 * CEFF( NCELL, JR1 )
  140       CONTINUE
         ENDIF
         
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c  Add PD terms to [P] for this reaction
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c...loss terms
         NLD = NDERIVL( NRK, NCSP )         
         DO 160 NL = 1, NLD
            IARP = JARRL( NRK, NL, NCSP )
            IALP = JLIAL( NRK, NL, NCSP )
            DO 160 NCELL = 1, NUMCELLS
               CC2( NCELL, IARP ) = CC2( NCELL, IARP ) - R1DELT * 
     &                              EXPLIC( NCELL, IALP ) 
  160       CONTINUE
  
c...production terms with stoichiomteric coeff EQ 1.0 and NE 1.0
         NPD = NDERIVP( NRK, NCSP )
         DO 220 NP = 1, NPD
            IARP = JARRP( NRK, NP, NCSP )
            IALP = JPIAL( NRK, NP, NCSP )
            IF( ICOEFF( NRK, NP, NCSP ) .EQ. 0 ) THEN
               DO 180 NCELL = 1, NUMCELLS
                  CC2( NCELL, IARP ) = CC2( NCELL, IARP ) + R1DELT * 
     &                                 EXPLIC( NCELL, IALP ) 
  180          CONTINUE
            ELSE
               ISCP = ICOEFF( NRK, NP, NCSP )
               FRACN = SC( NRK, ISCP ) * R1DELT 
               DO 200 NCELL = 1, NUMCELLS
                  CC2( NCELL, IARP ) = CC2( NCELL, IARP ) + FRACN * 
     &                                 EXPLIC( NCELL, IALP ) 
  200          CONTINUE 
            ENDIF
  220    CONTINUE 
  240 CONTINUE

      RETURN 
      END
@


1.1.1.1
log
@CMAQv4_5_1 release
@
text
@@
