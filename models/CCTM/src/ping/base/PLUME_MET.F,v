head     1.1;
branch   1.1.1;
access   ;
symbols  CMAQv4_5_1:1.1.1.1 ASMD:1.1.1;
locks    ; strict;
comment  @c @;


1.1
date     2006.03.15.20.43.52;  author sjr;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2006.03.15.20.43.52;  author sjr;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@
C***********************************************************************
C   Portions of Models-3/CMAQ software were developed or based on      *
C   information from various groups: Federal Government employees,     *
C   contractors working on a United States Government contract, and    *
C   non-Federal sources (including research institutions).  These      *
C   research institutions have given the Government permission to      *
C   use, prepare derivative works, and distribute copies of their      *
C   work in Models-3/CMAQ to the public and to permit others to do     *
C   so.  EPA therefore grants similar permissions for use of the       *
C   Models-3/CMAQ software, but users are requested to provide copies  *
C   of derivative works to the Government without restrictions as to   *
C   use by others.  Users are responsible for acquiring their own      *
C   copies of commercial software associated with Models-3/CMAQ and    *
C   for complying with vendor requirements.  Software copyrights by    *
C   the MCNC Environmental Modeling Center are used with their         *
C   permissions subject to the above restrictions.                     *
C***********************************************************************

C RCS file, release, date & time of last delta, author, state, [and locker]
C $Header: /project/work/rep/CCTM/src/ping/base/PLUME_MET.F,v 1.5 2005/02/14 15:13:44 yoj Exp $

C what(1) key, module and SID; SCCS file; date and time of last delta:
C %W% %P% %G% %U%

C:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
      MODULE PLUME_MET

C 22 Sep 01 J.Young: dyn alloc - Use HGRD_DEFN; replace INTERP3 with INTERPX
C 03 Dec 01 David Wong: added SAVE statemnt to dynamic allocate variables
C 02 Feb 05 J.Young: dyn alloc - vertical layer specifications in VGRD_DEFN

      USE PLUME_STATE ! inherits PLUME_LOC, which inherits PING_GLOBDIM
                      ! and HGRD_DEFN
      IMPLICIT NONE

C Current precip (m)
      REAL, ALLOCATABLE, SAVE :: PRECIPNOW( : )

C Current dep vel (m/s)
      REAL, ALLOCATABLE, SAVE :: VDEP_GC( :,: )
      REAL, ALLOCATABLE, SAVE :: VDEP_NR( :,: )

C Current layer height above ground (m)
      REAL, ALLOCATABLE, SAVE :: ZFNOW( :,: )

!     COMMON / PINGR3 / VDEP_GC, PRECIPNOW,        ZFNOW

      CONTAINS

         SUBROUTINE PING_READMET ( DATE, TIME, NPLUMES )

         USE VGRD_DEFN             ! vertical layer specifications

         INTEGER, INTENT( IN ) :: DATE
         INTEGER, INTENT( IN ) :: TIME
         INTEGER, INTENT( IN ) :: NPLUMES

!        INCLUDE SUBST_HGRD_ID  ! horizontal dimensioning parameters
!        INCLUDE SUBST_VGRD_ID  ! vertical dimensioning parameters
         INCLUDE SUBST_GC_SPC   ! gas chemistry species table (dim./name/molwt)
         INCLUDE SUBST_GC_DEPV  ! gas chem dep vel surrogate names and map table
         INCLUDE SUBST_NR_SPC   ! non-reactive species table
         INCLUDE SUBST_NR_DEPV ! non-react dep vel surrogate names and map table
         INCLUDE SUBST_IOPARMS  ! I/O parameters definitions
         INCLUDE SUBST_IOFDESC  ! file header data structure
         INCLUDE SUBST_IODECL   ! I/O definitions and declarations
         INCLUDE SUBST_FILES_ID ! CCTM IOAPI file declarations


         CHARACTER( 200 ) :: MSG                     ! Message text
         CHARACTER( 16 )  :: PNAME = 'PING_READMET'
         CHARACTER( 16 )  :: VNAME                   ! Temp. for variable name
         CHARACTER( 16 )  :: FNAME                   ! Temp. for file name

         REAL, ALLOCATABLE, SAVE :: TOTALRAIN( : )
         REAL DEPV_GC( NCOLS,NROWS,N_GC_DEPV )   ! gas dep vels
         REAL DEPV_NR( NCOLS,NROWS,N_NR_DEPV )   ! non-reactive dep vels
         REAL RAIN( NCOLS,NROWS,2 )              ! non- and convect. rain
         REAL ZF( NCOLS,NROWS,NLAYS )
         REAL TRAIN0

         INTEGER :: UPDATE_SCS = 0   ! Number of seconds since last update
         INTEGER, SAVE :: LASTDATE
         INTEGER, SAVE :: LASTTIME
         INTEGER NPLUMTOT, ALLOCSTAT
         INTEGER I, J, K, MY_I, C, R, L
         INTEGER, EXTERNAL :: SECSDIFF

         INTEGER      GXOFF, GYOFF            ! global origin offset from file
C for INTERPX
         INTEGER, SAVE :: STRTCOLMC2, ENDCOLMC2, STRTROWMC2, ENDROWMC2
         INTEGER, SAVE :: STRTCOLMC3, ENDCOLMC3, STRTROWMC3, ENDROWMC3

         LOGICAL OK
         LOGICAL, EXTERNAL :: CURRSTEP
         INTEGER, SAVE :: LOGDEV
         LOGICAL, SAVE :: FIRSTIME = .TRUE.

         IF ( FIRSTIME ) THEN
            FIRSTIME = .FALSE.
            LOGDEV = INIT3 ()
            
            CALL GET_NMEPSES ( )

            NPLUMTOT = N_MEPSES * N_RLEASES

C Allocate and initialize PRECIPNOW, TOTALRAIN, VDEP_GC, ZFNOW

            ALLOCATE ( PRECIPNOW( NPLUMTOT ), STAT = ALLOCSTAT )
            IF ( ALLOCSTAT .NE. 0 ) THEN
               MSG = '*** PRECIPNOW Memory allocation failed'
               CALL M3ERR ( PNAME, DATE, TIME, MSG, .TRUE.)
               END IF

            PRECIPNOW = -999.0

            ALLOCATE ( TOTALRAIN( NPLUMTOT ), STAT = ALLOCSTAT )
            IF ( ALLOCSTAT .NE. 0 ) THEN
               MSG = '*** TOTALRAIN Memory allocation failed'
               CALL M3ERR ( PNAME, DATE, TIME, MSG, .TRUE.)
               END IF

            TOTALRAIN = -999.0

            ALLOCATE ( VDEP_GC( N_GC_SPC,NPLUMTOT ), STAT = ALLOCSTAT )
            IF ( ALLOCSTAT .NE. 0 ) THEN
               MSG = '*** VDEP_GC Memory allocation failed'
               CALL M3ERR ( PNAME, DATE, TIME, MSG, .TRUE.)
               END IF

            VDEP_GC = 0.0

            ALLOCATE ( VDEP_NR( N_NR_SPC,NPLUMTOT ), STAT = ALLOCSTAT )
            IF ( ALLOCSTAT .NE. 0 ) THEN
               MSG = '*** VDEP_GC Memory allocation failed'
               CALL M3ERR ( PNAME, DATE, TIME, MSG, .TRUE.)
               END IF

            VDEP_NR = 0.0

            ALLOCATE ( ZFNOW( NPLUMTOT,NLAYS ), STAT = ALLOCSTAT )
            IF ( ALLOCSTAT .NE. 0 ) THEN
               MSG = '*** ZFNOW Memory allocation failed'
               CALL M3ERR ( PNAME, DATE, TIME, MSG, .TRUE.)
               END IF

            ZFNOW = 0.0

            LASTDATE = DATE
            LASTTIME = TIME

            CALL SUBHFILE ( MET_CRO_2D, GXOFF, GYOFF,
     &                      STRTCOLMC2, ENDCOLMC2, STRTROWMC2, ENDROWMC2 )
            CALL SUBHFILE ( MET_CRO_3D, GXOFF, GYOFF,
     &                      STRTCOLMC3, ENDCOLMC3, STRTROWMC3, ENDROWMC3 )

            END IF   ! FIRSTIME

C Get the number of seconds since the last update

         UPDATE_SCS = SECSDIFF( LASTDATE, LASTTIME, DATE, TIME )
         LASTDATE = DATE
         LASTTIME = TIME

C Open the met data files

         OK = OPEN3( MET_CRO_3D, FSREAD3, PNAME )
         IF ( .NOT. OK ) THEN
            MSG = 'Error Opening ' // MET_CRO_3D
            CALL M3ERR ( PNAME, DATE, TIME, MSG, .TRUE. )
            END IF

         OK = OPEN3( MET_CRO_2D, FSREAD3, PNAME )
         IF ( .NOT. OK ) THEN
            MSG = 'Error Opening ' // MET_CRO_2D
            CALL M3ERR ( PNAME, DATE, TIME, MSG, .TRUE. )
            END IF

C Read variables in MET_CRO_2D file ...
C deposition velocities, RN, RC (accumulated nonconvective & convective precip.)

         FNAME = MET_CRO_2D

         DO I = 1, N_GC_DEPV
            VNAME = GC_DEPV( I )
            OK = INTERPX( FNAME, VNAME, PNAME,
     &                    STRTCOLMC2,ENDCOLMC2, STRTROWMC2,ENDROWMC2, 1,1,
     &                    DATE, TIME, DEPV_GC( 1,1,I ) )
            IF ( .NOT. OK ) THEN
               MSG = 'DEPV species ' // GC_DEPV( I )
     &             // ' not found on ' // FNAME
               CALL M3WARN( PNAME, DATE, TIME, MSG )
               END IF
            END DO

!        DO I = 1, N_NR_DEPV
         DO I = 1, 1          ! do not get the volatile organics
            VNAME = NR_DEPV( I )
            OK = INTERPX( FNAME, VNAME, PNAME,
     &                    STRTCOLMC2,ENDCOLMC2, STRTROWMC2,ENDROWMC2, 1,1,
     &                    DATE, TIME, DEPV_NR( 1,1,I ) )
            IF ( .NOT. OK ) THEN
               MSG = 'DEPV species ' // NR_DEPV( I )
     &             // ' not found on ' // FNAME
               CALL M3WARN( PNAME, DATE, TIME, MSG )
               END IF
            END DO

         VNAME = 'RN'
         OK = INTERPX( FNAME, VNAME, PNAME,
     &                 STRTCOLMC2,ENDCOLMC2, STRTROWMC2,ENDROWMC2, 1,1,
     &                 DATE, TIME, RAIN( 1,1,1 ) )
         IF ( .NOT. OK ) CALL M3ERR( PNAME, DATE, TIME, VNAME, .TRUE. )

         VNAME = 'RC'
         OK = INTERPX( FNAME, VNAME, PNAME,
     &                 STRTCOLMC2,ENDCOLMC2, STRTROWMC2,ENDROWMC2, 1,1,
     &                 DATE, TIME, RAIN( 1,1,2 ) )
         IF ( .NOT. OK ) CALL M3ERR( PNAME, DATE, TIME, VNAME, .TRUE. )

C Read variables in MET_CRO_3D file ...
C ZF ( mid-layer & full-layer height above the surface, in m )

         FNAME = MET_CRO_3D

         VNAME = 'ZF'
         OK = INTERPX( FNAME, VNAME, PNAME,
     &                 STRTCOLMC3,ENDCOLMC3, STRTROWMC3,ENDROWMC3, 1,NLAYS,
     &                 DATE, TIME, ZF )
         IF ( .NOT. OK ) CALL M3ERR( PNAME, DATE, TIME, VNAME, .TRUE. )

C Set the variables accordingly (For all plume sections)

         DO I = 1, MY_NPLUMES
            MY_I = MY_PLUMEPTR( I )
            C = MY_IXC( MY_I ); R = MY_IYC( MY_I )

            IF ( PFLAG( MY_I ) .GE. 1 .AND. PFLAG( MY_I ) .LT. 5 ) THEN
               DO L = 1, NLAYS
                  ZFNOW( MY_I,L ) = ZF( C,R,L )
                  END DO

C Set the deposition velocities ( multiply by deposition factor ) (m/s)

               DO J = 1, N_GC_DEPV
                  K = GC_DEPV_MAP( J )
                  VDEP_GC( K,MY_I ) = GC_DEPV_FAC( J )
     &                              * DEPV_GC( C,R,J )
                  END DO

!              DO J = 1, N_NR_DEPV
               DO J = 1, 1
                  K = NR_DEPV_MAP( J )
                  VDEP_NR( K,MY_I ) = NR_DEPV_FAC( J )
     &                              * DEPV_NR( C,R,J )
                  END DO

C Set the precipitation flag

               TRAIN0 = RAIN( C,R,1 ) + RAIN( C,R,2 )
               PRECIPNOW( MY_I ) = TRAIN0 - TOTALRAIN( MY_I )
               TOTALRAIN( MY_I ) = TRAIN0

C Change PRECIPNOW to rate (m/s)

               IF ( UPDATE_SCS .GT. 0 ) THEN
                  PRECIPNOW( MY_I ) = PRECIPNOW( MY_I ) / FLOAT( UPDATE_SCS )
                  ELSE
                  PRECIPNOW( MY_I ) = 0.0
                  END IF
               END IF  ! PFLAG( MY_I ) .GE. 1 .AND. PFLAG( MY_I ) .LT. 5

            END DO  ! NPLUMES

!        write( logdev,* ) '@@@@ ReadMet: '

         RETURN

         END SUBROUTINE PING_READMET

      END MODULE PLUME_MET
@


1.1.1.1
log
@CMAQv4_5_1 release
@
text
@@
