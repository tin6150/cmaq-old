head     1.1;
branch   1.1.1;
access   ;
symbols  CMAQv4_5_1:1.1.1.1 ASMD:1.1.1;
locks    ; strict;
comment  @c @;


1.1
date     2006.03.15.20.43.51;  author sjr;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2006.03.15.20.43.51;  author sjr;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@
C***********************************************************************
C   Portions of Models-3/CMAQ software were developed or based on      *
C   information from various groups: Federal Government employees,     *
C   contractors working on a United States Government contract, and    *
C   non-Federal sources (including research institutions).  These      *
C   research institutions have given the Government permission to      *
C   use, prepare derivative works, and distribute copies of their      *
C   work in Models-3/CMAQ to the public and to permit others to do     *
C   so.  EPA therefore grants similar permissions for use of the       *
C   Models-3/CMAQ software, but users are requested to provide copies  *
C   of derivative works to the Government without restrictions as to   *
C   use by others.  Users are responsible for acquiring their own      *
C   copies of commercial software associated with Models-3/CMAQ and    *
C   for complying with vendor requirements.  Software copyrights by    *
C   the MCNC Environmental Modeling Center are used with their         *
C   permissions subject to the above restrictions.                     *
C***********************************************************************

C RCS file, release, date & time of last delta, author, state, [locker]
C $Header: /project/work/rep/CCTM/src/ping/aero3/ping_aero_driver.F,v 1.3 2005/09/07 18:03:41 jug Exp $

C what(1) key, module and SID; SCCS file; date and time of last delta:
C @@(#)aero_driver.F     1.5 /project/mod3/CMAQ/src/aero/aero/SCCS/s.aero_driver.F 25 Jul 1997 08:50:55

C=========================================================================
C This file, ping_aero_driver.F contains:
C    SUBROUTINE PING_AERO
C=========================================================================

C >>> 08/04/2000 Changes necessary to be able to read and process
C two different types of emissions files.
C the first type is the existing opperational PM2.5 & PM10 unspeciated
C file. The new file format has speciated emissions. 
C >>> This version uses the FORTRAN 90 feature for runtime memory
C allocation.

C 1/12/99 David Wong at LM: 
C   -- introduce new variable MY_NUMBLKS (eliminate NUMBLKS)
C   -- re-calculate NOXYZ accordingly
C FSB Updated for inclusion of surface area / second moment
C 25 Sep 00 (yoj) various bug fixes, cleanup to coding standards
C   Jeff - Dec 00 - move CPLUME_MAP into f90 module
C FSB/Jeff - May 01 - optional emissions processing
C   Jerry Gipson - Jun 01 - added SOA linkages for saprc99
C   Bill Hutzell - Jun 01 - simplified CBLK mapping
C   Jerry Gipson - Jun 03 - modified for new soa treatment
C   Jerry Gipson - Aug 03 - removed SOA prod form alkenes & added 
C       emission adjustment factors for ALK & TOL ( RADM2 & SAPRC99 only)
C   J.Young 2 Feb 05: dyn alloc - establish both horizontal & vertical
C                     domain specifications in one module
C:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

      SUBROUTINE PING_AERO ( CPLUME, NPLUMTOT, NPACTIVE,
     &                       JDATE, JTIME, TSTEP )

      USE SUBST_MODULES       ! Stenex
      USE PING_GLOBDIM
      USE PLUME_PARM          ! Plume dimensioning/control parameters
      USE PLUME_STATE
      USE GRID_CONF           ! horizontal & vertical domain specifications
      USE CGRID_SPCS          ! CPLUME species number and offsets
      USE AERO_INFO_AE3       ! replaces aero include files

      IMPLICIT NONE
 
C *** includes:
 
!     INCLUDE SUBST_HGRD_ID   ! horizontal dimensioning parameters
!     INCLUDE SUBST_VGRD_ID   ! vertical dimensioning parameters
      INCLUDE SUBST_GC_SPC    ! gas chemistry species table
      INCLUDE SUBST_GC_EMIS   ! gas chem emis surrogate names and map
                              ! table
      INCLUDE SUBST_AE_SPC    ! aerosol species table
!     INCLUDE SUBST_AE_EMIS   ! aerosol emis surrogate names and map
                              ! table
      INCLUDE SUBST_NR_SPC    ! non-reactive species table
      INCLUDE SUBST_GC_G2AE   ! gas chem aerosol species and map table
      INCLUDE SUBST_NR_N2AE   ! non-react aerosol species and map table
      INCLUDE SUBST_RXCMMN    ! to get mech name
!     INCLUDE SUBST_CONST     ! constants
      INCLUDE SUBST_IOPARMS   ! I/O parameters definitions
      INCLUDE SUBST_IOFDESC   ! file header data structure
#include      SUBST_IODECL    # I/O definitions and declarations
      INCLUDE SUBST_FILES_ID  ! file name parameters
!     INCLUDE SUBST_BLKPRM    ! sets BLKSIZE AND MXBLKS
!     INCLUDE SUBST_COORD_ID  ! coord. and domain definitions 
                              ! (req IOPARMS)
      INCLUDE SUBST_PACTL_ID  ! process analysis

C *** arguments:

C *** CPLUME is conc field (including gas and aerosol variables)

      INTEGER :: NPACTIVE      ! total number of ACTIVE plume sections
      INTEGER :: NPLUMTOT

!     REAL         CGRID( NCOLS,NROWS,NLAYS,* )
!     REAL, POINTER :: CGRID( :,:,:,: )              !  concentrations
      REAL    ::   CPLUME( :,:,: )
      INTEGER ::     JDATE        ! Current model date , coded YYYYDDD
      INTEGER ::     JTIME        ! Current model time , coded HHMMSS
      INTEGER ::     TSTEP( 2 )   ! time step vector (HHMMSS)
                                  ! TSTEP(1) = local output step
                                  ! TSTEP(2) = sciproc sync. step (chem)

      REAL, PARAMETER :: CONMIN = 1.0E-30 ! concentration lower limit

      INTEGER, SAVE :: LOGDEV             ! unit number for the log file

C *** local variables:

      CHARACTER( 16 ), SAVE :: PNAME = 'PING_AERO_DRIVER'
      CHARACTER( 16 ) :: VNAME            ! variable name
      CHARACTER( 96 ) :: XMSG = ' '

      INTEGER   MDATE, MTIME, MSTEP  ! julian date, time and 
                                     ! timestep in sec
      INTEGER   C, R, L, V, N, I, J, K ! loop counters
      INTEGER   ZLL, ZUR             ! intermediate variables
      INTEGER   SPC                  ! species loop counter
      INTEGER   STRT, FINI           ! loop induction variables
      INTEGER   ALLOCSTAT            ! memory allocation status
      INTEGER   LAYER                ! model layer

C *** External Functions not previously declared in IODECL3.EXT:

      INTEGER, EXTERNAL :: SECSDIFF, SEC2TIME, TIME2SEC, INDEX1
      LOGICAL, EXTERNAL :: ENVYN     ! get environment variable as boolean

C *** Grid description

      REAL DX1                      ! Cell x-dimension
      REAL DX2                      ! Cell y-dimension

C *** Variable to set time step for writing visibility file

      INTEGER, SAVE :: WSTEP  = 0   ! local write counter
      LOGICAL, SAVE :: WRITETIME = .FALSE. ! local write flag

C *** meteorological variables

C *** Reciprocal (air density X Jacobian, where Jacobian = sq. root of the
C     determinant of the metric tensor) at midlayer -inverted after read
!     REAL PRES   ( NCOLS,NROWS,NLAYS )  ! Atmospheric pressure [ Pa ]
!     REAL TA     ( NCOLS,NROWS,NLAYS )  ! Air temperature [ K ] 
!     REAL DENS   ( NCOLS,NROWS,NLAYS )  ! Air density [ kg/m**-3 ]
!     REAL QV     ( NCOLS,NROWS,NLAYS )  ! Water vapor mixing ratio [ kg/kg ]
      REAL, ALLOCATABLE :: PRES( :,:,: )  ! Atmospheric pressure [ Pa ]
      REAL, ALLOCATABLE :: TA  ( :,:,: )  ! Air temperature [ K ] 
      REAL, ALLOCATABLE :: DENS( :,:,: )  ! Air density [ kg/m**-3 ]
      REAL, ALLOCATABLE :: QV  ( :,:,: )  ! Water vapor mixing ratio [ kg/kg ]

C *** variables computed and output but not carried in CPLUME

C *** visibility variables

!     INTEGER, PARAMETER :: N_AE_VIS_SPC = 4

C     visual range in deciview (Mie)
      INTEGER, PARAMETER :: IDCVW1 = 1

C     extinction [ 1/km ] (Mie)
      INTEGER, PARAMETER :: IBEXT1 = 2

C     visual range in deciview (Reconstructed)
      INTEGER, PARAMETER :: IDCVW2 = 3

C     extinction [ 1/km ] (Reconstructed)
      INTEGER, PARAMETER :: IBEXT2 = 4

!     REAL VIS_SPC( NPLUMTOT,NPILLARS,N_AE_VIS_SPC ) ! Visual range information

C *** aerosol distribution variables

      REAL DIAM_SPC( NPLUMTOT,NPILLARS,1, 23 ) 
                                ! aerosol size distribution variables

C *** grid variables

C *** information about blocks

C *** pointers to gas (vapor) phase species and production rates in CPLUME

      INTEGER, SAVE :: LSULF, LSULFP, LHNO3, LNH3,LN2O5
      INTEGER, SAVE :: LTOLAER, LXYLAER, LCSLAER
      INTEGER, SAVE :: LALKAER
      INTEGER, SAVE :: LOLIAER, LTERPAER, LTERP 

C *** meteorological information:

      REAL BLKPRS           ! Air pressure in [ Pa ]
      REAL BLKTA            ! Air temperature [ K ]
      REAL BLKDENS          ! Air density  [ kg m^-3 ]
      REAL BLKDENS1         ! Reciprocal of air density      
      REAL BLKQA            ! Water vapor mixing ratio
      REAL BLKESAT          ! Saturation water vapor pressure [Pa]
      REAL BLKEVAP          ! Ambient water vapor pressure [Pa]
      REAL BLKRH            ! Fractional relative humidity

C *** factors to set minimum value for number concentrations

      REAL( 8 ), SAVE :: NUMMIN_AT   ! Aitken mode
      REAL( 8 ), SAVE :: NUMMIN_AC   ! accumulation mode
      REAL( 8 ), SAVE :: NUMMIN_C    ! coarse mode
 
C *** factor to set minimum value for second moment

      REAL( 8 ), SAVE :: M2MIN_AT    ! Aitken  mode
      REAL( 8 ), SAVE :: M2MIN_AC    ! accumulation mode

C minimum aerosol sulfate concentration for acccumulation mode

      REAL, PARAMETER :: AEROCONCMIN_AC = 1.0E-6 ! 1 pg
                                     ! [ ug/m**3 ] ! changed 12/13/99 by FSB
c *** This value is smaller than any reported tropospheric concentrations.

C minimum aerosol sulfate concentration for the Aitken mode

      REAL, PARAMETER :: AEROCONCMIN_AT = 1.0E-6 * AEROCONCMIN_AC
      
C *** chemical production rates: [ ug / m**3 s ]

      REAL SO4RATE      ! sulfate gas-phase production rate 

C *** new information f or secondary organic aerosols
      
      INTEGER               VV ! loop index for vapors
      INTEGER               VVLOC !generic index
      INTEGER, PARAMETER :: NPSPCS = 6
      INTEGER, PARAMETER :: NCVAP = 10
      CHARACTER( 16 ), SAVE :: VAPNAMES ( NCVAP )  
      REAL VAPORS( NCVAP )  ! condensible secondary organic vapors 
      INTEGER, SAVE :: LOCVAP( NCVAP )
      REAL ORGPROD( NPSPCS )

c..The following paramters derived form annual emission inv estimates
c..They represent the fraction of lumped compunds that are SOA precursors
      REAL, PARAMETER :: SPALK = 0.57  ! Frac of SAPRC99 ALK5 producing SOA
      REAL, PARAMETER :: SPTOL = 0.93  ! Frac of SAPRC99 ARO1 producing SOA
      REAL, PARAMETER :: RDALK = 0.56  ! Frac of RADM2 HC8 producing SOA
      REAL, PARAMETER :: RDTOL = 0.94  ! Frac of RADM2 TOL producing SOA

C *** Current implementation

!     ORGPROD(1) -> "long" alkanes ( alk5 in saprc99)
!     ORGPROD(2) -> internal alkenes ( cyclohexene. ole2 in saprc99 )
!     ORGPROD(3) -> aromatics like xylene  (aro2 in saprc99)
!     ORGPROD(4) -> aromatics like cresol (cres in saprc99)
!     ORGPROD(5) -> aromatics like toluene (aro1 in saprc99)
!     ORGPROD(6) -> monoterpenes (trp1 in saprc99)
 
C *** atmospheric properties

      REAL XLM             ! atmospheric mean free path [ m ]
      REAL AMU             ! atmospheric dynamic viscosity [ kg/m s ]

C *** modal diameters [ m ]

      REAL DGATK           ! Aitken mode geometric mean diameter  [ m ]
      REAL DGACC           ! accumulation geometric mean diameter [ m ]
      REAL DGCOR           ! coarse mode geometric mean diameter  [ m ] 

C *** log of modal geometric standard deviation

      REAL XXLSGAT         ! Aitken mode
      REAL XXLSGAC         ! accumulation mode
      
C *** aerosol properties: 

C *** modal mass concentrations [ ug m**3 ]

      REAL PMASSAT         ! mass concentration in Aitken mode 
      REAL PMASSAC         ! mass concentration in accumulation mode
      REAL PMASSCO         ! mass concentration in coarse mode 

C *** average modal particle densities  [ kg/m**3 ]

      REAL PDENSAT         ! average particle density in Aitken mode 
      REAL PDENSAC         ! average particle density in 
                           ! accumulation mode 
      REAL PDENSCO         ! average particle density in coarse mode  

C *** mass fraction of each mode less than 2.5um aerodynamic diameter

      REAL PM25AT          ! fine fraction of Aitken mode
      REAL PM25AC          ! fine fraction of accumulation mode
      REAL PM25CO          ! fine fraction of coarse mode

C *** visual range information

      REAL BLKDCV1         ! block deciview (Mie)
      REAL BLKEXT1         ! block extinction [ km**-1 ] (Mie)

      REAL BLKDCV2         ! block deciview (Reconstructed)
      REAL BLKEXT2         ! block extinction [ km**-1 ] (Reconstructed)

C *** molecular weights

      REAL, SAVE :: MWSO4, MWNO3, MWNH4         ! Aerosol species
      REAL, SAVE :: MWH2SO4, MWHNO3, MWNH3      ! Gas (vapor) species
      REAL, SAVE :: MWTOL, MWXYL, MWCSL, MWTERP ! organic aerosol precursors
      REAL, SAVE :: MWN2O5                      ! N2O5

C *** conversion factors for unit conversions betwen ppm and ugm**-3

      REAL, SAVE :: TOLCONV, XYLCONV, CSLCONV, TERPCONV ! ppm -> ug m**-3  
      REAL, SAVE :: H2SO4CONV, HNO3CONV, NH3CONV        ! ppm -> ug m**-3
      REAL, SAVE :: N2O5CONV
      REAL, SAVE :: H2SO4CONV1, HNO3CONV1, NH3CONV1     ! ug m**-3 -> ppm
      REAL, SAVE :: N2O5CONV1
      
C FSB PM emissions now done in vertical diffusion

      INTEGER      GXOFF, GYOFF              ! global origin offset from file
C for INTERPX
      INTEGER, SAVE :: STRTCOLMC3, ENDCOLMC3, STRTROWMC3, ENDROWMC3

C *** other internal aerosol variables

      INTEGER IND                         ! index to be used with INDEX1

C *** synchronization time step [ s ]

      REAL DT

C *** variables to set up for "dry transport "

      REAL M3_WET, M3_DRY   ! third moment with and without water
      REAL M2_WET, M2_DRY   ! second moment with and without water
C flag to include water in the 3rd moment calculation
      LOGICAL, PARAMETER :: M3_WET_FLAG = .FALSE.

      REAL SUMLV, SUMT, SUMP, SUMQ, SUMD
                            
C FSB the following variables are defined and set in AERO_INFO_AE3
C      11/09/2001

!     REAL, PARAMETER :: TWO3 = 2.0 / 3.0          ! 2/3
!     REAL, PARAMETER :: F6DPI = 6.0 / PI          ! 6/PI
!     REAL, PARAMETER :: F6DPIM9 = 1.0E-9 * F6DPI  ! 1.0e-9 * 6/PI
!     REAL, PARAMETER :: RHOH2O = 1.0E+3     !  bulk density of aerosol water 
!     REAL, PARAMETER :: H2OFAC = F6DPIM9 / RHOH2O

C *** variables aerosol diagnostic file flag

      INTEGER      STATUS            ! ENV... status
      CHARACTER( 80 ) :: VARDESC     ! environment variable description

C *** environment variable for AERDIAG file

      CHARACTER( 16 ), SAVE :: PING_AERDIAG = 'PING_AERDIAG'

C *** flag for AERDIAG file [F], default

      LOGICAL, SAVE :: AERDIAG
      LOGICAL OK

C *** information for structure of CBLK  set in AEROSTUFF.EXT

C *** number of species (gas + aerosol) includes 2nd,3rd Moments & 4 gases

      INTEGER, PARAMETER :: NSPCSDA = N_AE_SPC + 13 ! N2O5 added - FSB

C *** main array of variables by species

      REAL CBLK( NSPCSDA )

C *** map of aerosol species

      INTEGER, SAVE :: N_AE_MAP
      INTEGER, SAVE :: CBLK_MAP( N_AE_SPCD ) = 0
 
      LOGICAL, SAVE :: FIRSTIME = .TRUE.

C *** ratio of molecular weights of water vapor to dry air = 0.622015

      REAL, PARAMETER :: EPSWATER = MWWAT / MWAIR

C *** mechanism name

      CHARACTER( 16 ), SAVE :: MECH

C *** Statement Function **************

      REAL ESATL ! arithmetic statement function for vapor pressure [Pa]
      REAL TT
C *** Coefficients for the equation, ESATL defining saturation vapor pressure
      REAL, PARAMETER :: AL = 610.94
      REAL, PARAMETER :: BL = 17.625
      REAL, PARAMETER :: CL = 243.04

C *** values of AL, BL, and CL are from:
C     Alduchov and Eskridge, "Improved Magnus Form Approximations of
C                            Saturation Vapor Pressure,"
C                            Jour. of Applied Meteorology, vol. 35,
C                            pp 601-609, April, 1996.         

      ESATL( TT ) = AL * EXP( BL * ( TT - 273.15 ) / ( TT - 273.15 + CL ) )

C *** End Statement Function  ********

C ------------------ begin body of AERO_DRIVER -------------------------

      IF ( FIRSTIME ) THEN
         FIRSTIME = .FALSE.
         LOGDEV = INIT3()

c..removed by jg to allow ae3 mechanism check below
!        IF ( N_AE_SPC .LE. 0 ) THEN
!           CALL M3MESG ( 'WARNING: Model not compiled for aerosols!' )
!           RETURN
!           END IF

C*** Make sure an ae3 version of the mechanism is being used
         IF ( INDEX ( MECHNAME, 'AE3' ) .LE. 0 ) THEN
            XMSG = 'PING AERO3 requires an AE3 version of chemical mechanism'
            CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
            END IF

C *** Set nucleation flag:
 
!        INUCL = 1  ! Flag for choice of nucleation Mechanism
!                   ! INUCL = 0, Kumala et al. Mechanism
!                   ! INUCL = 1, Youngblood and Kreidenweis mechanism

C*** Skip this as not having much validity for elevated plumes ...
C Try to open existing ping aero visibility file for update

!!       CALL SUBST_BARRIER

!        IF ( .NOT. OPEN3( CTM_PING_VIS_1, FSRDWR3, PNAME ) ) THEN
!           XMSG = 'Could not open ' // CTM_PING_VIS_1 // ' file for update - '
!    &         // 'try to open new'
!           CALL M3MESG( XMSG )

C Open the PDM files (just in case that they are not open yet), get the
C file description, and set the appropriate variables.
!
!           OK = OPEN3 ( PDM_PING_1, FSREAD3, PNAME )
!           IF ( .NOT. OK ) THEN
!              XMSG = 'Error opening '// PDM_PING_1
!              CALL M3ERR ( PNAME, JDATE, JTIME, XMSG, .TRUE.)
!              END IF

!           OK = DESC3 ( PDM_PING_1 )
!           IF ( .NOT. OK ) THEN
!              XMSG = 'Error getting header of '// PDM_PING_1
!              CALL M3ERR ( PNAME, JDATE, JTIME, XMSG, .TRUE.)
!              END IF

C Set output file characteristics based on COORD.EXT and open the dry dep file

!           FTYPE3D = GRDDED3
!           SDATE3D = JDATE
!           STIME3D = JTIME
!           TSTEP3D = PINGOUTSTEP
!!          CALL NEXTIME ( SDATE3D, STIME3D, TSTEP3D ) !  start the next hour

!           NVARS3D = N_AE_VIS_SPC
!           NCOLS3D = NCOLS3D*NROWS3D
!           NROWS3D = NPILLARS
!           NLAYS3D = 1
!           NTHIK3D = 1
!           GDTYP3D = GDTYP_GD
!           P_ALP3D = P_ALP_GD
!           P_BET3D = P_BET_GD 
!           P_GAM3D = P_GAM_GD
!           XORIG3D = XORIG_GD
!           YORIG3D = YORIG_GD
!           XCENT3D = XCENT_GD
!           YCENT3D = YCENT_GD
!           XCELL3D = XCELL_GD
!           YCELL3D = YCELL_GD
!           VGTYP3D = VGTYP_GD
!           VGTOP3D = VGTOP_GD
!!          VGTPUN3D = VGTPUN_GD   ! currently, not defined

!           DO L = 1, NLAYS3D + 1
!              VGLVS3D( L ) = VGLVS_GD( L )
!              END DO

!           GDNAM3D = GDNAME_GD

!           VTYPE3D( 1 ) = M3REAL
!           VNAME3D( 1 ) = 'DCV_Mie'
!           UNITS3D( 1 ) = 'deciview'
!           VDESC3D( 1 ) = 'visual range'

!           VTYPE3D( 2 ) = M3REAL
!           VNAME3D( 2 ) = 'EXT_Mie'
!           UNITS3D( 2 ) = '1/km'
!           VDESC3D( 2 ) = 'extinction coefficient'
!                 
!           VTYPE3D( 3 ) = M3REAL
!           VNAME3D( 3 ) = 'DCV_Recon'
!           UNITS3D( 3 ) = 'deciview'
!           VDESC3D( 3 ) = 'visual range'

!           VTYPE3D( 4 ) = M3REAL
!           VNAME3D( 4 ) = 'EXT_Recon'
!           UNITS3D( 4 ) = '1/km'
!           VDESC3D( 4 ) = 'extinction coefficient'

!           FDESC3D( 1 ) = '1-layer cross-point Visibility Information'
!           DO L = 2, MXDESC3
!              FDESC3D( L ) = ' '
!              END DO

!           UPNAM3D = 'FAKE_GRIDDED'    ! Mandatory!

C *** Set up file structure for visibility file. It has two variables,
C     visual range in deciview units (dimensionless) and extinction in
C     units of (1/km) and is for layer 1 only.

C Open visibility file new

!           IF ( MYPE .EQ. 0 ) THEN

!              IF ( .NOT. OPEN3( CTM_PING_VIS_1, FSNEW3, UPNAM3D ) ) THEN
!                 XMSG = 'Could not create '// CTM_PING_VIS_1 // ' file'
!                 CALL M3EXIT( PNAME, JDATE, JTIME, XMSG, XSTAT1 )
!                 END IF

!!             IF ( .NOT. CLOSE3( CTM_PING_VIS_1 ) ) THEN
!!                XMSG = 'ERROR closing after creating ' // CTM_PING_VIS_1
!!                CALL M3EXIT( PNAME, JDATE, JTIME, XMSG, XSTAT1 )
!!                END IF

!              END IF

!           END IF   ! open CTM_PING_VIS_1 read/write

!        CALL SUBST_BARRIER

!        OK = OPEN3( CTM_PING_VIS_1, FSRDWR3, 'FAKE_GRIDDED' )
!!       OK = OPEN3( CTM_PING_VIS_1, FSRDWR3, PNAME )
!        IF ( .NOT. OK ) THEN
!           XMSG = 'ERROR opening ' // CTM_PING_VIS_1
!           CALL M3ERR( PNAME, JDATE, JTIME, XMSG, .TRUE. )
!           END IF

C Write initial vis array of zeros to file

!        VIS_SPC = 0.0

!!       write( logdev,* ) 'vis_spc set to zero initially'       

!        IF ( .NOT. WRITE3( CTM_PING_VIS_1, ALLVAR3,
!    &                      JDATE, JTIME, VIS_SPC ) ) THEN
!           XMSG = 'Could not write ' // CTM_PING_VIS_1 // ' file'
!           CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT1 )
!           END IF

!        WRITE( LOGDEV, '( /5X, 3( A, :, 1X ), I8, ":", I6.6 )' )
!    &                  'Timestep written to', CTM_PING_VIS_1,
!    &                  'for date and time', JDATE, JTIME

C *** Get aerosol diagnostic file flag.

         AERDIAG = .FALSE.         ! default
         VARDESC = 'Flag for writing the aerosol diagnostic file'
         AERDIAG = ENVYN( PING_AERDIAG, VARDESC, AERDIAG, STATUS )
         IF ( STATUS .NE. 0 ) WRITE( LOGDEV, '(5X, A)' ) VARDESC
         IF ( STATUS .EQ. 1 ) THEN
            XMSG = 'Environment variable improperly formatted'
            CALL M3EXIT( PNAME, JDATE, JTIME, XMSG, XSTAT2 )
            ELSE IF ( STATUS .EQ. -1 ) THEN
            XMSG = 'Environment variable set, but empty ... Using default:'
            WRITE( LOGDEV, '(5X, A, I9)' ) XMSG, JTIME
            ELSE IF ( STATUS .EQ. -2 ) THEN
            XMSG = 'Environment variable not set ... Using default:'
            WRITE( LOGDEV, '(5X, A, I9)' ) XMSG, JTIME
            END IF

         IF ( AERDIAG ) THEN 

C Try to open existing ping aero diagnostic file for update

            IF ( .NOT. OPEN3( CTM_PING_DIAM_1, FSRDWR3, PNAME ) ) THEN
               XMSG = 'Could not open ' // CTM_PING_DIAM_1
     &              // ' file for update - try to open new'
               CALL M3MESG( XMSG )

!              CALL SUBST_BARRIER

C...Set output file characteristics based on COORD.EXT and open the
C...  aerosol diagnostic file

C Open the PDM files (just in case that they are not open yet), get the
C file description, and set the appropriate variables.
 
               OK = OPEN3 ( PDM_PING_1, FSREAD3, PNAME )
               IF ( .NOT. OK ) THEN
                  XMSG = 'Error opening '// PDM_PING_1
                  CALL M3ERR ( PNAME, JDATE, JTIME, XMSG, .TRUE.)
                  END IF

               OK = DESC3 ( PDM_PING_1 )
               IF ( .NOT. OK ) THEN
                  XMSG = 'Error getting header of '// PDM_PING_1
                  CALL M3ERR ( PNAME, JDATE, JTIME, XMSG, .TRUE.)
                  END IF

               FTYPE3D = GRDDED3
               SDATE3D = JDATE
               STIME3D = JTIME
               TSTEP3D = TSTEP( 1 )
!              TSTEP3D = PINGOUTSTEP
!              CALL NEXTIME ( SDATE3D, STIME3D, TSTEP3D ) !start the next time

               NVARS3D = 23 
               NCOLS3D = NCOLS3D*NROWS3D
               NROWS3D = NPILLARS
               NLAYS3D = 1
               NTHIK3D = 1
               GDTYP3D = GDTYP_GD
               P_ALP3D = P_ALP_GD
               P_BET3D = P_BET_GD 
               P_GAM3D = P_GAM_GD
               XORIG3D = XORIG_GD
               YORIG3D = YORIG_GD
               XCENT3D = XCENT_GD
               YCENT3D = YCENT_GD
               XCELL3D = XCELL_GD
               YCELL3D = YCELL_GD
               VGTYP3D = VGTYP_GD
               VGTOP3D = VGTOP_GD
!              VGTPUN3D = VGTPUN_GD ! currently, not defined

               DO L = 1, NLAYS3D + 1
                  VGLVS3D( L ) = VGLVS_GD( L )
                  END DO

               GDNAM3D = GDNAME_GD

               VTYPE3D( 1 ) = M3REAL
               VNAME3D( 1 ) = 'STDEVATKN'
               UNITS3D( 1 ) = ' '
               VDESC3D( 1 ) = 'Aitken mode standard deviation (dry and wet)'

               VTYPE3D( 2 ) = M3REAL
               VNAME3D( 2 ) = 'STDEVACC'
               UNITS3D( 2 ) = ' '
               VDESC3D( 2 ) = 'Accumulation mode standard deviation (dry and wet)'
                  
               VTYPE3D( 3 ) = M3REAL
               VNAME3D( 3 ) = 'DGATKN_DRY'
               UNITS3D( 3 ) = 'm'
               VDESC3D( 3 ) = 'Aitken mode mean diameter (dry)'

               VTYPE3D( 4 ) = M3REAL
               VNAME3D( 4 ) = 'DGACC_DRY'
               UNITS3D( 4 ) = 'm'
               VDESC3D( 4 ) = 'Accumulation mode mean diameter (dry)'
               
               VTYPE3D( 5 ) = M3REAL
               VNAME3D( 5 ) = 'DGATKN_WET'
               UNITS3D( 5 ) = 'm'
               VDESC3D( 5 ) = 'Aitken mode mean diameter (wet)'

               VTYPE3D( 6 ) = M3REAL
               VNAME3D( 6 ) = 'DGACC_WET'
               UNITS3D( 6 ) = 'm'
               VDESC3D( 6 ) = 'Accumulation mode mean diameter (wet)'

               VTYPE3D( 7 ) = M3REAL
               VNAME3D( 7 ) = 'DGCOR'
               UNITS3D( 7 ) = 'm'
               VDESC3D( 7 ) = 'Coarse mode mean diameter'

               VTYPE3D( 8 ) = M3REAL
               VNAME3D( 8 ) = 'M0ATKN'
               UNITS3D( 8 ) = 'number/m**3'
               VDESC3D( 8 ) = 'Aitken mode 0th moment'

               VTYPE3D( 9 ) = M3REAL
               VNAME3D( 9 ) = 'M0ACC'
               UNITS3D( 9 ) = 'number/m**3'
               VDESC3D( 9 ) = 'Accumulation mode 0th moment'

               VTYPE3D( 10 ) = M3REAL
               VNAME3D( 10 ) = 'M0COR'
               UNITS3D( 10 ) = 'number/m**3'
               VDESC3D( 10 ) = 'Coarse mode 0th moment'

               VTYPE3D( 11 ) = M3REAL
               VNAME3D( 11 ) = 'M2ATKN_DRY'
               UNITS3D( 11 ) = 'm**2/m**3'
               VDESC3D( 11 ) = 'Aitken mode 2nd moment (dry)'

               VTYPE3D( 12 ) = M3REAL
               VNAME3D( 12 ) = 'M2ACC_DRY'
               UNITS3D( 12 ) = 'm**2/m**3'
               VDESC3D( 12 ) = 'Accumulation mode 2nd moment (dry)'

               VTYPE3D( 13 ) = M3REAL
               VNAME3D( 13 ) = 'M2ATKN_WET'
               UNITS3D( 13 ) = 'm**2/m**3'
               VDESC3D( 13 ) = 'Aitken mode 2nd moment (wet)'

               VTYPE3D( 14 ) = M3REAL
               VNAME3D( 14 ) = 'M2ACC_WET'
               UNITS3D( 14 ) = 'm**2/m**3'
               VDESC3D( 14 ) = 'Accumulation mode 2nd moment (wet)'

               VTYPE3D( 15 ) = M3REAL
               VNAME3D( 15 ) = 'M3ATKN_DRY'
               UNITS3D( 15 ) = 'm**3/m**3'
               VDESC3D( 15 ) = 'Aitken mode 3rd moment (dry)'

               VTYPE3D( 16 ) = M3REAL
               VNAME3D( 16 ) = 'M3ACC_DRY'
               UNITS3D( 16 ) = 'm**3/m**3'
               VDESC3D( 16 ) = 'Accumulation mode 3rd moment (dry)'

               VTYPE3D( 17 ) = M3REAL
               VNAME3D( 17 ) = 'M3ATKN_WET'
               UNITS3D( 17 ) = 'm**3/m**3'
               VDESC3D( 17 ) = 'Aitken mode 3rd moment (wet)'

               VTYPE3D( 18 ) = M3REAL
               VNAME3D( 18 ) = 'M3ACC_WET'
               UNITS3D( 18 ) = 'm**3/m**3'
               VDESC3D( 18 ) = 'Accumulation mode 3rd moment (wet)'

               VTYPE3D( 19 ) = M3REAL
               VNAME3D( 19 ) = 'M3COR'
               UNITS3D( 19 ) = 'm**3/m**3'
               VDESC3D( 19 ) = 'Coarse mode 3rd moment'

         VTYPE3D( 20 ) = M3REAL
         VNAME3D( 20 ) = 'PM25AT'
         UNITS3D( 20 ) = ' '
         VDESC3D( 20 ) = 'Fine fraction of Aitken mode'

         VTYPE3D( 21 ) = M3REAL
         VNAME3D( 21 ) = 'PM25AC'
         UNITS3D( 21 ) = ' '
         VDESC3D( 21 ) = 'Fine fraction of accumulation mode'

         VTYPE3D( 22 ) = M3REAL
         VNAME3D( 22 ) = 'PM25CO'
         UNITS3D( 22 ) = ' '
         VDESC3D( 22 ) = 'Fine fraction of coarse mode'

         VTYPE3D( 23 ) = M3REAL
         VNAME3D( 23 ) = 'RH'
         UNITS3D( 23 ) = ' '
         VDESC3D( 23 ) = 'Relative humidity'


               FDESC3D( 1 ) = 'aerosol distribution parameters'
               DO L = 2, MXDESC3
                  FDESC3D( L ) = ' '
                  END DO

               UPNAM3D = 'FAKE_GRIDDED'    ! Mandatory!

C Open the aerosol diagnostic file new

               IF ( MYPE .EQ. 0 ) THEN

                  IF ( .NOT. OPEN3( CTM_PING_DIAM_1, FSNEW3, UPNAM3D ) ) THEN
                     XMSG = 'Could not create '// CTM_PING_DIAM_1 // ' file'
                     CALL M3EXIT( PNAME, JDATE, JTIME, XMSG, XSTAT1 )
                     END IF

                  END IF

               END IF   ! open CTM_PING_DIAM_1 read/write

               CALL SUBST_BARRIER

C Write initial aero_diag array of zeros to file

               DIAM_SPC = 0.0

               IF ( .NOT. WRITE3( CTM_PING_DIAM_1, ALLVAR3,
     &                            JDATE, JTIME, DIAM_SPC ) ) THEN
                  XMSG = 'Could not write ' // CTM_PING_DIAM_1 // ' file'
                  CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT1 )
                  END IF

               WRITE( LOGDEV, '( /5X, 3( A, :, 1X ), I8, ":", I6.6 )' )
     &                        'Timestep written to', CTM_PING_DIAM_1,
     &                        'for date and time', JDATE, JTIME

            END IF   ! AERDIAG

C *** Set up names and indices.

C *** Initialize species indices for CBLK.

C *** Get SPECIES offsets.

         CALL CGRID_MAP ( NSPCSD, GC_STRT, AE_STRT, NR_STRT, TR_STRT )

C *** Determine CPLUME species map from AE_SPC.EXT.

         V = 0
         VNAME = 'ASO4J'
         N = INDEX1( VNAME, N_AE_SPC, AE_SPC )
         IF ( N .NE. 0 ) THEN
            V = V + 1
            VSO4AJ = V
            CBLK_MAP( V ) = AE_STRT - 1 + N
         ELSE
            XMSG = 'Could not find ' // VNAME // 'in aerosol table'
            CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
         END IF

         VNAME = 'ASO4I'
         N = INDEX1( VNAME, N_AE_SPC, AE_SPC )
         IF ( N .NE. 0 ) THEN
            V = V + 1
            VSO4AI = V
            CBLK_MAP( V ) = AE_STRT - 1 + N
         ELSE
            XMSG = 'Could not find ' // VNAME // 'in aerosol table'
            CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
         END IF

         VNAME = 'ANH4J'
         N = INDEX1( VNAME, N_AE_SPC, AE_SPC )
         IF ( N .NE. 0 ) THEN
            V = V + 1
            VNH4AJ = V
            CBLK_MAP( V ) = AE_STRT - 1 + N
         ELSE
            XMSG = 'Could not find ' // VNAME // 'in aerosol table'
            CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
         END IF

         VNAME = 'ANH4I'
         N = INDEX1( VNAME, N_AE_SPC, AE_SPC )
         IF ( N .NE. 0 ) THEN
            V = V + 1
            VNH4AI = V
            CBLK_MAP( V ) = AE_STRT - 1 + N
         ELSE
            XMSG = 'Could not find ' // VNAME // 'in aerosol table'
            CALL M3EXIT( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
         END IF

         VNAME = 'ANO3J'
         N = INDEX1( VNAME, N_AE_SPC, AE_SPC )
         IF ( N .NE. 0 ) THEN
            V = V + 1
            VNO3AJ = V
            CBLK_MAP( V ) = AE_STRT - 1 + N
         ELSE
            XMSG = 'Could not find ' // VNAME // 'in aerosol table'
            CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
         END IF

         VNAME = 'ANO3I'
         N = INDEX1( VNAME, N_AE_SPC, AE_SPC )
         IF ( N .NE. 0 ) THEN
            V = V + 1
            VNO3AI = V
            CBLK_MAP( V ) = AE_STRT - 1 + N
         ELSE
            XMSG = 'Could not find ' // VNAME // 'in aerosol table'
            CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
         END IF

         VNAME = 'AORGAJ'
         N = INDEX1( VNAME, N_AE_SPC, AE_SPC )
         IF ( N .NE. 0 ) THEN
            V = V + 1
            VORGAJ = V
            CBLK_MAP( V ) = AE_STRT - 1 + N
         ELSE
            XMSG = 'Could not find ' // VNAME // 'in aerosol table'
            CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
         END IF

         VNAME = 'AORGAI'
         N = INDEX1( VNAME, N_AE_SPC, AE_SPC )
         IF ( N .NE. 0 ) THEN
            V = V + 1
            VORGAI = V
            CBLK_MAP( V ) = AE_STRT - 1 + N
         ELSE
            XMSG = 'Could not find ' // VNAME // 'in aerosol table'
            CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
         END IF

         VNAME = 'AORGPAJ'
         N = INDEX1( VNAME, N_AE_SPC, AE_SPC )
         IF ( N .NE. 0 ) THEN
            V = V + 1
            VORGPAJ = V
            CBLK_MAP( V ) = AE_STRT - 1 + N
         ELSE
            XMSG = 'Could not find ' // VNAME // 'in aerosol table'
            CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
         END IF

         VNAME = 'AORGPAI'
         N = INDEX1( VNAME, N_AE_SPC, AE_SPC )
         IF ( N .NE. 0 ) THEN
            V = V + 1
            VORGPAI = V
            CBLK_MAP( V ) = AE_STRT - 1 + N
         ELSE
            XMSG = 'Could not find ' // VNAME // 'in aerosol table'
            CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
         END IF            

         VNAME = 'AORGBJ'
         N = INDEX1( VNAME, N_AE_SPC, AE_SPC )
         IF ( N .NE. 0 ) THEN
            V = V + 1
            VORGBAJ = V
            CBLK_MAP( V ) = AE_STRT - 1 + N
         ELSE
            XMSG = 'Could not find ' // VNAME // 'in aerosol table'
            CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
         END IF

         VNAME = 'AORGBI'
         N = INDEX1( VNAME, N_AE_SPC, AE_SPC )
         IF ( N .NE. 0 ) THEN
            V = V + 1
            VORGBAI = V
            CBLK_MAP( V ) = AE_STRT - 1 + N
         ELSE
            XMSG = 'Could not find ' // VNAME // 'in aerosol table'
            CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
         END IF

         VNAME = 'AECJ'
         N = INDEX1( VNAME, N_AE_SPC, AE_SPC )
         IF ( N .NE. 0 ) THEN
            V = V + 1
            VECJ = V
            CBLK_MAP( V ) = AE_STRT - 1 + N
         ELSE
            XMSG = 'Could not find ' // VNAME // 'in aerosol table'
            CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
         END IF

         VNAME = 'AECI'
         N = INDEX1( VNAME, N_AE_SPC, AE_SPC )
         IF ( N .NE. 0 ) THEN
            V = V + 1
            VECI = V
            CBLK_MAP( V ) = AE_STRT - 1 + N
         ELSE
            XMSG = 'Could not find ' // VNAME // 'in aerosol table'
            CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
         END IF

         VNAME = 'A25J'
         N = INDEX1( VNAME, N_AE_SPC, AE_SPC )
         IF ( N .NE. 0 ) THEN
            V = V + 1
            VP25AJ = V
            CBLK_MAP( V ) = AE_STRT - 1 + N
         ELSE
            XMSG = 'Could not find ' // VNAME // 'in aerosol table'
            CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
         END IF

         VNAME = 'A25I'
         N = INDEX1( VNAME, N_AE_SPC, AE_SPC )
         IF ( N .NE. 0 ) THEN
            V = V + 1
            VP25AI = V
            CBLK_MAP( V ) = AE_STRT - 1 + N
         ELSE
            XMSG = 'Could not find ' // VNAME // 'in aerosol table'
            CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
         END IF

         VNAME = 'ACORS'
         N = INDEX1( VNAME, N_AE_SPC, AE_SPC )
         IF ( N .NE. 0 ) THEN
            V = V + 1
            VANTHA = V
            CBLK_MAP( V ) = AE_STRT - 1 + N
         ELSE
            XMSG = 'Could not find ' // VNAME // 'in aerosol table'
            CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
         END IF

         VNAME = 'ASEAS'
         N = INDEX1( VNAME, N_AE_SPC, AE_SPC )
         IF ( N .NE. 0 ) THEN
            V = V + 1
            VSEAS = V
            CBLK_MAP( V ) = AE_STRT - 1 + N
         ELSE
            XMSG = 'Could not find ' // VNAME // 'in aerosol table'
            CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
         END IF

         VNAME = 'ASOIL'
         N = INDEX1( VNAME, N_AE_SPC, AE_SPC )
         IF ( N .NE. 0 ) THEN
            V = V + 1
            VSOILA = V
            CBLK_MAP( V ) = AE_STRT - 1 + N
         ELSE
            XMSG = 'Could not find ' // VNAME // 'in aerosol table'
            CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
         END IF

         VNAME = 'NUMATKN'
         N = INDEX1( VNAME, N_AE_SPC, AE_SPC )
         IF ( N .NE. 0 ) THEN
            V = V + 1
            VAT0 = V
            CBLK_MAP( V ) = AE_STRT - 1 + N
         ELSE
            XMSG = 'Could not find ' // VNAME // 'in aerosol table'
            CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
         END IF

         VNAME = 'NUMACC'
         N = INDEX1( VNAME, N_AE_SPC, AE_SPC )
         IF ( N .NE. 0 ) THEN
            V = V + 1
            VAC0 = V
            CBLK_MAP( V ) = AE_STRT - 1 + N
         ELSE
            XMSG = 'Could not find ' // VNAME // 'in aerosol table'
            CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
         END IF

         VNAME = 'NUMCOR'
         N = INDEX1( VNAME, N_AE_SPC, AE_SPC )
         IF ( N .NE. 0 ) THEN
            V = V + 1
            VCOR0 = V
            CBLK_MAP( V ) = AE_STRT - 1 + N
         ELSE
            XMSG = 'Could not find ' // VNAME // 'in aerosol table'
            CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
         END IF
               
         VNAME = 'SRFATKN'
         N = INDEX1( VNAME, N_AE_SPC, AE_SPC )
         IF ( N .NE. 0 ) THEN
            V = V + 1
            VSURFAT = V
            CBLK_MAP( V ) = AE_STRT - 1 + N
         ELSE
            XMSG = 'Could not find ' // VNAME // 'in aerosol table'
            CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
         END IF

         VNAME = 'SRFACC'
         N = INDEX1( VNAME, N_AE_SPC, AE_SPC )
         IF ( N .NE. 0 ) THEN
            V = V + 1
            VSURFAC = V
            CBLK_MAP( V ) = AE_STRT - 1 + N
         ELSE
            XMSG = 'Could not find ' // VNAME // 'in aerosol table'
            CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
         END IF                       

         VNAME = 'AH2OJ'
         N = INDEX1( VNAME, N_AE_SPC, AE_SPC )
         IF ( N .NE. 0 ) THEN
            V = V + 1
            VH2OAJ = V
            CBLK_MAP( V ) = AE_STRT - 1 + N
         ELSE
            XMSG = 'Could not find ' // VNAME // 'in aerosol table'
            CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
         END IF

         VNAME = 'AH2OI'
         N = INDEX1( VNAME, N_AE_SPC, AE_SPC )
         IF ( N .NE. 0 ) THEN
            V = V + 1
            VH2OAI = V
            CBLK_MAP( V ) = AE_STRT - 1 + N
         ELSE
            XMSG = 'Could not find ' // VNAME // 'in aerosol table'
            CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
         END IF

C define additional AE species for Concentration of HPLUS in Aitken and
C Accumulation modes

         VNAME = 'HPLUSJ'
         N =  INDEX1( VNAME, N_AE_SPC, AE_SPC )
         IF ( N .NE. 0 ) THEN
            V = V + 1
            VHPLUSJ = V
            CBLK_MAP( V ) = AE_STRT - 1 + N
            ELSE
            XMSG = 'Could not find ' // VNAME // 'in aerosol table'
!           CALL M3EXIT( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
            CALL M3WARN( PNAME, JDATE, JTIME, XMSG )
            VHPLUSJ = 0
            END IF

         VNAME = 'HPLUSI'
         N =  INDEX1( VNAME, N_AE_SPC, AE_SPC )
         IF ( N .NE. 0 ) THEN
            V = V + 1
            VHPLUSI = V
            CBLK_MAP( V ) = AE_STRT - 1 + N
            ELSE
            XMSG = 'Could not find ' // VNAME // 'in aerosol table'
!           CALL M3EXIT( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
            CALL M3WARN( PNAME, JDATE, JTIME, XMSG )
            VHPLUSI = 0
            END IF

         N_AE_MAP = V

C *** Set additional species contained only in CBLK not needed in CBLK_MAP.

         V = N_AE_SPC + 1
         VSGAT = V

         V = V + 1
         VSGAC = V

         V = V + 1
         VDGAT = V

         V = V + 1
         VDGAC = V

         V = V + 1
         VAT2 = V

         V = V + 1
         VAC2 = V

         V = V + 1
         VAT3 = V

         V = V + 1
         VAC3 = V
            
         V = V + 1
         VCOR3 = V
            
         V = V + 1
         VSULF = V
          
         V = V + 1
         VHNO3 = V

         V = V + 1
         VNH3 = V
         
         V = V + 1
         VN2O5 = V
         
C *** Get generic mechanism name

         IF ( INDEX ( MECHNAME, 'CB4' ) .GT. 0 ) THEN
             MECH = 'CB4'
         ELSE IF ( INDEX ( MECHNAME, 'RADM2' )  .GT. 0 ) THEN
             MECH = 'RADM2'
         ELSE IF ( INDEX ( MECHNAME, 'SAPRC99' ) .GT. 0 ) THEN
             MECH = 'SAPRC99'
         ELSE
            XMSG = 'Base chemical mechanism must CB4, RADM2, or SAPRC99'
            CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
         END IF

C *** Set pointers for gas (vapor) phase species and production rates in CPLUME.

         VNAME = 'SULF'
         N = INDEX1( VNAME, N_GC_G2AE, GC_G2AE )
         IF ( N .NE. 0 ) THEN
            LSULF     = GC_STRT - 1 + GC_G2AE_MAP( N )
            MWH2SO4   = GC_MOLWT( GC_G2AE_MAP( N ) )
         ELSE
            XMSG = 'Could not find ' // VNAME // 'in gas chem aerosol table'
            CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
         END IF
               
         VNAME = 'HNO3'
         N = INDEX1( VNAME, N_GC_G2AE, GC_G2AE )
         IF ( N .NE. 0 ) THEN
            LHNO3  = GC_STRT - 1 + GC_G2AE_MAP( N )
            MWHNO3 = GC_MOLWT( GC_G2AE_MAP( N ) )           
         ELSE
            XMSG = 'Could not find ' // VNAME // 'in gas chem aerosol table'
            CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
         END IF

         VNAME = 'N2O5'
         N = INDEX1( VNAME, N_GC_G2AE, GC_G2AE )
         IF ( N .NE. 0 ) THEN
            LN2O5  = GC_STRT - 1 + GC_G2AE_MAP( N )
            MWN2O5 = GC_MOLWT( GC_G2AE_MAP( N ) )           
         ELSE
            XMSG = 'Could not find ' // VNAME // 'in gas chem aerosol table'
            CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
         END IF

         IF ( MECH .EQ. 'RADM2' .OR. MECH .EQ. 'CB4' ) THEN
            VNAME = 'TERPSP'
            N = INDEX1( VNAME, N_GC_G2AE, GC_G2AE )
            IF ( N .NE. 0 ) THEN
               LTERP = GC_STRT - 1 + GC_G2AE_MAP( N )
            ELSE
               LTERP = 0
               XMSG = 'Could not find ' // VNAME // 'in gas chem aerosol table'
               CALL M3MESG ( XMSG )
               CALL M3MESG ( 'Terpene species not modeled' )
            END IF
         END IF

         VNAME = 'ALKRXN'
         N = INDEX1( VNAME, N_GC_G2AE, GC_G2AE )
         IF ( N .NE. 0 ) THEN
            LALKAER = GC_STRT - 1 + GC_G2AE_MAP( N )
         ELSE
            XMSG = 'Could not find ' // VNAME // 'in gas chem aerosol table'
            CALL M3MESG ( XMSG )
            CALL M3MESG ( 'No production of organic aerosols from alkanes' )
            LALKAER = 0
         END IF

         VNAME = 'OLIRXN'
         N = INDEX1( VNAME, N_GC_G2AE, GC_G2AE )
         IF ( N .NE. 0 ) THEN
            LOLIAER = GC_STRT - 1 + GC_G2AE_MAP( N )
         ELSE
            XMSG = 'Could not find ' // VNAME // 'in gas Chem aerosol table'
            CALL M3MESG ( XMSG )
            CALL M3MESG ( 'No production of organic aerosols from olefins' )
            LOLIAER = 0
         END IF

         VNAME = 'TOLRXN'
         N = INDEX1( VNAME, N_GC_G2AE, GC_G2AE )
         IF ( N .NE. 0 ) THEN
            LTOLAER = GC_STRT - 1 + GC_G2AE_MAP( N )
            MWTOL   = GC_MOLWT( GC_G2AE_MAP( N ) )
         ELSE
            XMSG = 'Could not find ' // VNAME // 'in gas chem aerosol table'
            CALL M3MESG ( XMSG )
            CALL M3MESG ( 'No production of organic aerosols from toluene' )
            LTOLAER = 0
         END IF

         VNAME = 'XYLRXN'
         N = INDEX1( VNAME, N_GC_G2AE, GC_G2AE )
         IF ( N .NE. 0 ) THEN
            LXYLAER = GC_STRT - 1 + GC_G2AE_MAP( N )
            MWXYL   = GC_MOLWT( GC_G2AE_MAP( N ) )
         ELSE
            XMSG = 'Could not find ' // VNAME // 'in gas chem aerosol table'
            CALL M3MESG ( XMSG )
            CALL M3MESG ( 'No production of organic aerosols from xylene' )
            LXYLAER = 0
         END IF
               
         VNAME = 'CSLRXN'
         N = INDEX1( VNAME, N_GC_G2AE, GC_G2AE )
         IF ( N .NE. 0 ) THEN
            LCSLAER = GC_STRT - 1 + GC_G2AE_MAP( N )
            MWCSL   = GC_MOLWT( GC_G2AE_MAP( N ) )
         ELSE
            XMSG = 'Could not find ' // VNAME // 'in gas chem aerosol table'
            CALL M3MESG ( XMSG )
            CALL M3MESG ( 'No production of organic aerosols from cresol' )
            LCSLAER = 0
         END IF
               
         VNAME = 'TERPRXN'
         N = INDEX1( VNAME, N_GC_G2AE, GC_G2AE )
         IF ( N .NE. 0 ) THEN
            LTERPAER = GC_STRT - 1 + GC_G2AE_MAP( N )
            MWTERP   = GC_MOLWT( GC_G2AE_MAP( N ) )
         ELSE
            XMSG = 'Could not find ' // VNAME // 'in gas chem aerosol table'
            CALL M3MESG ( XMSG )
            CALL M3MESG ( 'No production of organic aerosols from terpenes' )
            LTERPAER = 0
         END IF
               
         VNAME = 'SULPRD'
         N = INDEX1( VNAME, N_GC_G2AE, GC_G2AE )
         IF ( N .NE. 0 ) THEN
            LSULFP = GC_STRT - 1 + GC_G2AE_MAP( N )
         ELSE
            XMSG = 'Could not find ' // VNAME // 'in gas chem aerosol table'
            CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
         END IF

         VNAME = 'NH3'

C *** Look in gas-phase species first.

         N = INDEX1( VNAME, N_GC_G2AE, GC_G2AE )

         IF ( N .NE. 0 ) THEN
            LNH3  = GC_STRT - 1 + GC_G2AE_MAP( N ) 
            MWNH3 = GC_MOLWT( GC_G2AE_MAP( N ) )                        

         ELSE

C *** Then try non-reactives.

            N = INDEX1( VNAME, N_NR_N2AE, NR_N2AE )
            IF ( N .NE. 0 ) THEN
               LNH3  = NR_STRT - 1 + NR_N2AE_MAP( N )  
               MWNH3 = NR_MOLWT( NR_N2AE_MAP( N ) )

C *** If NH3 not present, quit with error message.

            ELSE
               XMSG = 'Could not find ' // VNAME // 
     &                'in gas chem aerosol or non-reactives table'
               CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 ) 
            END IF

         END IF

C *** Set VAPNAMES values

         VAPNAMES(  1 ) = 'SGTOT_ALK'         
         VAPNAMES(  2 ) = 'SGTOT_OLI_1'       
         VAPNAMES(  3 ) = 'SGTOT_OLI_2'       
         VAPNAMES(  4 ) = 'SGTOT_XYL_1'       
         VAPNAMES(  5 ) = 'SGTOT_XYL_2'       
         VAPNAMES(  6 ) = 'SGTOT_CSL'         
         VAPNAMES(  7 ) = 'SGTOT_TOL_1'       
         VAPNAMES(  8 ) = 'SGTOT_TOL_2'       
         VAPNAMES(  9 ) = 'SGTOT_TRP_1'       
         VAPNAMES( 10 ) = 'SGTOT_TRP_2'       

C *** Fetch the indices for organic vapors from the non-reactive table
            
         DO VV = 1, NCVAP
            VNAME = VAPNAMES( VV )
            N = INDEX1( VNAME, N_NR_N2AE, NR_N2AE )
            IF ( N .NE. 0 ) THEN
               LOCVAP( VV )  = NR_STRT - 1 + NR_N2AE_MAP( N )  
            ELSE
               XMSG = 'Could not find ' // VNAME // 'in non-reactives table'
               CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 ) 
            END IF
         END DO 

C *** Fetch molecular weights.

         MWSO4 = AE_MOLWT( VSO4AJ )
         MWNO3 = AE_MOLWT( VNO3AJ )
         MWNH4 = AE_MOLWT( VNH4AJ )

C *** In the following conversion factors, the 1.0e3 factor
C     is to convert density from kg m**-3 to g m**-3.
        
C *** factors for converting from ppm to ug m-**3
         
         H2SO4CONV = 1.0E3 * MWH2SO4 / MWAIR
         HNO3CONV  = 1.0E3 * MWHNO3  / MWAIR
         NH3CONV   = 1.0E3 * MWNH3   / MWAIR
         N2O5CONV  = 1.0E3 * MWN2O5  / MWAIR

C..no longer used
!        TOLCONV   = 1.0E3 * MWTOL  / MWAIR
!        XYLCONV   = 1.0E3 * MWXYL  / MWAIR
!        CSLCONV   = 1.0E3 * MWCSL  / MWAIR
!        TERPCONV  = 1.0E3 * MWTERP / MWAIR
    
C *** reciprocals for converting from ug m**-3 to ppm
         
         H2SO4CONV1 = 1.0 / H2SO4CONV
         HNO3CONV1  = 1.0 / HNO3CONV
         NH3CONV1   = 1.0 / NH3CONV
         N2O5CONV1  = 1.0 / N2O5CONV

C *** Open the met files.

         IF ( .NOT. OPEN3( MET_CRO_3D, FSREAD3, PNAME ) ) THEN
            XMSG = 'Could not open  MET_CRO_3D  file '
            CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT1 )
            END IF

         IF ( .NOT. OPEN3( MET_CRO_2D, FSREAD3, PNAME ) ) THEN
            XMSG = 'Could not open  MET_CRO_2D file '
            CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT1 )
            END IF

C *** Set up file structure for visibility file. It has two variables,
C     visual range in deciview units (dimensionless) and extinction in
C     units of (1/km) and is for layer 1 only.

!09/03   IF ( MYPE .EQ. 0 ) CALL OPVIS ( JDATE, JTIME, TSTEP( 1 ) )

C *** Open the aerosol parameters file (diameters and standard deviations).

!09/03   IF ( AERDIAG .AND.
!09/03     &        MYPE .EQ. 0 ) CALL OPDIAM ( JDATE, JTIME, TSTEP( 1 ) )

C Get domain decomp info from the MET_CRO_3D file

         CALL SUBHFILE ( MET_CRO_3D, GXOFF, GYOFF,
     &                   STRTCOLMC3, ENDCOLMC3, STRTROWMC3, ENDROWMC3 )

C *** calculate minimum values for number and 2nd moment.

         XXLSGAT = LOG( SGINIAT )
         XXLSGAC = LOG( SGINIAC )
         XXLSGCO = LOG( SGINICO )
         ESC36 = EXP( 4.5 * XXLSGCO * XXLSGCO )

         NUMMIN_AT = SO4FAC * AEROCONCMIN_AT
     &             / ( DGINIAT ** 3 * EXP( 4.5 * XXLSGAT * XXLSGAT ) )

         NUMMIN_AC = SO4FAC * AEROCONCMIN_AC
     &             / ( DGINIAC ** 3 * EXP( 4.5 * XXLSGAC * XXLSGAC ) )

         M2MIN_AT = NUMMIN_AT * DGINIAT ** 2
     &            * EXP( 2.0 * XXLSGAT * XXLSGAT )

         M2MIN_AC = NUMMIN_AC * DGINIAC ** 2
     &            * EXP( 2.0 * XXLSGAC * XXLSGAC )

         NUMMIN_C = ANTHFAC * CONMIN / ( DGINICO ** 3 * ESC36 )

!        write( logdev,* ) 'nummins: ', NUMMIN_AT, NUMMIN_AC, NUMMIN_C 

         END IF    ! FIRSTIME

C --------------------- Begin Interpolation ----------------------------

      MDATE  = JDATE
      MTIME  = JTIME
      MSTEP = TIME2SEC( TSTEP( 2 ) )
      CALL NEXTIME ( MDATE, MTIME, SEC2TIME( MSTEP / 2 ) )

      WSTEP = WSTEP + TIME2SEC( TSTEP( 2 ) )
      IF ( WSTEP .GE. TIME2SEC( TSTEP( 1 ) ) ) WRITETIME = .TRUE.

!     write( logdev,* ) 'In ping_aero at:', jdate, jtime, tstep( 2 )

C *** Set floating point synchronization time step:

      DT = FLOAT( MSTEP ) ! set time step in seconds

C *** begin interpolation of meteorological variables

C *** layered variables PRES, TA, QV, DENS:

C *** air density X square root of the determinant of the metric tensor
C     at midlayer 

C *** pressure (Pa)

      ALLOCATE ( PRES( MY_NCOLS,MY_NROWS,NLAYS ), STAT = ALLOCSTAT )
      IF ( ALLOCSTAT .NE. 0 ) THEN
         XMSG = 'Failure allocating DENS'
         CALL M3ERR( PNAME, JDATE, JTIME, XMSG, .TRUE. )
         END IF

      VNAME = 'PRES'
!     IF ( .NOT. INTERP3( MET_CRO_3D, VNAME, PNAME,
!    &                    MDATE, MTIME, NCOLS*NROWS*NLAYS,
!    &                    PRES ) ) THEN
      IF ( .NOT. INTERPX( MET_CRO_3D, VNAME, PNAME,
     &                    STRTCOLMC3,ENDCOLMC3, STRTROWMC3,ENDROWMC3, 1,NLAYS,
     &                    MDATE, MTIME, PRES ) ) THEN
        XMSG = 'Could not interpolate PRES from ' // MET_CRO_3D
        CALL M3EXIT ( PNAME, MDATE, MTIME, XMSG, XSTAT1 )
      END IF

C *** temperature (K)

      ALLOCATE ( TA( MY_NCOLS,MY_NROWS,NLAYS ), STAT = ALLOCSTAT )
      IF ( ALLOCSTAT .NE. 0 ) THEN
         XMSG = 'Failure allocating DENS'
         CALL M3ERR( PNAME, JDATE, JTIME, XMSG, .TRUE. )
         END IF

      VNAME = 'TA'
!     IF ( .NOT. INTERP3( MET_CRO_3D, VNAME, PNAME,
!    &                    MDATE, MTIME, NCOLS* NROWS*NLAYS,
!    &                    TA ) ) THEN
      IF ( .NOT. INTERPX( MET_CRO_3D, VNAME, PNAME,
     &                    STRTCOLMC3,ENDCOLMC3, STRTROWMC3,ENDROWMC3, 1,NLAYS,
     &                    MDATE, MTIME, TA ) ) THEN
        XMSG = 'Could not interpolate '// VNAME // ' from MET_CRO_3D '
        CALL M3EXIT ( PNAME, MDATE, MTIME, XMSG, XSTAT1 )
      END IF

C *** specific humidity (g H2O / g air)

      ALLOCATE ( QV( MY_NCOLS,MY_NROWS,NLAYS ), STAT = ALLOCSTAT )
      IF ( ALLOCSTAT .NE. 0 ) THEN
         XMSG = 'Failure allocating DENS'
         CALL M3ERR( PNAME, JDATE, JTIME, XMSG, .TRUE. )
         END IF

      VNAME = 'QV'
!     IF ( .NOT. INTERP3( MET_CRO_3D, VNAME, PNAME,
!    &                    MDATE, MTIME, NCOLS*NROWS*NLAYS,
!    &                    QV ) ) THEN
      IF ( .NOT. INTERPX( MET_CRO_3D, VNAME, PNAME,
     &                    STRTCOLMC3,ENDCOLMC3, STRTROWMC3,ENDROWMC3, 1,NLAYS,
     &                    MDATE, MTIME, QV ) ) THEN
        XMSG = 'Could not interpolate specific humidity from MET_CRO_3D'
        CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT1 )
      END IF 

C *** air density (kg/m3)

      ALLOCATE ( DENS( MY_NCOLS,MY_NROWS,NLAYS ), STAT = ALLOCSTAT )
      IF ( ALLOCSTAT .NE. 0 ) THEN
         XMSG = 'Failure allocating DENS'
         CALL M3ERR( PNAME, JDATE, JTIME, XMSG, .TRUE. )
         END IF

      VNAME = 'DENS'
!     IF ( .NOT. INTERP3( MET_CRO_3D, VNAME, PNAME,
!    &                    MDATE, MTIME, NCOLS*NROWS*NLAYS,
!    &                    DENS ) ) THEN
      IF ( .NOT. INTERPX( MET_CRO_3D, VNAME, PNAME,
     &                    STRTCOLMC3,ENDCOLMC3, STRTROWMC3,ENDROWMC3, 1,NLAYS,
     &                    MDATE, MTIME, DENS ) ) THEN
        XMSG = 'Could not interpolate '// VNAME // ' from MET_CRO_3D '
        CALL M3EXIT ( PNAME, MDATE, MTIME, XMSG, XSTAT1 )
      END IF

C *** end interpolation of meteorological variables 

C *** Begin loops over grid cells.

C *** initialize CBLK and VIS_SPC

      CBLK = 0.0
!     VIS_SPC = 0.0

!     DO L = 1, NLAYS
!     DO R = 1, MY_NROWS
!     DO C = 1, MY_NCOLS
      DO L = 1, NPACTIVE

         I = PLUMEPTR( L )

         C = MY_IXC( I ); R = MY_IYC( I )
         ZLL = MY_IZLL( I ); ZUR = MY_IZUR( I )

C *** Fetch the grid cell physical data.
C *** Determine the PLUME SECTION  physical data.
              
         SUMLV = FLOAT( ZUR - ZLL + 1 )
         SUMT = 0.0
         SUMP = 0.0
         SUMQ = 0.0
         SUMD = 0.0

         DO K = ZLL, ZUR
            SUMT = SUMT + TA  ( C,R,K )
            SUMP = SUMP + PRES( C,R,K ) ! Note pascals
            SUMQ = SUMQ + QV  ( C,R,K )
            SUMD = SUMD + DENS( C,R,K )
            END DO
!        write( logdev,* ) 'after sum loop'

!        LAYER = L
         LAYER = ( ZLL + ZUR ) / 2
!        write( logdev,* ) 'layer, sumlv: ', layer, sumlv
         BLKTA    = SUMT / SUMLV
         BLKPRS   = SUMP / SUMLV   ! Note pascals
         BLKQA    = SUMQ / SUMLV
         BLKDENS  = SUMD / SUMLV
         BLKDENS1 = 1.0 / BLKDENS 
         BLKESAT  = ESATL( BLKTA ) 
         BLKEVAP  = BLKPRS * BLKQA / ( EPSWATER  + BLKQA )
         BLKRH    = MIN( 0.99, BLKEVAP / BLKESAT )
              
C *** Put the grid cell concentrations in CBLK (limit to identified species)
!        write( logdev,* ) 'before loading CBLK array'
!        write( logdev,* ) 'CPLUME(48,1,1): ', cplume(48,1,1) 

         DO J = 1, NPILLARS
            DO SPC = 1, N_AE_MAP
               V = CBLK_MAP( SPC )
!              if ( jtime .ge. 155500 .and. I .ge. 67 )
!    &            write( logdev,* ) 'i,j,spc,v :', i, j, spc, v
!              write( logdev,* ) 'CPLUME: ', cplume( v,j,i )
               CBLK( SPC ) = MAX ( CPLUME( V,J,I ), CONMIN )
!              if ( jtime .ge. 155500 .and. I .ge. 67 )
!    &            write( logdev,* ) 'CBLK: ', cblk( spc )
               IF ( SPC .EQ. VAT0 ) CBLK( SPC ) =
     &            MAX ( CPLUME( V,J,I ),REAL( NUMMIN_AT) )
               IF ( SPC .EQ. VAC0 ) CBLK( SPC ) =
     &            MAX ( CPLUME( V,J,I ),REAL( NUMMIN_AC) )
               IF ( SPC .EQ. VCOR0) CBLK( SPC ) =
     &            MAX ( CPLUME( V,J,I ),REAL( NUMMIN_C) )
               END DO

!           write( logdev,* ) 'after loading CBLK'

C *** Add gas and vapor phase species.

            CBLK( VSULF ) = MAX( CONMIN,
     &                           H2SO4CONV * BLKDENS * CPLUME( LSULF,J,I ) )

            CBLK( VHNO3 ) = MAX( CONMIN,
     &                           HNO3CONV  * BLKDENS * CPLUME( LHNO3,J,I ) )

            CBLK( VNH3 )  = MAX( CONMIN,
     &                           NH3CONV   * BLKDENS * CPLUME( LNH3,J,I ) )
     
            CBLK( VN2O5 )  = MAX( CONMIN,
     &                           N2O5CONV  * BLKDENS * CPLUME( LN2O5,J,I ) )

C *** Fetch gas-phase production rates.

C *** sulfate 

            SO4RATE = H2SO4CONV * BLKDENS * CPLUME( LSULFP,J,I ) / DT

C *** secondary anthropogenic organics

            DO SPC = 1, NPSPCS
               ORGPROD( SPC ) = 0.0
               END DO

            IF ( LALKAER .GT. 0 ) ORGPROD( 1 ) = CPLUME( LALKAER,J,I ) 

c..SOA production forom alkenes eliminated
!           IF ( MECH .EQ. 'RADM2' ) THEN
!              IF ( LOLIAER .GT. 0 .AND. LTERPAER .GT. 0 )
!     &             ORGPROD( 2 ) = MAX( 0.0, ( CPLUME( LOLIAER,J,I )
!     &                          - CPLUME( LTERPAER,J,I ) ) )
!              ELSE IF (  MECH .EQ. 'SAPRC99' ) THEN
!                 IF ( LOLIAER .GT. 0 ) ORGPROD( 2 ) = CPLUME( LOLIAER,J,I ) 
!              END IF

            IF ( LXYLAER .GT. 0 ) ORGPROD( 3 ) = CPLUME( LXYLAER,J,I ) 

            IF ( LCSLAER .GT. 0 ) ORGPROD( 4 ) = CPLUME( LCSLAER,J,I ) 

            IF ( LTOLAER .GT. 0 ) ORGPROD( 5 ) = CPLUME( LTOLAER,J,I ) 

            IF ( LTERPAER .GT. 0 ) ORGPROD(6) = CPLUME( LTERPAER,J,I ) 

c..Adjust TOL & ALK orgprods for fraction of precursor that produces SOA
            IF ( MECH .EQ. 'SAPRC99' ) THEN
               ORGPROD( 1 ) = SPALK * ORGPROD( 1 )
               ORGPROD( 5 ) = SPTOL * ORGPROD( 5 )
               ELSE IF( MECH .EQ. 'RADM2' ) THEN
               ORGPROD( 1 ) = RDALK * ORGPROD( 1 )
               ORGPROD( 5 ) = RDTOL * ORGPROD( 5 )
               END IF

c *** fetch  values of the organic vapors from CPLUME 
            
            DO VV = 1, NCVAP
               VAPORS( VV ) = 0.0
               VVLOC = LOCVAP( VV )
               IF ( VVLOC .GT. 0 ) VAPORS( VV ) = CPLUME( VVLOC,J,I )
               END DO

ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c     call aerosol process routines
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
!           write( logdev,* ) 'before AEROPROC'
            CALL AEROPROC( NSPCSDA,
     &                     CBLK, DT, LAYER,
     &                     BLKTA, BLKPRS, BLKDENS, BLKRH,
     &                     SO4RATE, 
     &                     ORGPROD, NPSPCS, VAPORS, NCVAP,
     &                     XLM, AMU,
     &                     DGATK, DGACC, DGCOR,
     &                     XXLSGAT, XXLSGAC,
     &                     PMASSAT, PMASSAC, PMASSCO,
     &                     PDENSAT, PDENSAC, PDENSCO,
     &                     LOGDEV )
!           write( logdev,* ) 'after AEROPROC'
C *** put new aerosol information into CPLUME (limit transfer to mapped species)

            DO SPC = 1, N_AE_MAP
               V = CBLK_MAP( SPC )
               CPLUME( V,J,I ) = MAX( CONMIN, CBLK( SPC ) )
               END DO

C *** gases (vapors)

            CPLUME( LSULF,J,I ) = MAX( CONMIN,
     &                                 H2SO4CONV1 * BLKDENS1 * CBLK( VSULF ) )

            CPLUME( LHNO3,J,I ) = MAX( CONMIN,
     &                                 HNO3CONV1  * BLKDENS1 * CBLK( VHNO3 ) )

            CPLUME( LNH3,J,I )  = MAX( CONMIN,
     &                                 NH3CONV1   * BLKDENS1 * CBLK( VNH3 ) )
               
            CPLUME( LN2O5,J,I ) = MAX( CONMIN,
     &                                N2O5CONV1   * BLKDENS1 * CBLK( VN2O5 ) )

C *** Zero out the species representing the contributions to 
C     production of aerosols.

            CPLUME( LSULFP,J,I )  = 0.0
            IF ( LALKAER  .GT. 0 ) CPLUME( LALKAER,J,I  ) = 0.0
            IF ( LOLIAER  .GT. 0 ) CPLUME( LOLIAER,J,I  ) = 0.0
            IF ( LXYLAER  .GT. 0 ) CPLUME( LXYLAER,J,I  ) = 0.0
            IF ( LCSLAER  .GT. 0 ) CPLUME( LCSLAER,J,I  ) = 0.0
            IF ( LTOLAER  .GT. 0 ) CPLUME( LTOLAER,J,I  ) = 0.0
            IF ( LTERPAER .GT. 0 ) CPLUME( LTERPAER,J,I ) = 0.0

C *** set new values of organic vapors into CPLUME
         
            DO VV = 1, NCVAP
               VVLOC = LOCVAP( VV )
               IF ( VVLOC .GT. 0 )
     &            CPLUME(VVLOC,J,I ) = MAX ( CONMIN, VAPORS( VV ) )  
               END DO  

C *** Calculate volume fraction of each mode < 2.5um aerodynamic diameter

               XXLSGCO = LOG( SGINICO )
               CALL INLET25 ( DGATK, XXLSGAT, PDENSAT, PM25AT )
               CALL INLET25 ( DGACC, XXLSGAC, PDENSAT, PM25AC )
               CALL INLET25 ( DGCOR, XXLSGCO, PDENSCO, PM25CO )

C *** Get aerosol extinction coefficients and deciviews:
!           L = 1
!!          IF ( WRITETIME .AND. L .EQ. 1 ) THEN
!              IF ( L .EQ. 1 ) THEN
!!                write( logdev,* ) 'before GETVISBY'
!!                if ( jtime .ge. 155500 ) then
!!                   write( logdev,*) c,i,j,' CBLK : '
!!                   write( logdev,*) blkrh, dgatk, dgacc, dgcor, xxlsgat,
!!   &                                xxlsgac, pmassat, pmassac, pmassco
!!                END IF

!                 CALL GETVISBY ( NSPCSDA,
!    &                            CBLK, BLKRH,
!    &                            BLKDCV1, BLKEXT1, BLKDCV2, BLKEXT2,
!    &                            DGATK, DGACC, DGCOR,
!    &                            XXLSGAT, XXLSGAC,
!    &                            PMASSAT, PMASSAC, PMASSCO )
!!                write( logdev,* ) 'after GETVISBY'
C *** Fill one layer grid array and write out visibility file here.

!                 VIS_SPC( I,J,IDCVW1 ) = BLKDCV1 ! visual range [ deciview ]
                                                  ! (Mie)
!                 VIS_SPC( I,J,IBEXT1 ) = BLKEXT1 ! aerosol extinction [ 1/km ]
                                                  ! (Mie)
!                 VIS_SPC( I,J,IDCVW2 ) = BLKDCV2 ! visual range [ deciview ]
                                                  ! (Reconstructed)
!                 VIS_SPC( I,J,IBEXT2 ) = BLKEXT2 ! aerosol extinction [ 1/km ]
                                                  ! (Reconstructed)
!              END IF

C *** Set second moments, diameters, and standard deviations to values not
C     including water for transport. That is, transport "dry" particles.

C *** Set dry values for the Atken mode.

               M3_WET       = CBLK( VAT3 )
               M3_DRY       = M3_WET - H2OFAC *  CBLK( VH2OAI )
               M2_WET       = CBLK( VAT2 )
               M2_DRY       = M2_WET * ( M3_DRY / M3_WET ) ** TWO3

               CBLK( VAT3 ) = M3_DRY
               CBLK( VAT2 ) = M2_DRY

C *** Set dry values for the accumulation mode.

               M3_WET       = CBLK( VAC3 )
               M3_DRY       = M3_WET - H2OFAC *  CBLK( VH2OAJ )
               M2_WET       = CBLK( VAC2 )
               M2_DRY       = M2_WET * ( M3_DRY / M3_WET ) ** TWO3

               CBLK( VAC3 ) = M3_DRY
               CBLK( VAC2 ) = M2_DRY

               IF ( WRITETIME .AND. AERDIAG ) THEN

                  DIAM_SPC( I,J,1, 5 ) = DGATK         ! wet i-mode diameter
                  DIAM_SPC( I,J,1, 6 ) = DGACC         ! wet j-mode diameter
                  DIAM_SPC( I,J,1,13 ) = CBLK( VAT2 )  ! wet i-mode 2nd moment
                  DIAM_SPC( I,J,1,14 ) = CBLK( VAC2 )  ! wet j-mode 2nd moment
                  DIAM_SPC( I,J,1,17 ) = CBLK( VAT3 )  ! wet i-mode 3rd moment
                  DIAM_SPC( I,J,1,18 ) = CBLK( VAC3 )  ! wet j-mode 3rd moment
                  DIAM_SPC( I,J,1,20 ) = PM25AT        ! i-mode fine fraction
                  DIAM_SPC( I,J,1,21 ) = PM25AC        ! j-mode fine fraction
                  DIAM_SPC( I,J,1,22 ) = PM25CO        ! coarse-mode fine fraction
                  DIAM_SPC( I,J,1,23 ) = BLKRH         ! relative humidity

                  END IF   ! WRITETIME .AND. AERDIAG

C *** Reset size distribution.
!              write( logdev,* ) 'before GETPAR'
               CALL GETPAR( NSPCSDA,
     &                      CBLK,
     &                      PMASSAT, PMASSAC, PMASSCO,
     &                      PDENSAT, PDENSAC, PDENSCO,
     &                      DGATK, DGACC, DGCOR,
     &                      XXLSGAT, XXLSGAC,
     &                      M3_WET_FLAG )
!              write( logdev,* ) 'after GETPAR'

               CPLUME( CBLK_MAP( VSURFAT ),J,I ) = PI * CBLK( VAT2 )
               CPLUME( CBLK_MAP( VSURFAC ),J,I ) = PI * CBLK( VAC2 )

               IF ( WRITETIME .AND. AERDIAG ) THEN

                  DIAM_SPC( I,J,1, 1 ) = EXP( XXLSGAT )
                  DIAM_SPC( I,J,1, 2 ) = EXP( XXLSGAC )
                  DIAM_SPC( I,J,1, 3 ) = DGATK         ! dry i-mode diameter
                  DIAM_SPC( I,J,1, 4 ) = DGACC         ! dry j-mode diameter
                  DIAM_SPC( I,J,1, 7 ) = DGCOR         ! dry coarse-mode diam.
                  DIAM_SPC( I,J,1, 8 ) = CBLK( VAT0 )  ! i-mode 0th moment
                  DIAM_SPC( I,J,1, 9 ) = CBLK( VAC0 )  ! j-mode 0th moment
                  DIAM_SPC( I,J,1,10 ) = CBLK( VCOR0 ) ! coarse-mode 0th moment

                  DIAM_SPC( I,J,1,11 ) = CBLK( VAT2 )  ! dry i-mode 2nd moment
                  DIAM_SPC( I,J,1,12 ) = CBLK( VAC2 )  ! dry j-mode 2nd moment
                  DIAM_SPC( I,J,1,15 ) = CBLK( VAT3 )  ! dry i-mode 3rd moment
                  DIAM_SPC( I,J,1,16 ) = CBLK( VAC3 )  ! dry j-mode 3rd moment
                  DIAM_SPC( I,J,1,19 ) = CBLK( VCOR3 ) ! dry coarse-mode 3rd

                  CPLUME( CBLK_MAP( VSURFAT ),J,I ) = PI * CBLK( VAT2 )
                  CPLUME( CBLK_MAP( VSURFAC ),J,I ) = PI * CBLK( VAC2 )

                  END IF   ! WRITETIME .AND. AERDIAG

            END DO ! loop on plume cells
         END DO ! loop on all active plume sections

C *** end of loops over all active plume section cells

C *** If last call this hour, write visibility information.

      IF ( WRITETIME ) THEN

         MDATE = JDATE
         MTIME = JTIME
         CALL NEXTIME ( MDATE, MTIME, TSTEP( 2 ) )
         WSTEP = 0
         WRITETIME = .FALSE.

!        CALL SUBST_GATHER ( VIS_SPC, PEC, PLUMEPTR, NPACTIVE, 1 )

!        IF ( .NOT. WRITE3( CTM_PING_VIS_1, ALLVAR3,
!    &                      MDATE, MTIME, VIS_SPC ) ) THEN
!           XMSG = 'Error writing ' // CTM_PING_VIS_1 // ' file'
!           CALL M3EXIT ( PNAME, MDATE, MTIME, XMSG, XSTAT1 )
!           END IF

!        WRITE( LOGDEV, '( /5X, 3( A, :, 1X ), I8, ":", I6.6 )' )
!    &                  'Timestep written to', CTM_PING_VIS_1,
!    &                  'for date and time', MDATE, MTIME
  
C *** Write data to the aerosol parameters file.

         IF ( AERDIAG ) THEN

            CALL SUBST_GATHER ( DIAM_SPC, PEC, PLUMEPTR, NPACTIVE, 1 )

            IF ( .NOT. WRITE3( CTM_PING_DIAM_1, ALLVAR3,
     &                         MDATE, MTIME, DIAM_SPC ) ) THEN
               XMSG = 'Could not write ' // CTM_PING_DIAM_1 // ' file'
               CALL M3EXIT ( PNAME, MDATE, MTIME, XMSG, XSTAT1 )
               END IF

            WRITE( LOGDEV, '( /5X, 3( A, :, 1X ), I8, ":", I6.6 )' )
     &                     'Timestep written to', CTM_PING_DIAM_1,
     &                     'for date and time', MDATE, MTIME

            END IF

         END IF

      RETURN
      END
@


1.1.1.1
log
@CMAQv4_5_1 release
@
text
@@
