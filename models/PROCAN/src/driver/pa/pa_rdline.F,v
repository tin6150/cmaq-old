head     1.1;
branch   1.1.1;
access   ;
symbols  CMAQv4_5_1:1.1.1.1 ASMD:1.1.1;
locks    ; strict;
comment  @c @;


1.1
date     2006.03.13.19.28.41;  author sjr;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2006.03.13.19.28.41;  author sjr;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@
C***************************************************************************
C  Significant portions of Models-3/CMAQ software were developed by        *
C  Government employees and under a United States Government contract.     *
C  Portions of the software were also based on information from non-       *
C  Federal sources, including software developed by research institutions  *
C  through jointly funded cooperative agreements. These research institu-  *
C  tions have given the Government permission to use, prepare derivative   *
C  works, and distribute copies of their work to the public within the     *
C  Models-3/CMAQ software release and to permit others to do so. EPA       *
C  therefore grants similar permissions for use of Models-3/CMAQ software, *
C  but users are requested to provide copies of derivative works to the    *
C  Government without re-strictions as to use by others.  Users are        *
C  responsible for acquiring their own copies of commercial software       *
C  associated with the Models-3/CMAQ release and are also responsible      *
C  to those vendors for complying with any of the vendors' copyright and   *
C  license restrictions. In particular users must obtain a Runtime license *
C  for Orbix from IONA Technologies for each CPU used in Models-3/CMAQ     *
C  applications.                                                           *
C                                                                          *
C  Portions of I/O API, PAVE, and the model builder are Copyrighted        *
C  1993-1997 by MCNC--North Carolina Supercomputing Center and are         *
C  used with their permissions subject to the above restrictions.          *
C***************************************************************************

C RCS file, release, date & time of last delta, author, state, [and locker]
C $Header: /project/work/rep/PROCAN/src/driver/pa/pa_rdline.F,v 1.3 1998/06/19 11:38:55 yoj Exp $ 

C what(1) key, module and SID; SCCS file; date and time of last delta:
C @@(#)pa_rdline.F	1.1 /project/mod3/PROCAN/src/driver/pa/SCCS/s.pa_rdline.F 04 Jul 1997 14:13:41

      SUBROUTINE RDLINE

C***********************************************************************
C
C  FUNCTION: RDLINE reads one line from a file and stores it in INBUF.
C            The position of the last non-blank character is stored
C            in IEOL. All blank lines and lines with a ! in the first
C            column are skipped. The line count is stored in LINNUM.
C
C  PRECONDITIONS: None
C 
C  KEY SUBROUTINES/FUNCTIONS CALLED: None
C
C  REVISION HISTORY: Prototype created by Jerry Gipson, August, 1996
C                    Modified May, 1997 by Jerry Gipson to be consistent
C                      with beta CTM
C                    Modified Sept, 1997 by Jerry Gipson to be consistent
C                      with targeted CTM
C
C***********************************************************************
      IMPLICIT NONE
      
C..INCLUDES:
      INCLUDE 'PA_PARSE.EXT' 
      
C..ARGUMENTS: None
                                        
C..PARAMETERS: None

C..EXTERNAL FUNCTIONS:
      INTEGER TRIMLEN     ! Function to get position of last non-blank
                          ! character in a string 

C..SAVED LOCAL VARIABLES: 

C..SCRATCH LOCAL VARIABLES: None
         
C***********************************************************************
         
c..Read the first non-comment line and find the last non-blank character
c..in that line
   20 READ( IFILE, '( A )', END = 999 ) INBUF
      LINNUM = LINNUM + 1
      IF( INBUF( 1 : 1 ) .EQ. '!' ) THEN
         GO TO 20
      ELSE
         IEOL = TRIMLEN( INBUF )
         IF( IEOL .EQ. 1 .AND. INBUF( 1 : 1 ) .EQ. ' ' ) THEN 
            GO TO 20
         ELSE
            LPOINT = 0
            RETURN
         ENDIF
      ENDIF
  999 CONTINUE

c..eof file encountered -- exit program
      EXITSTAT = 2
      WRITE( MSG, 94000 ) 
      CALL M3MESG( MSG )
      WRITE( MSG, 94020 )
      CALL M3MESG( MSG )
      CALL M3EXIT( 'RDLINE', IZERO, IZERO, ' ', EXITSTAT )
      
      
      
C*********************** FORMAT STATEMENTS *****************************      
      
94000 FORMAT( 'ERROR: End of file reached on the Process Analysis',
     &               ' command file' )
94020 FORMAT( '       ENDPA must be the last command' )       

      END

@


1.1.1.1
log
@CMAQv4_5_1 release
@
text
@@
