head     1.1;
branch   1.1.1;
access   ;
symbols  CMAQv4_5_1:1.1.1.1 ASMD:1.1.1;
locks    ; strict;
comment  @c @;


1.1
date     2006.03.13.19.28.41;  author sjr;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2006.03.13.19.28.41;  author sjr;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@
C***************************************************************************
C  Significant portions of Models-3/CMAQ software were developed by        *
C  Government employees and under a United States Government contract.     *
C  Portions of the software were also based on information from non-       *
C  Federal sources, including software developed by research institutions  *
C  through jointly funded cooperative agreements. These research institu-  *
C  tions have given the Government permission to use, prepare derivative   *
C  works, and distribute copies of their work to the public within the     *
C  Models-3/CMAQ software release and to permit others to do so. EPA       *
C  therefore grants similar permissions for use of Models-3/CMAQ software, *
C  but users are requested to provide copies of derivative works to the    *
C  Government without re-strictions as to use by others.  Users are        *
C  responsible for acquiring their own copies of commercial software       *
C  associated with the Models-3/CMAQ release and are also responsible      *
C  to those vendors for complying with any of the vendors' copyright and   *
C  license restrictions. In particular users must obtain a Runtime license *
C  for Orbix from IONA Technologies for each CPU used in Models-3/CMAQ     *
C  applications.                                                           *
C                                                                          *
C  Portions of I/O API, PAVE, and the model builder are Copyrighted        *
C  1993-1997 by MCNC--North Carolina Supercomputing Center and are         *
C  used with their permissions subject to the above restrictions.          *
C***************************************************************************

C RCS file, release, date & time of last delta, author, state, [and locker]
C $Header: /project/work/rep/PROCAN/src/driver/pa/pa_getiprout.F,v 1.3 1998/06/19 11:38:41 yoj Exp $ 

C what(1) key, module and SID; SCCS file; date and time of last delta:
C @@(#)pa_getiprout.F	1.1 /project/mod3/PROCAN/src/driver/pa/SCCS/s.pa_getiprout.F 04 Jul 1997 14:13:29

      SUBROUTINE GETIPROUT

C***********************************************************************
C
C  FUNCTION: To process the IPR_OUTPUT option 
C
C  PRECONDITIONS: None
C 
C  KEY SUBROUTINES/FUNCTIONS CALLED: GETCHR
C                                    GETWORD
C
C  REVISION HISTORY: Prototype created by Jerry Gipson, August, 1996
C                    Modified May, 1997 by Jerry Gipson to be consistent
C                       with beta CTM
C                    Modified Sept, 1997 by Jerry Gipson to be consistent
C                      with targeted CTM
C
C***********************************************************************
      IMPLICIT NONE
      
C..INCLUDES:
      INCLUDE SUBST_IODECL 
      INCLUDE 'PA_GLOBAL.EXT'
      INCLUDE 'PA_PARSE.EXT'
      INCLUDE 'PA_VARS.EXT'
      
C..ARGUMENTS: None
                                        
C..PARAMETERS: None

C..EXTERNAL FUNCTIONS: None

C..SAVED LOCAL VARIABLES: None

C..SCRATCH LOCAL VARIABLES:
      CHARACTER*16 PNAME    ! Program name

C***********************************************************************
      DATA PNAME /'GETIPROUT       '/

c..Increment the counter and check for too many
      N_IPR_SPC = N_IPR_SPC + 1
      N_IPR_OPS( N_IPR_SPC ) = 0
      IF( N_IPR_SPC .GT. MAXIPRSPC ) THEN
         EXITSTAT = 2
         WRITE( MSG, 94000 ) 
         CALL M3MESG( MSG )
         WRITE( MSG, 94500 ) LINNUM, INBUF
         CALL M3MESG( MSG )
         WRITE( MSG, 94020 ) MAXIPRSPC
         CALL M3MESG( MSG )
         CALL M3EXIT( PNAME, IZERO, IZERO, ' ', EXITSTAT )
      ENDIF

c..get the name of the species for IPR_OUTPUT
      CALL GETWORD
      IPR_SPNAM( N_IPR_SPC ) = WORD

c..if the next character is a semicolon, return
      IF( CHR .EQ. ';' ) THEN
         CALL GETCHR
         RETURN
      ENDIF

c..the next character must be an equal sign
      IF( CHR .EQ. '=' ) THEN
         CALL GETCHR         
      ELSE
         EXITSTAT = 2
         WRITE( MSG, 94040 ) 
         CALL M3MESG( MSG )
         WRITE( MSG, 94500 ) LINNUM, INBUF
         CALL M3MESG( MSG )
         WRITE( MSG, 94520 ) CHR
         CALL M3MESG( MSG )
         CALL M3EXIT( PNAME, IZERO, IZERO, ' ', EXITSTAT )
      ENDIF

c..top of loop for getting operators for this species
   20 CONTINUE

c..increment the counters and check for too many
      IF( CHR .EQ. '+' ) CALL GETCHR
      N_IPR_OPS( N_IPR_SPC ) = N_IPR_OPS( N_IPR_SPC ) + 1

      IF( N_IPR_OPS( N_IPR_SPC ) .GT. MAXTERMS ) THEN
         EXITSTAT = 2
         WRITE( MSG, 94060 ) 
         CALL M3MESG( MSG )
         WRITE( MSG, 94500 ) LINNUM, INBUF
         CALL M3MESG( MSG )
         WRITE( MSG, 94080 ) MAXTERMS
         CALL M3MESG( MSG )
         CALL M3EXIT( PNAME, IZERO, IZERO, ' ', EXITSTAT )
      ENDIF

c..get the operator name
      CALL GETWORD
      IPR_OPNAME( N_IPR_SPC, N_IPR_OPS( N_IPR_SPC ) ) = WORD


c..if more operators, go back or return or err off
      IF( CHR .EQ. '+' ) THEN
         GO TO 20
      ELSEIF( CHR .EQ. ';' ) THEN
         CALL GETCHR
         RETURN
      ELSE
         EXITSTAT = 2
         WRITE( MSG, 94100 ) 
         CALL M3MESG( MSG )
         WRITE( MSG, 94500 ) LINNUM, INBUF
         CALL M3MESG( MSG )
         WRITE( MSG, 94520 ) CHR
         CALL M3MESG( MSG )
         CALL M3EXIT( PNAME, IZERO, IZERO, ' ', EXITSTAT )
      ENDIF
      

C*********************** FORMAT STATEMENTS *****************************


94000 FORMAT( 'ERROR: Maximum number of PA species exceeded' )
94020 FORMAT( '       Modify PARAMETER ( MAXIPRSPC =', I3,' ) or',
     &              '  decrease the number of PA species' )
94040 FORMAT( 'ERROR: Expecting a = or ; after IPR_OUTPUT species',
     &              '  name' ) 
94060 FORMAT( 'ERROR: Maximum number of terms in a PROC_OUTPUT',
     &              '  exceeded' )
94080 FORMAT( '       Modify PARAMETER ( MAXTERMS =', I3,' ) or',
     &              '  decrease the number of terms in the',
     &              '  IPR_OUTPUT request' )
94100 FORMAT( 'ERROR: Expecting a + or ; after a IPR_OUTPUT operator' )
94500 FORMAT( '       Line No. ', I4, ': ', A )
94520 FORMAT( '       Character found: ', A )
      END    





@


1.1.1.1
log
@CMAQv4_5_1 release
@
text
@@
