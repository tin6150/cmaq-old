head     1.1;
branch   1.1.1;
access   ;
symbols  CMAQv4_5_1:1.1.1.1 ASMD:1.1.1;
locks    ; strict;
comment  @c @;


1.1
date     2006.03.13.19.28.41;  author sjr;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2006.03.13.19.28.41;  author sjr;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@
C***************************************************************************
C  Significant portions of Models-3/CMAQ software were developed by        *
C  Government employees and under a United States Government contract.     *
C  Portions of the software were also based on information from non-       *
C  Federal sources, including software developed by research institutions  *
C  through jointly funded cooperative agreements. These research institu-  *
C  tions have given the Government permission to use, prepare derivative   *
C  works, and distribute copies of their work to the public within the     *
C  Models-3/CMAQ software release and to permit others to do so. EPA       *
C  therefore grants similar permissions for use of Models-3/CMAQ software, *
C  but users are requested to provide copies of derivative works to the    *
C  Government without re-strictions as to use by others.  Users are        *
C  responsible for acquiring their own copies of commercial software       *
C  associated with the Models-3/CMAQ release and are also responsible      *
C  to those vendors for complying with any of the vendors' copyright and   *
C  license restrictions. In particular users must obtain a Runtime license *
C  for Orbix from IONA Technologies for each CPU used in Models-3/CMAQ     *
C  applications.                                                           *
C                                                                          *
C  Portions of I/O API, PAVE, and the model builder are Copyrighted        *
C  1993-1997 by MCNC--North Carolina Supercomputing Center and are         *
C  used with their permissions subject to the above restrictions.          *
C***************************************************************************

C RCS file, release, date & time of last delta, author, state, [and locker]
C $Header: /project/work/rep/PROCAN/src/driver/pa/pa_getquote.F,v 1.3 1998/06/19 11:38:44 yoj Exp $ 

C what(1) key, module and SID; SCCS file; date and time of last delta:
C @@(#)pa_getquote.F	1.1 /project/mod3/PROCAN/src/driver/pa/SCCS/s.pa_getquote.F 04 Jul 1997 14:13:32

      SUBROUTINE GETQUOTE

C***********************************************************************
C
C  FUNCTION: GETQUOTE gets all characters between apostrophes. 
C            Embedded apostrophes indicated by double apostrophes.
C            Line wrap is allowed.
C            
C  PRECONDITIONS: None
C 
C  KEY SUBROUTINES/FUNCTIONS CALLED: RDLINE
C                                    GETCHR
C
C  REVISION HISTORY: Prototype created by Jerry Gipson, August, 1996
C                    Modified May, 1997 by Jerry Gipson to be consistent
C                      with beta CTM
C                    Modified Sept, 1997 by Jerry Gipson to be consistent
C                      with targeted CTM
C
C***********************************************************************
      IMPLICIT NONE
      
C..INCLUDES:
      INCLUDE 'PA_PARSE.EXT' 
      
C..ARGUMENTS: None
                                        
C..PARAMETERS: None

C..EXTERNAL FUNCTIONS: None

C..SAVED LOCAL VARIABLES: None 

C..SCRATCH LOCAL VARIABLES:
      CHARACTER*1   APOS     ! Apostrophe (') character
      CHARACTER*132 STRING   ! Holder for qoute

      INTEGER LENGTH    ! Length of quote
      INTEGER NXTPOS    ! Next character position in input buffer

      LOGICAL LCONT     ! Flag to continue parsing input buffer
         
C***********************************************************************
      DATA APOS/ ''''/

      LENGTH = 0

c..Top of loop for reading quote
   20 LPOINT = LPOINT + 1

c..get the next line if necessary
      IF( LPOINT .GT. IEOL ) THEN
         CALL RDLINE
         CALL GETCHR
      ENDIF

c..get the next character
      CHR = INBUF( LPOINT : LPOINT )

c..check for leading/endiung double apostrophes and get the next character
      IF( CHR .NE. APOS ) THEN
         LCONT = .TRUE.
      ELSE
         IF( LPOINT + 1 .GT. IEOL ) THEN
            CALL RDLINE
            NXTPOS = 1
         ELSE
            NXTPOS = LPOINT + 1
         ENDIF
         IF( INBUF( NXTPOS : NXTPOS ) .EQ. APOS ) THEN
            LCONT  = .TRUE.
            LPOINT = LPOINT + 1
            CHR = INBUF( LPOINT : LPOINT )
         ELSE
            LCONT = .FALSE.
            CALL GETCHR
         ENDIF
      ENDIF

c..if continuing, add current character to the output string if 
c..length is OK
      IF( LCONT ) THEN               
         LENGTH = LENGTH + 1
         IF( LENGTH .GT. 132 ) THEN
            EXITSTAT = 2
            WRITE( MSG, 94000 ) 
            CALL M3MESG( MSG )
            WRITE( MSG, 94020 ) LINNUM, INBUF
            CALL M3MESG( MSG )
            CALL M3EXIT( 'PA_GETQUOTE', IZERO, IZERO, ' ', EXITSTAT )
         ENDIF

         IF( LENGTH .EQ. 1 ) THEN
            STRING( 1 : 1 ) = CHR
         ELSE
            STRING( 1 : LENGTH ) = STRING( 1 : LENGTH - 1 ) // CHR
         ENDIF     
         GO TO 20
      ENDIF

c..Linit output string to 60 characters
      LENGTH = MIN( LENGTH, 60 )
      QUOTE = STRING( 1 : LENGTH )

      RETURN

      
C*********************** FORMAT STATEMENTS ******************************


94000 FORMAT( 'ERROR: Quote exceeds maximum allowable 132 characters' )
94020 FORMAT( '      Line No. ', I4, ': ', A )
      END
@


1.1.1.1
log
@CMAQv4_5_1 release
@
text
@@
