head     1.1;
branch   1.1.1;
access   ;
symbols  CMAQv4_5_1:1.1.1.1 ASMD:1.1.1;
locks    ; strict;
comment  @c @;


1.1
date     2006.03.13.19.28.41;  author sjr;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2006.03.13.19.28.41;  author sjr;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@
C***************************************************************************
C  Significant portions of Models-3/CMAQ software were developed by        *
C  Government employees and under a United States Government contract.     *
C  Portions of the software were also based on information from non-       *
C  Federal sources, including software developed by research institutions  *
C  through jointly funded cooperative agreements. These research institu-  *
C  tions have given the Government permission to use, prepare derivative   *
C  works, and distribute copies of their work to the public within the     *
C  Models-3/CMAQ software release and to permit others to do so. EPA       *
C  therefore grants similar permissions for use of Models-3/CMAQ software, *
C  but users are requested to provide copies of derivative works to the    *
C  Government without re-strictions as to use by others.  Users are        *
C  responsible for acquiring their own copies of commercial software       *
C  associated with the Models-3/CMAQ release and are also responsible      *
C  to those vendors for complying with any of the vendors' copyright and   *
C  license restrictions. In particular users must obtain a Runtime license *
C  for Orbix from IONA Technologies for each CPU used in Models-3/CMAQ     *
C  applications.                                                           *
C                                                                          *
C  Portions of I/O API, PAVE, and the model builder are Copyrighted        *
C  1993-1997 by MCNC--North Carolina Supercomputing Center and are         *
C  used with their permissions subject to the above restrictions.          *
C***************************************************************************

C RCS file, release, date & time of last delta, author, state, [and locker]
C $Header: /project/work/rep/PROCAN/src/driver/pa/pa_wrtdatext.F,v 1.5 1998/06/19 11:39:05 yoj Exp $ 

C what(1) key, module and SID; SCCS file; date and time of last delta:
C @@(#)pa_wrtdatext.F	1.1 /project/mod3/PROCAN/src/driver/pa/SCCS/s.pa_wrtdatext.F 04 Jul 1997 14:13:50

      SUBROUTINE PA_WRTDATEXT

C***********************************************************************
C
C  FUNCTION: To write the Models-3 Process Analysis Include file 
C            containing data statements 
C
C  PRECONDITIONS: Requires mechanism to have been processed
C 
C  KEY SUBROUTINES/FUNCTIONS CALLED: None
C
C  REVISION HISTORY: Prototype created by Jerry Gipson, August, 1996
C                    Modified by Jerry Gipson April, 1997 to add ADJC
C                      process and to add species = all for proc outputs
C                    Modified May, 1997 by Jerry Gipson to be consistent
C                      with beta CTM
C                    Modified Sept, 1997 by Jerry Gipson to be consistent
C                      with targeted CTM
C
C***********************************************************************
      IMPLICIT NONE
      
C..INCLUDES:
      INCLUDE SUBST_IODECL 
      INCLUDE 'PA_IPRDEF.EXT'
      INCLUDE 'PA_GLOBAL.EXT'
      INCLUDE 'PA_PARSE.EXT'
      INCLUDE 'PA_VARS.EXT'
      INCLUDE 'PA_INCDATA.EXT'
      
C..ARGUMENTS: None
                                        
C..PARAMETERS: None

C..EXTERNAL FUNCTIONS:
      INTEGER JUNIT    ! Function to get unit number
      INTEGER TRIMLEN  ! Gets pos. of last non-blank character

C..SAVED LOCAL VARIABLES: None 

C..SCRATCH LOCAL VARIABLES:

      CHARACTER*1   DOT        ! Dot character
      CHARACTER*80  DELIM      ! Delimiter line output
      CHARACTER*80  CEES
      CHARACTER*78  LINOUT     ! Output line
      CHARACTER*6   BUF6(  MAXIPROUT )  ! 6-Character buffer
      CHARACTER*12  BUF12( MAXIPROUT )  ! 12-Character buffer
      CHARACTER*20  BUF20( MAXIPROUT )  ! 20-Character buffer

      INTEGER IEND       ! Position of last non-blank character
      INTEGER IOUT       ! Unit number for include file
      INTEGER LINLEN     ! Length of output line
      INTEGER MAXCNT     ! Maximum number of continuation lines
      INTEGER N          ! Loop index
      INTEGER NHI        ! Highest index of loop
      INTEGER NIRR       ! IRR loop index
      INTEGER NLO        ! Lowest index of loop
      INTEGER NPA        ! IPR species loop index
      INTEGER NS         ! Loop index for sets of data statments
      INTEGER NSETS      ! Number of sets of data statements to write

      LOGICAL LIPR      ! Flag for process monitoring
      LOGICAL LIRR       ! Flag for IRR computations
         
C***********************************************************************
      DATA MAXCNT /99/
      DATA LINLEN /78/

      DOT = '.'

      DO N = 1, 78
         DELIM( N : N ) = DOT
         CEES( N : N ) = 'c'
      ENDDO     
      DELIM( 1 : 1 ) = 'C'

      IF( LFULLIRR ) THEN
         LIRR    = .TRUE.
         NIRRVAR = NRXNS
      ELSEIF( LPARTIRR ) THEN
         LIRR    = .TRUE.
         NIRRVAR = NIRROUT
      ELSE
         LIRR = .FALSE.     
      ENDIF

      IF( N_IPR_SPC .GT. 0 ) THEN
         LIPR = .TRUE.
      ELSE
         LIPR = .FALSE.
      ENDIF

cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c  Open DAT Include file and write the header data
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      IOUT = JUNIT( )
      OPEN( UNIT = IOUT,  FILE = 'PA_DAT.EXT' )
      WRITE( IOUT, 94000 ) DELIM( 1 : 72 )
      LINOUT = 'C    INCLUDE FILE   PA_DAT.EXT'
      WRITE( IOUT, 94000 ) LINOUT
      WRITE( IOUT, 94000 ) LINOUT( 1 : 1 )
      LINOUT = 'C    CONTAINS :  Data statements for Process Analysis'
      WRITE( IOUT, 94000 ) LINOUT
      WRITE( IOUT, 94000 ) LINOUT( 1 : 1 )
      LINOUT = 'C    DEPENDENT UPON :  Process Analysis COMMON Include '
      IEND = TRIMLEN( LINOUT )
      LINOUT = LINOUT( 1 : IEND ) // 'File'
      WRITE( IOUT, 94000 ) LINOUT
      WRITE( IOUT, 94000 ) LINOUT( 1 : 1 )
      LINOUT = 'C    CREATED BY :  Process Analysis Control Program'
      WRITE( IOUT, 94000 ) LINOUT
      LINOUT = 'C                ' // TDATOUT
      WRITE( IOUT, 94000 ) LINOUT
      WRITE( IOUT, 94000 ) LINOUT( 1 : 1 )
      WRITE( IOUT, 94000 ) DELIM( 1 : 72 )
      LINOUT = ''
      WRITE( IOUT, 94000 ) LINOUT

      IF( .NOT. LIPR .AND. .NOT. LIRR ) THEN
         WRITE( IOUT,  94110 )
         GO TO 999
      ENDIF         

cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c  Write data statements for output file variables
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      WRITE( IOUT, 94000 ) CEES( 1 : 72 )
      WRITE( IOUT, 94120 ) 
      WRITE( IOUT, 94000 ) CEES( 1 : 72 )
      WRITE( IOUT, 94200 ) 
 
      IF( NIPRVAR .GT. 0 ) THEN
         NSETS = ( ( NIPRVAR - 1 ) / ( 3 * MAXCNT ) ) + 1
         DO NS = 1, NSETS
            NLO = ( NS - 1 ) * ( 3 * MAXCNT ) + 1
            NHI = MIN( ( NS * 3 * MAXCNT ), NIPRVAR )
            WRITE( IOUT, 94220 ) NLO,  NHI
            DO NPA = NLO, NHI
               BUF20( NPA ) = ' ''' // IPRNAME( NPA ) // ''','
            ENDDO
            BUF20( NHI )( 20 : 20 ) = '/'
            WRITE( IOUT, 94020 ) ( BUF20( NPA ), NPA = NLO, NHI )
         ENDDO

         NSETS = ( ( NIPRVAR - 1 ) / MAXCNT ) + 1
         DO NS = 1, NSETS
            NLO = ( NS - 1 ) * ( MAXCNT ) + 1
            NHI = MIN( ( NS * MAXCNT ), NIPRVAR )         
            WRITE( IOUT, 94240 ) NLO,  NHI
            DO NPA = NLO, NHI
               LINOUT = '     &  ''' // IPRDESC( NPA ) // ''','
               IF( NPA .EQ. NHI ) LINOUT( 71 : 71 ) = '/'
               WRITE( IOUT, 94000 ) LINOUT            
            ENDDO
         ENDDO
      ENDIF

      IF( NIRRVAR .GT. 0 ) THEN
         NSETS = ( ( NIRRVAR - 1 ) / ( 3 * MAXCNT ) ) + 1
         DO NS = 1, NSETS
            NLO = ( NS - 1 ) * ( 3 * MAXCNT ) + 1
            NHI = MIN( ( NS * 3 * MAXCNT ),  NIRRVAR )
            WRITE( IOUT, 94260 ) NLO, NHI
            DO NIRR = NLO,  NHI
               BUF20( NIRR ) = ' ''' // IRRNAME( NIRR ) // ''','
            ENDDO
            BUF20( NHI )( 20 : 20 ) = '/'
            WRITE( IOUT, 94020 ) ( BUF20( NIRR ), NIRR = NLO, NHI )
         ENDDO

         NSETS = ( ( NIRRVAR - 1 ) / MAXCNT ) + 1
         DO NS = 1, NSETS
            NLO = ( NS - 1 ) * ( MAXCNT ) + 1
            NHI = MIN( ( NS * MAXCNT ), NIRRVAR )         
            WRITE( IOUT, 94280 ) NLO,  NHI
            DO NIRR = NLO, NHI
               LINOUT = '     &  ''' // IRRDESC( NIRR ) // ''','
               IF( NIRR .EQ. NHI ) LINOUT( 71 : 71 ) = '/'
               WRITE( IOUT, 94000 ) LINOUT            
            ENDDO
         ENDDO
      ENDIF

cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c  Write data statements for integrated Process rate variables
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      IF( LIPR ) THEN
         WRITE( IOUT, 94000 )
         WRITE( IOUT, 94000 )
         WRITE( IOUT, 94000 ) CEES( 1 : 72 )
         WRITE( IOUT, 94140 ) 
         WRITE( IOUT, 94000 ) CEES( 1 : 72 )

         NSETS = ( ( NPROCS - 1 ) / ( 3 * MAXCNT ) ) + 1
         DO NS = 1,  NSETS
            NLO = ( NS - 1 ) * ( 3 * MAXCNT ) + 1
            NHI = MIN( ( NS * 3 * MAXCNT ),  NPROCS )         
            WRITE( IOUT, 94290 ) NLO, NHI
            DO NPA = NLO, NHI
               BUF20( NPA ) = ' ''' // PROCNAME( NPA ) // ''',' 
            ENDDO
            BUF20( NHI )( 20 : 20 ) = '/'
            WRITE( IOUT, 94020 ) ( BUF20( NPA ), NPA = NLO, NHI )
         ENDDO
      ENDIF

      IF( N_IPR_SPC .GT. 0 ) THEN
         NSETS = ( ( N_IPR_SPC - 1 ) / ( 10 * MAXCNT ) ) + 1
         DO NS = 1, NSETS
            NLO = ( NS - 1 ) * ( 10 * MAXCNT ) + 1
            NHI = MIN( ( NS * 10 * MAXCNT ), N_IPR_SPC )         
            WRITE( IOUT, 94300 ) NLO, NHI
            DO NPA = NLO,  NHI
               WRITE( BUF6( NPA ), '( I5, '','' )' ) NCGRID( NPA )
            ENDDO
            BUF6( NHI )( 6 : 6 ) = '/'
            WRITE( IOUT, 94040 ) ( BUF6( NPA ), NPA = NLO, NHI )
         ENDDO
      ENDIF

      IF( NCSAVE .GT. 0 ) THEN
         NSETS = ( ( NCSAVE - 1 ) / ( 10 * MAXCNT ) ) + 1
         DO NS = 1, NSETS
            NLO = ( NS - 1 ) * ( 10 * MAXCNT ) + 1
            NHI = MIN( ( NS * 10 * MAXCNT ), NCSAVE )         
            WRITE( IOUT, 94320 ) NLO, NHI
            DO NPA = NLO,  NHI
               WRITE( BUF6( NPA ), 94080 ) SV2GRD( NPA )
            ENDDO
            BUF6( NHI )( 6 : 6 ) = '/'
            WRITE( IOUT, 94040 ) ( BUF6( NPA ), NPA = NLO, NHI )
         ENDDO
      ENDIF

      IF( N_IPR_SPC .GT. 0 ) THEN
         DO NPA = 1, N_IPR_SPC
            NSETS = ( ( NPROCS - 1 ) / ( 10 * MAXCNT ) ) + 1
            DO NS = 1, NSETS
               NLO = ( NS - 1 ) * ( 10 * MAXCNT ) + 1
               NHI = MIN( ( NS * 10 * MAXCNT ), NPROCS )         
               WRITE( IOUT, 94340 ) NPA, NLO, NHI
               DO N = NLO,  NHI
                  WRITE( BUF6( N ), 94080 ) IPROUT( NPA, N )
               ENDDO
               BUF6( NHI )( 6 : 6 ) = '/'
               WRITE( IOUT, 94040 ) ( BUF6( N ), N = NLO, NHI )
            ENDDO 
         ENDDO
      ENDIF 

      IF( N_IPR_SPC .GT. 0 ) THEN
         DO NPA = 1, N_IPR_SPC
            NSETS = ( ( NCGRID( NPA ) - 1 ) / ( 10 * MAXCNT ) ) + 1
            DO NS = 1, NSETS
               NLO = ( NS - 1 ) * ( 10 * MAXCNT ) + 1
               NHI = MIN( ( NS * 10 * MAXCNT ),  NCGRID( NPA ) )         
               WRITE( IOUT, 94360 ) NPA, NLO, NHI
               DO N = NLO, NHI
                  WRITE( BUF6( N ), 94080 ) IPR2GRD( NPA, N )
               ENDDO
               BUF6( NHI )( 6 : 6 ) = '/'
               WRITE( IOUT, 94040 ) ( BUF6( N ), N = NLO, NHI )
            ENDDO 
         ENDDO
      ENDIF

      IF( N_IPR_SPC .GT. 0 ) THEN
         DO NPA = 1, N_IPR_SPC
            NSETS = ( ( NCGRID( NPA ) - 1 ) / ( 10 * MAXCNT ) ) + 1
            DO NS = 1, NSETS
               NLO = ( NS - 1 ) * ( 10 * MAXCNT ) + 1
               NHI = MIN( ( NS * 10 * MAXCNT ), NCGRID( NPA ) )         
               WRITE( IOUT, 94380 ) NPA,  NLO,  NHI
               DO N = NLO, NHI
                  WRITE( BUF6( N ), 94080 ) IPR2SAV( NPA, N )
               ENDDO
               BUF6( NHI )( 6 : 6 ) = '/'
               WRITE( IOUT, 94040 ) ( BUF6( N ), N = NLO, NHI )
            ENDDO 
         ENDDO
      ENDIF

      IF( LIPR ) THEN
         NSETS = ( ( NPROCS - 1 ) / ( 5 * MAXCNT ) ) + 1
         DO NS = 1,  NSETS
            NLO = ( NS - 1 ) * ( 5 * MAXCNT ) + 1
            NHI = MIN( ( NS * 5 * MAXCNT ), NPROCS )         
            WRITE( IOUT, 94400 ) NLO,  NHI
            DO N = NLO, NHI
               IF( LPROCOUT( N ) ) THEN
                  BUF12( N ) = '     .TRUE., '
               ELSE
                  BUF12( N ) = '    .FALSE., '
               ENDIF
            ENDDO
            BUF12( NHI )( 12 : 12 ) = '/'  
            WRITE( IOUT, 94060 ) ( BUF12( N ), N = NLO, NHI )
         ENDDO
      ENDIF

      IF( N_IPR_SPC .GT. 0 ) THEN
         DO NPA = 1, N_IPR_SPC
            NSETS = ( ( NCGRID( NPA ) - 1 ) / ( 5 * MAXCNT ) ) + 1
            DO NS = 1, NSETS
               NLO = ( NS - 1 ) * ( 5 * MAXCNT ) + 1
               NHI = MIN( ( NS * 5 * MAXCNT ), NCGRID( NPA ) )         
               WRITE( IOUT, 94420 ) NPA, NLO, NHI
               DO N = 1,  NCGRID( NPA )
                  WRITE( BUF12( N ), 94100 ) SPCOEF( NPA,  N )
               ENDDO
               BUF12( NHI )( 12 : 12 ) = '/'
               WRITE( IOUT, 94060 ) ( BUF12( N ), N = NLO, NHI )
            ENDDO 
         ENDDO
      ENDIF

cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c  Write data statements for IRR variables
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      IF( LPARTIRR ) THEN
         WRITE( IOUT, 94000 )
         WRITE( IOUT, 94000 )
         WRITE( IOUT, 94000 ) CEES( 1 : 72 )
         WRITE( IOUT, 94160 ) 
         WRITE( IOUT, 94000 ) CEES( 1 : 72 )

         IF( NIRRVAR .GT. 0 ) THEN
            NSETS = ( ( NIRRVAR - 1 ) / ( 10 * MAXCNT ) ) + 1
            DO NS = 1, NSETS
               NLO = ( NS - 1 ) * ( 10 * MAXCNT ) + 1
               NHI = MIN( ( NS * 10 * MAXCNT ), NIRRVAR )         
               WRITE( IOUT, 94440 ) NLO, NHI
               DO NIRR = NLO, NHI
                  WRITE( BUF6( NIRR ), '( I5, '','' )' ) 
     &                                 NIRRRXNS( NIRR )
               ENDDO
               BUF6( NHI )( 6 : 6 ) = '/'
               WRITE( IOUT, 94040 ) ( BUF6( NIRR ), NIRR = NLO, NHI )
            ENDDO
         ENDIF     

         IF( NUMTEMPS .GT. 0 ) THEN
            NSETS = ( ( NUMTEMPS - 1 ) / ( 10 * MAXCNT ) ) + 1
            DO NS = 1, NSETS
               NLO = ( NS - 1 ) * ( 10 * MAXCNT ) + 1
               NHI = MIN( ( NS * 10 * MAXCNT ),  NUMTEMPS )         
               WRITE( IOUT, 94460 ) NLO, NHI
               DO NIRR = NLO, NHI
                  WRITE( BUF6( NIRR ), '( I5, '','' )' )
     &                                 TEMPTERMS( NIRR )
               ENDDO
               BUF6( NHI )( 6 : 6 ) = '/'
               WRITE( IOUT, 94040 ) ( BUF6( NIRR ), NIRR = NLO, NHI )
            ENDDO
         ENDIF     
 
         IF( NUMOUTPOS .GT. 0 ) THEN
            NSETS = ( ( NUMOUTPOS - 1 ) / ( 10 * MAXCNT ) ) + 1
            DO NS = 1, NSETS
               NLO = ( NS - 1 ) * ( 10 * MAXCNT ) + 1
               NHI = MIN(  ( NS * 10 * MAXCNT ),  NUMOUTPOS )         
               WRITE( IOUT, 94480 ) NLO, NHI
               DO NIRR = NLO, NHI
                  WRITE( BUF6( NIRR ), '( I5, '','' )' )
     &                                 TEMPOUTPOS( NIRR )
               ENDDO
               BUF6( NHI )( 6 : 6 ) = '/'
               WRITE( IOUT, 94040 ) ( BUF6( NIRR ), NIRR = NLO, NHI )
            ENDDO
         ENDIF 
             
         IF( NUMOUTNEG .GT. 0 ) THEN
            NSETS = ( ( NUMOUTNEG - 1 ) / ( 10 * MAXCNT ) ) + 1
            DO NS = 1, NSETS
               NLO = ( NS - 1 ) * ( 10 * MAXCNT ) + 1
               NHI = MIN( ( NS * 10 * MAXCNT ),  NUMOUTNEG )         
               WRITE( IOUT, 94500 ) NLO,  NHI
               DO NIRR = NLO, NHI
                  WRITE( BUF6( NIRR ), '( I5, '','' )' ) 
     &                                 TEMPOUTNEG( NIRR )
               ENDDO
               BUF6( NHI )( 6 : 6 ) = '/'
               WRITE( IOUT, 94040 ) ( BUF6( NIRR ), NIRR = NLO, NHI )
            ENDDO
         ENDIF 

         IF( NUMOUTIND .GT. 0 ) THEN
            NSETS = ( ( NUMOUTIND - 1 ) / ( 10 * MAXCNT ) ) + 1
            DO NS = 1, NSETS
               NLO = ( NS - 1 ) * ( 10 * MAXCNT ) + 1
               NHI = MIN( ( NS * 10 * MAXCNT ), NUMOUTIND )         
               WRITE( IOUT, 94520 ) NLO, NHI
               DO NIRR = NLO, NHI
                  WRITE( BUF6( NIRR ), '( I5, '','' )' ) 
     &                                 TEMPOUTIND( NIRR )
              ENDDO
               BUF6( NHI )( 6 : 6 ) = '/'
               WRITE( IOUT, 94040 ) ( BUF6( NIRR ), NIRR = NLO, NHI )
            ENDDO
         ENDIF 

         IF( NUMOUTPOS .GT. 0 ) THEN
            NSETS = ( ( NUMOUTPOS - 1 ) / ( 10 * MAXCNT ) ) + 1
            DO NS = 1, NSETS
               NLO = ( NS - 1 ) * ( 10 * MAXCNT ) + 1
               NHI = MIN( ( NS * 10 * MAXCNT ), NUMOUTPOS )         
               WRITE( IOUT, 94540 ) NLO, NHI
               DO NIRR = NLO, NHI
                  WRITE( BUF6( NIRR ), '( I5, '','' )' )
     &                                 INDXOUTPOS( NIRR )
               ENDDO
               BUF6( NHI )( 6 : 6 ) = '/'
               WRITE( IOUT, 94040 ) ( BUF6( NIRR ), NIRR = NLO, NHI )
            ENDDO
         ENDIF 

         IF( NUMOUTNEG .GT. 0 ) THEN
            NSETS = ( ( NUMOUTNEG - 1 ) / ( 10 * MAXCNT ) ) + 1
            DO NS = 1, NSETS
               NLO = ( NS - 1 ) * ( 10 * MAXCNT ) + 1
               NHI = MIN( ( NS * 10 * MAXCNT ), NUMOUTNEG )       
               WRITE( IOUT, 94560 ) NLO, NHI
               DO NIRR = NLO, NHI
                  WRITE( BUF6( NIRR ), '( I5, '','' )' ) 
     &                                 INDXOUTNEG( NIRR )
              ENDDO
               BUF6( NHI )( 6 : 6 ) = '/'
               WRITE( IOUT, 94040 ) ( BUF6( NIRR ), NIRR = NLO, NHI )
            ENDDO
         ENDIF 

         IF( NUMOUTIND .GT. 0 ) THEN
            NSETS = ( ( NUMOUTIND - 1 ) / ( 10 * MAXCNT ) ) + 1
            DO NS = 1, NSETS
               NLO = ( NS - 1 ) * ( 10 * MAXCNT ) + 1
               NHI = MIN( ( NS * 10 * MAXCNT ), NUMOUTIND )       
               WRITE( IOUT, 94580 ) NLO, NHI
               DO NIRR = NLO, NHI
                  WRITE( BUF6( NIRR ), '( I5, '','' )' )
     &                                 INDXOUTIND( NIRR )
               ENDDO
               BUF6( NHI )( 6 : 6 ) = '/'
               WRITE( IOUT, 94040 ) ( BUF6( NIRR ), NIRR = NLO, NHI )
            ENDDO
         ENDIF

         IF( NIRRVAR .GT. 0 ) THEN
            DO NIRR = 1, NIRRVAR
               IF( NIRRRXNS( NIRR ) .GT. 0 ) THEN
                  NSETS = ( ( NIRRRXNS( NIRR ) - 1 ) / ( 10 * MAXCNT ) ) + 1
                  DO NS = 1,  NSETS
                     NLO = ( NS - 1 ) * ( 10 * MAXCNT ) + 1
                     NHI = MIN( ( NS * 10 * MAXCNT ), NIRRRXNS( NIRR ) )         
                     WRITE( IOUT, 94600 ) NIRR, NLO, NHI
                     DO N = NLO, NHI
                        WRITE( BUF6( N ), 94080 ) IRRRXN( NIRR, N )
                     ENDDO
                     BUF6( NHI )( 6 : 6 ) = '/'
                     WRITE( IOUT, 94040 ) ( BUF6( N ), N = NLO, NHI )
                  ENDDO
               ENDIF 
            ENDDO
         ENDIF

         IF( NUMTEMPS .GT. 0 ) THEN
            DO NIRR= 1, NUMTEMPS
               IF( TEMPTERMS( NIRR ) .GT. 0 ) THEN
                  NSETS = ( ( TEMPTERMS( NIRR ) - 1 ) / ( 10 * MAXCNT ) ) + 1
                  DO NS = 1, NSETS
                     NLO = ( NS - 1 ) * ( 10 * MAXCNT ) + 1
                     NHI = MIN( ( NS * 10 * MAXCNT ), TEMPTERMS( NIRR ) )         
                     WRITE( IOUT, 94620 ) NIRR,  NLO,  NHI
                     DO N = NLO, NHI
                        WRITE( BUF6( N ), 94080 ) TEMPRXN( NIRR, N )
                     ENDDO
                     BUF6( NHI )( 6 : 6 ) = '/'
                     WRITE( IOUT, 94040 ) ( BUF6( N ), N = NLO,  NHI ) 
                  ENDDO
               ENDIF
            ENDDO
         ENDIF

         IF( NUMOUTPOS .GT. 0 ) THEN
            NSETS = ( ( NUMOUTPOS - 1 ) / ( 5 * MAXCNT ) ) + 1
            DO NS = 1, NSETS
               NLO = ( NS - 1 ) * ( 5 * MAXCNT ) + 1
               NHI = MIN( ( NS * 5 * MAXCNT ), NUMOUTPOS )         
               WRITE( IOUT, 94640 ) NLO, NHI
               DO NIRR = NLO, NHI
                  WRITE( BUF12( NIRR ), 94100 ) COEFOUTPOS( NIRR )
               ENDDO
               BUF12( NHI )( 12 : 12 ) = '/'
               WRITE( IOUT, 94060 ) ( BUF12( NIRR ), NIRR = NLO, NHI )
            ENDDO
         ENDIF

         IF( NUMOUTNEG .GT. 0 ) THEN
            NSETS = ( ( NUMOUTNEG - 1 ) / ( 5 * MAXCNT ) ) + 1
            DO NS = 1, NSETS
               NLO = ( NS - 1 ) * ( 5 * MAXCNT ) + 1
               NHI = MIN( ( NS * 5 * MAXCNT ), NUMOUTNEG )         
               WRITE( IOUT, 94660 ) NLO,  NHI
               DO NIRR = NLO, NHI
                  WRITE( BUF12( NIRR ), 94100 ) COEFOUTNEG( NIRR )
               ENDDO
               BUF12( NHI )( 12 : 12 ) = '/'
               WRITE( IOUT, 94060 ) ( BUF12( NIRR ), NIRR = NLO, NHI )
            ENDDO
         ENDIF

         IF( NUMOUTIND .GT. 0 ) THEN
            NSETS = ( ( NUMOUTIND - 1 ) / ( 5 * MAXCNT ) ) + 1
            DO NS = 1, NSETS
               NLO = ( NS - 1 ) * ( 5 * MAXCNT ) + 1
               NHI = MIN( ( NS * 5 * MAXCNT ), NUMOUTIND )         
               WRITE( IOUT, 94680 ) NLO,  NHI
               DO NIRR = NLO, NHI
                 WRITE( BUF12( NIRR ), 94100 ) COEFOUTIND( NIRR )
               ENDDO
               BUF12( NHI )( 12 : 12 ) = '/'
               WRITE( IOUT, 94060 ) ( BUF12( NIRR ), NIRR = NLO, NHI )
            ENDDO
         ENDIF

         IF( NUMTEMPS .GT. 0 ) THEN
            DO NIRR= 1, NUMTEMPS
               IF( TEMPTERMS( NIRR ) .GT. 0 ) THEN
                  NSETS = ( ( TEMPTERMS( NIRR ) - 1 ) / ( 5 * MAXCNT ) ) + 1
                  DO NS = 1, NSETS
                     NLO = ( NS - 1 ) * ( 5 * MAXCNT ) + 1
                     NHI = MIN(  ( NS * 5 * MAXCNT ), TEMPTERMS( NIRR ) )         
                     WRITE( IOUT, 94700 ) NIRR, NLO, NHI
                     DO N = NLO, NHI
                        WRITE( BUF12( N ), 94100 ) TEMPCOEF( NIRR, N )
                     ENDDO
                     BUF12( NHI )( 12 : 12 ) = '/'
                     WRITE( IOUT, 94060 ) ( BUF12( N ), N = NLO, NHI )
                 ENDDO
               ENDIF 
            ENDDO
         ENDIF

         IF( NIRRVAR .GT. 0 ) THEN
            DO NIRR = 1, NIRRVAR
               IF( NIRRRXNS( NIRR ) .GT. 0 ) THEN
                  NSETS = ( ( NIRRRXNS( NIRR ) - 1 ) / ( 5 * MAXCNT ) ) + 1
                  DO NS = 1, NSETS
                     NLO = ( NS - 1 ) * ( 5 * MAXCNT ) + 1
                     NHI = MIN( ( NS * 5 * MAXCNT ), NIRRRXNS( NIRR ) )         
                     WRITE( IOUT, 94720 ) NIRR,  NLO,  NHI
                     DO N = NLO, NHI
                        WRITE( BUF12( N ), 94100 ) IRRCOEF( NIRR, N )
                     ENDDO
                     BUF12( NHI )( 12 : 12 ) = '/'
                     WRITE( IOUT, 94060 ) ( BUF12( N ), N = NLO, NHI )
                  ENDDO
               ENDIF 
            ENDDO
         ENDIF
      ENDIF

  999 CONTINUE

      WRITE( IOUT, 94000 )
      WRITE( IOUT, 94000 )
      WRITE( IOUT, 94000 )
      LINOUT = DELIM
      LINOUT( 14 : 58 ) = ' End of Process Analysis DATA Include File '
      WRITE( IOUT, 94000 ) LINOUT
      CLOSE( IOUT )

      RETURN 
     
C*********************** FORMAT STATEMENTS *****************************

94000 FORMAT( A )
94020 FORMAT( 5X, '&  ', 3A20 )
94040 FORMAT( 5X, '&  ', 10A6 )
94060 FORMAT( 5X, '&  ', 5A12 )
94080 FORMAT( I5, ',' )
94100 FORMAT( F11.4, ',' )
94110 FORMAT( 'c  Neither IPR nor IRR calculations are being done.' /
     &        'c  Additional data are not required' )
94120 FORMAT( 'c  Output file descriptor data' )
94140 FORMAT( 'c  IPR data' )
94160 FORMAT( 'c  IRR data' )
94200 FORMAT( / 6X, 'INTEGER TERM' )
94220 FORMAT( //6X, 'DATA ( IPRNAME( TERM ), TERM = ', I4, ' , ',
     &               I4, ' ) /' )
94240 FORMAT( //6X, 'DATA ( IPRDESC( TERM ), TERM = ', I4, ' , ',
     &               I4, ' ) /' )
94260 FORMAT( //6X, 'DATA ( IRRNAME( TERM ), TERM = ', I4, ' , ',
     &               I4, ' ) /' )
94280 FORMAT( //6X, 'DATA ( IRRDESC( TERM ), TERM = ', I4, ' , ',
     &               I4, ' ) /' )
94290 FORMAT( / 6X, 'DATA ( PROCNAME( TERM ), TERM = ', I4, ' , ',
     &               I4, ' ) /' )
94300 FORMAT( //6X, 'DATA ( NCGRID( TERM ), TERM = ', I4, ' , ',
     &               I4, ' ) /' )
94320 FORMAT( //6X, 'DATA ( SV2GRD( TERM ), TERM = ', I4, ' , ',
     &               I4, ' ) /' )
94340 FORMAT( //6X, 'DATA ( IPROUT( ', I3, ' , TERM ), TERM = ',
     &               I4, ' , ', I4,  ' ) /' )
94360 FORMAT( //6X, 'DATA ( IPR2GRD( ', I3, ' , TERM ), TERM = ',
     &               I4, ' , ', I4, ' ) /' )
94380 FORMAT( //6X, 'DATA ( IPR2SAV( ', I3, ' , TERM ), TERM = ',
     &               I4, ' , ', I4, ' ) /' )
94400 FORMAT( //6X, 'DATA ( LPROCOUT( TERM ), TERM = ', I4, ' , ',
     &               I4, ' ) /' )
94420 FORMAT( //6X, 'DATA ( SPCOEF( ', I3, ' , TERM ), TERM = ',
     &               I4, ' , ', I4,  ' ) /' )
94440 FORMAT( / 6X, 'DATA ( NIRRRXNS( TERM ), TERM = ', I4, ' , ',
     &               I4, ' ) /' )
94460 FORMAT( //6X, 'DATA ( TEMPTERMS( TERM ), TERM = ', I4, ' , ',
     &               I4, ' ) /' )
94480 FORMAT( //6X, 'DATA ( TEMPOUTPOS( TERM ), TERM = ', I4, ' , ',
     &               I4, ' ) /' )
94500 FORMAT( //6X, 'DATA ( TEMPOUTNEG( TERM ), TERM = ', I4, ' , ',
     &               I4, ' ) /' )
94520 FORMAT( //6X, 'DATA ( TEMPOUTIND( TERM ), TERM = ', I4, ' , ',
     &               I4, ' ) /' )
94540 FORMAT( //6X, 'DATA ( INDXOUTPOS( TERM ), TERM = ', I4, ' , ',
     &               I4, ' ) /' )
94560 FORMAT( //6X, 'DATA ( INDXOUTNEG( TERM ), TERM = ', I4, ' , ',
     &               I4, ' ) /' )
94580 FORMAT( //6X, 'DATA ( INDXOUTIND( TERM ), TERM = ', I4, ' , ',
     &               I4, ' ) /' )
94600 FORMAT( //6X, 'DATA ( IRRRXN( ', I3, ' , TERM ), TERM = ',
     &               I4, ' , ', I4, ' ) /' )
94620 FORMAT( //6X, 'DATA ( TEMPRXN( ', I3, ' , TERM ), TERM = ',
     &               I4, ' ,  ', I4, ' ) /' )
94640 FORMAT( //6X, 'DATA ( COEFOUTPOS( TERM ), TERM = ', I4, ' , ',
     &               I4, ' ) /' )
94660 FORMAT( //6X, 'DATA ( COEFOUTNEG( TERM ), TERM = ', I4, ' , ',
     &               I4, ' ) /' )
94680 FORMAT( //6X, 'DATA ( COEFOUTIND( TERM ), TERM = ', I4, ' , ',
     &               I4, ' ) /' )
94700 FORMAT( //6X, 'DATA ( TEMPCOEF( ', I3, ' , TERM ), TERM =  ',
     &               I4, ' , ', I4,  ' ) /' )
94720 FORMAT( //6X, 'DATA ( IRRCOEF( ', I3, ' , TERM ), TERM =  ',
     &               I4, ' , ', I4, ' ) /' )
      END
@


1.1.1.1
log
@CMAQv4_5_1 release
@
text
@@
