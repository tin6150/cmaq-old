head     1.1;
branch   1.1.1;
access   ;
symbols  CMAQv4_5_1:1.1.1.1 ASMD:1.1.1;
locks    ; strict;
comment  @c @;


1.1
date     2006.03.13.19.28.41;  author sjr;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2006.03.13.19.28.41;  author sjr;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@
C***************************************************************************
C  Significant portions of Models-3/CMAQ software were developed by        *
C  Government employees and under a United States Government contract.     *
C  Portions of the software were also based on information from non-       *
C  Federal sources, including software developed by research institutions  *
C  through jointly funded cooperative agreements. These research institu-  *
C  tions have given the Government permission to use, prepare derivative   *
C  works, and distribute copies of their work to the public within the     *
C  Models-3/CMAQ software release and to permit others to do so. EPA       *
C  therefore grants similar permissions for use of Models-3/CMAQ software, *
C  but users are requested to provide copies of derivative works to the    *
C  Government without re-strictions as to use by others.  Users are        *
C  responsible for acquiring their own copies of commercial software       *
C  associated with the Models-3/CMAQ release and are also responsible      *
C  to those vendors for complying with any of the vendors' copyright and   *
C  license restrictions. In particular users must obtain a Runtime license *
C  for Orbix from IONA Technologies for each CPU used in Models-3/CMAQ     *
C  applications.                                                           *
C                                                                          *
C  Portions of I/O API, PAVE, and the model builder are Copyrighted        *
C  1993-1997 by MCNC--North Carolina Supercomputing Center and are         *
C  used with their permissions subject to the above restrictions.          *
C***************************************************************************

C RCS file, release, date & time of last delta, author, state, [and locker]
C $Header: /project/work/rep/PROCAN/src/driver/pa/pa_getrxnsum.F,v 1.3 1998/06/19 11:38:48 yoj Exp $ 

C what(1) key, module and SID; SCCS file; date and time of last delta:
C @@(#)pa_getrxnsum.F	1.1 /project/mod3/PROCAN/src/driver/pa/SCCS/s.pa_getrxnsum.F 04 Jul 1997 14:13:35

      SUBROUTINE GETRXNSUM

C***********************************************************************
C
C  FUNCTION: To process the DEFINE RXNSUM command 
C
C  PRECONDITIONS: None
C 
C  KEY SUBROUTINES/FUNCTIONS CALLED: GETCHR
C                                    GETWORD
C                                    GETCOEF
C                                    GETLABEL
C
C  REVISION HISTORY: Prototype created by Jerry Gipson, August, 1996
C                    Modified May, 1997 by Jerry Gipson to be consistent
C                      with beta CTM
C                    Modified Sept, 1997 by Jerry Gipson to be consistent
C                      with targeted CTM
C
C***********************************************************************
      IMPLICIT NONE
      
C..INCLUDES: 
      INCLUDE SUBST_IODECL 
      INCLUDE 'PA_GLOBAL.EXT'
      INCLUDE 'PA_PARSE.EXT'
      INCLUDE 'PA_VARS.EXT'

C..ARGUMENTS: None
                                        
C..PARAMETERS: None

C..EXTERNAL FUNCTIONS: None

C..SAVED LOCAL VARIABLES: None

C..SCRATCH LOCAL VARIABLES:
      INTEGER TERMNUM   ! Counter for number of terms in sum
      
C***********************************************************************

cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c Get assigned name and check for = sign delimiter
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      NRXSUMS = NRXSUMS + 1
      IF( NRXSUMS .GT. MAXRXNSUM )  THEN
         EXITSTAT = 2
         WRITE( MSG, 94000 )  
         CALL M3MESG( MSG ) 
         WRITE( MSG, 94500 )  LINNUM,  INBUF
         CALL M3MESG( MSG ) 
         WRITE( MSG, 94020 )  MAXRXNSUM
         CALL M3MESG( MSG ) 
         CALL M3EXIT( 'GETRXNSUM',  IZERO,  IZERO, ' ', EXITSTAT ) 
      ENDIF

      TERMNUM = 0
      CALL GETWORD
      RXSUMNAME( NRXSUMS )  = WORD

      IF( CHR .NE. '=' )  THEN
         WRITE( MSG, 94040 )  
         CALL M3MESG( MSG ) 
         WRITE( MSG, 94500 )  LINNUM,  INBUF
         CALL M3MESG( MSG ) 
         WRITE( MSG, 94520 )  CHR
         CALL M3MESG( MSG ) 
         CALL M3EXIT( 'GETRXNSUM',  IZERO,  IZERO, ' ', EXITSTAT ) 
      ELSE
         CALL GETCHR
      ENDIF

cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c Top of loop for getting all terms and their coefficients
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
   20 CONTINUE
      TERMNUM = TERMNUM + 1

      IF( TERMNUM .GT. MAXRXTERMS )  THEN
         EXITSTAT = 2
         WRITE( MSG, 94060 )  
         CALL M3MESG( MSG ) 
         WRITE( MSG, 94500 )  LINNUM,  INBUF
         CALL M3MESG( MSG ) 
         WRITE( MSG, 94080 )  MAXRXTERMS
         CALL M3MESG( MSG ) 
         CALL M3EXIT( 'GETRXNSUM',  IZERO,  IZERO, ' ', EXITSTAT ) 
      ENDIF

c..Get coefficient for the reaction
      CALL GETCOEF( RXNSC( NRXSUMS, TERMNUM )  ) 

c..Get the reaction label 
      IF( CHR .EQ. '<' )  THEN
         CALL GETLABEL
         RXSUMLBL( NRXSUMS, TERMNUM )  = LABEL
      ELSE
         EXITSTAT = 2
         WRITE( MSG, 94100 )  
         CALL M3MESG( MSG ) 
         WRITE( MSG, 94500 )  LINNUM,  INBUF
         CALL M3MESG( MSG ) 
         WRITE( MSG, 94520 )  CHR
         CALL M3MESG( MSG ) 
         CALL M3EXIT( 'GETRXNSUM',  IZERO,  IZERO, ' ', EXITSTAT ) 
      ENDIF

c..check for more terms or end delimiter         
      IF( CHR .EQ. '+' .OR. CHR .EQ. '-' )  THEN
         GO TO 20
      ELSEIF( CHR .EQ. ';' )  THEN
         NRXTERMS( NRXSUMS )  = TERMNUM
         CALL GETCHR
         RETURN
      ELSE
         WRITE( MSG, 94120 )  
         CALL M3MESG( MSG ) 
         WRITE( MSG, 94500 )  LINNUM,  INBUF
         CALL M3MESG( MSG ) 
         WRITE( MSG, 94520 )  CHR
         CALL M3MESG( MSG ) 
         CALL M3EXIT( 'GETRXNSUM',  IZERO,  IZERO, ' ', EXITSTAT ) 
      ENDIF
      
C*********************** FORMAT STATEMENTS *****************************

94000 FORMAT( 'ERROR: Maximum number of RXNSUMs exceeded' ) 
94020 FORMAT( '       Modify PARAMETER ( MAXRXNSUM =', I3, ' )', 
     &              ' or decrease the number of RXNSUMs' ) 
94040 FORMAT( 'ERROR: Equal sign expected after RXNSUM name' ) 
94060 FORMAT( 'ERROR: Maximum number of terms in RXNSUM exceeded' ) 
94080 FORMAT( '       Modify PARAMETER ( MAXRXTERMS =', I3, ' )', 
     &              ' or decrease the number of terms in RXNSUM' ) 
94100 FORMAT( 'ERROR: Expecting a reaction label starting with a <' ) 
94120 FORMAT( 'ERROR: Expecting a + - or ; after a reaction label' ) 

94500 FORMAT( '       Line No. ', I4, ':', A ) 
94520 FORMAT( '       Character found:', A ) 




      END
@


1.1.1.1
log
@CMAQv4_5_1 release
@
text
@@
