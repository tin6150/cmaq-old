head     1.1;
branch   1.1.1;
access   ;
symbols  CMAQv4_5_1:1.1.1.1 ASMD:1.1.1;
locks    ; strict;
comment  @c @;


1.1
date     2006.03.13.19.28.41;  author sjr;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2006.03.13.19.28.41;  author sjr;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@
C***************************************************************************
C  Significant portions of Models-3/CMAQ software were developed by        *
C  Government employees and under a United States Government contract.     *
C  Portions of the software were also based on information from non-       *
C  Federal sources, including software developed by research institutions  *
C  through jointly funded cooperative agreements. These research institu-  *
C  tions have given the Government permission to use, prepare derivative   *
C  works, and distribute copies of their work to the public within the     *
C  Models-3/CMAQ software release and to permit others to do so. EPA       *
C  therefore grants similar permissions for use of Models-3/CMAQ software, *
C  but users are requested to provide copies of derivative works to the    *
C  Government without re-strictions as to use by others.  Users are        *
C  responsible for acquiring their own copies of commercial software       *
C  associated with the Models-3/CMAQ release and are also responsible      *
C  to those vendors for complying with any of the vendors' copyright and   *
C  license restrictions. In particular users must obtain a Runtime license *
C  for Orbix from IONA Technologies for each CPU used in Models-3/CMAQ     *
C  applications.                                                           *
C                                                                          *
C  Portions of I/O API, PAVE, and the model builder are Copyrighted        *
C  1993-1997 by MCNC--North Carolina Supercomputing Center and are         *
C  used with their permissions subject to the above restrictions.          *
C***************************************************************************

C RCS file, release, date & time of last delta, author, state, [and locker]
C $Header: /project/work/rep/PROCAN/src/driver/pa/pa_getword.F,v 1.3 1998/06/19 11:38:49 yoj Exp $ 

C what(1) key, module and SID; SCCS file; date and time of last delta:
C @@(#)pa_getword.F	1.1 /project/mod3/PROCAN/src/driver/pa/SCCS/s.pa_getword.F 04 Jul 1997 14:13:36

      SUBROUTINE GETWORD

C***********************************************************************
C
C  FUNCTION: GETWORD gets the next word from the input buffer starting
C            with the current character; the word can be any length,
C            but only the first sixteen characters are retained.  The
C            first character must be alphabetic.
C
C  PRECONDITIONS: None
C 
C  KEY SUBROUTINES/FUNCTIONS CALLED: EATCOM
C                                    GETCHR
C                                    RDLINE
C
C  REVISION HISTORY: Prototype created by Jerry Gipson, August, 1996
C                    Modified May, 1997 by Jerry Gipson to be consistent
C                      with beta CTM
C                    Modified Sept, 1997 by Jerry Gipson to be consistent
C                      with targeted CTM
C
C***********************************************************************
      IMPLICIT NONE
      
C..INCLUDES:
      INCLUDE 'PA_PARSE.EXT' 
      
C..ARGUMENTS: None
                                        
C..PARAMETERS: None

C..EXTERNAL FUNCTIONS: None

C..SAVED LOCAL VARIABLES: None 

C..SCRATCH LOCAL VARIABLES:
      CHARACTER*( BUFLEN )  SAVBUF  ! Saved input buffer

      INTEGER START     ! Starting position in input buffer
      INTEGER LENGTH    ! Length of word
         
C***********************************************************************

c..Setup and make sure the first character is alphabetic
      LENGTH = 0
      START  = LPOINT
      SAVBUF = INBUF
      IF( ( CHR .LT. 'A' .OR. CHR .GT. 'Z' ) .AND. 
     &    ( CHR .LT. 'a' .OR. CHR .GT. 'z' ) ) THEN
         EXITSTAT = 2
         WRITE( MSG, 94000 ) 
         CALL M3MESG( MSG )
         WRITE( MSG, 94020 ) LINNUM, INBUF 
         CALL M3MESG( MSG )
         WRITE( MSG, 94040 ) CHR 
         CALL M3MESG( MSG )
         CALL M3EXIT( 'GETWORD', IZERO, IZERO, ' ', EXITSTAT )
      ENDIF

c..Get the remaining characters; stop if a word spans a line
   20 CONTINUE
      LENGTH = LENGTH + 1
      LPOINT = LPOINT + 1

c..Get the next line if necessary (word wrap not allowed)
      IF( LPOINT .GT. IEOL ) THEN
         CALL RDLINE
         CALL GETCHR
         CHR = INBUF( LPOINT : LPOINT )
         IF( ( CHR .GE. 'A' .AND. CHR .LE. 'Z' ) .OR. 
     &       ( CHR .GE. 'a' .AND. CHR .LE. 'z' ) .OR.
     &       ( CHR .EQ. ':' ) .OR. ( CHR .EQ. '_' ) )THEN
            EXITSTAT = 2
            WRITE( MSG, 94060 ) 
            CALL M3MESG( MSG )
            WRITE( MSG, 94020 ) LINNUM, SAVBUF 
            CALL M3EXIT( 'GETWORD', IZERO, IZERO, ' ', EXITSTAT )
         ELSE
            GO TO 40  ! Word does not wrap around line
         ENDIF
      ENDIF

c..Include all characters in word that are valid; stop reading on an 
c..ivalid character
      CHR = SAVBUF( LPOINT : LPOINT )
      IF( CHR .GE. 'A' .AND. CHR .LE. 'Z' ) GO TO 20
      IF( CHR .GE. 'a' .AND. CHR .LE. 'z' ) GO TO 20      
      IF( CHR .GE. '0' .AND. CHR .LE. '9' ) GO TO 20
      IF( CHR .EQ. ':' ) GO TO 20
      IF( CHR .EQ. '_' ) GO TO 20
      IF( CHR .EQ. '('  .OR. CHR .EQ. '{' ) THEN 
         LENGTH = LENGTH - 1
         CALL EATCOM
         GO TO 20
      ENDIF
      
c..Truncate the word and get the next character if necessary
   40 CONTINUE
      LENGTH = MIN( LENGTH, WRDLEN )
      WORD = SAVBUF( START : START + LENGTH - 1 )
      IF( CHR .EQ. ' ' ) CALL GETCHR

      RETURN
      
      
C*********************** FORMAT STATEMENTS *****************************

      
      
94000 FORMAT( 'ERROR: The first character of a word must be alphabetic' )
94020 FORMAT( '   Line No. ', I4, ': ', A )
94040 FORMAT( '   First character: ', A )
94060 FORMAT( 'ERROR: A word cannot span two lines' )
      END
   
@


1.1.1.1
log
@CMAQv4_5_1 release
@
text
@@
