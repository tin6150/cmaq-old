head     1.1;
branch   1.1.1;
access   ;
symbols  CMAQv4_5_1:1.1.1.1 ASMD:1.1.1;
locks    ; strict;
comment  @c @;


1.1
date     2006.03.13.19.36.07;  author sjr;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2006.03.13.19.36.07;  author sjr;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@C***********************************************************************
C   Portions of Models-3/CMAQ software were developed or based on      *
C   information from various groups: Federal Government employees,     *
C   contractors working on a United States Government contract, and    *
C   non-Federal sources (including research institutions).  These      *
C   research institutions have given the Government permission to      *
C   use, prepare derivative works, and distribute copies of their      *
C   work in Models-3/CMAQ to the public and to permit others to do     *
C   so.  EPA therefore grants similar permissions for use of the       *
C   Models-3/CMAQ software, but users are requested to provide copies  *
C   of derivative works to the Government without restrictions as to   *
C   use by others.  Users are responsible for acquiring their own      *
C   copies of commercial software associated with Models-3/CMAQ and    *
C   for complying with vendor requirements.  Software copyrights by    *
C   the MCNC Environmental Modeling Center are used with their         *
C   permissions subject to the above restrictions.                     *
C***********************************************************************

C RCS file, release, date & time of last delta, author, state, [and locker]
C $Header: /project/work/rep/TOOLS/src/combine/module_file.F,v 1.1 2005/08/16 18:38:20 showard Exp $

C***********************************************************************
C
C  MODULE:  sets up file data
C             
C***********************************************************************
      MODULE M3FILES

      INTEGER N_M3FILES                   ! No. of input Models-3 files

      INTEGER, PARAMETER :: MXM3FLS = 9   ! Max no. of input

      CHARACTER*16 M3FILENAME( MXM3FLS )  ! filenames

      Logical convert(MXM3FLS)            ! convert flags

      INTEGER TSTEP
      INTEGER NROWS
      INTEGER NCOLS
      INTEGER NLAYS
      REAL    XCELL
      REAL    YCELL
      REAL    XORIG
      REAL    YORIG 

      CONTAINS

C***********************************************************************
C   open input ioapi files
C***********************************************************************
         SUBROUTINE OPEN_M3FILES

         IMPLICIT NONE 

         ! INCLUDES:  
         INCLUDE SUBST_IOPARMS     ! IOAPI parameters
         INCLUDE SUBST_IOFDESC     ! IOAPI file description
         INCLUDE SUBST_IODECL      ! IOAPI declarations
      

         ! LOCAL VARIABLES:
         INTEGER   n                  ! Loop index
         INTEGER   status             ! Status code
         Character*(256) fname

         LOGICAL valid
         LOGICAL function canConvert


         !cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
         ! Determine the number of input CTM conc files that need to be read
         !cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

         N_M3FILES = 0
         M3FILENAME(1) = 'INFILE1'
         if( .NOT. OPEN3( M3FILENAME(1), 1, 'combine') ) then
           Write(*,'(''**Error** Could not open input file'',
     &               '' for "INFILE1"'')')
           return
           endif

         if( .NOT. DESC3( M3FILENAME(1) ) ) then
           Write( *, '(''**Error** While running DESC3 on '',
     &                 A)' ) M3FILENAME(1)
           return
           endif

         N_M3FILES = 1

         ! save file parameters
         TSTEP = TSTEP3D
         NROWS = NROWS3D
         NCOLS = NCOLS3D
         NLAYS = NLAYS3D
         XCELL = XCELL3D
         YCELL = YCELL3D
         XORIG = XORIG3D
         YORIG = YORIG3D
      
         ! try to open files (2-MXM3FLS) 

         DO n = 2, MXM3FLS
           write(M3FILENAME(n), '( ''INFILE'', I1 )' ) n

           Call NAMEVAL( M3FILENAME(n), fname )
           INQUIRE(file=fname, exist=valid)
           if( .not.valid ) EXIT

           if( .NOT. OPEN3( M3FILENAME(n), 1, 'COMBINE') ) EXIT

           if( .NOT. DESC3( M3FILENAME(n) ) ) then
             Write( *, '(''**Error** While running DESC3 on '',A)' )
     &             M3FILENAME(n)
             exit
             endif               

           ! verify domain parameters
           valid = .true.
           if( TSTEP.ne.TSTEP3D ) valid = .false.  ! time step
           if( XCELL.ne.XCELL3D ) valid = .false.  ! width of cell
           if( YCELL.ne.YCELL3D ) valid = .false.  ! height of cell
           if( .NOT.valid ) then
             Write( *, '(''**Error** Inconsistence file domain for ''
     &             ,A)' ) M3FILENAME(n)
             N_M3FILES = 0
             return
             endif 

           ! check if file needs to be converted
           convert(N) = .false.
           if( NROWS.ne.NROWS3D ) convert(N) = .true.
           if( NCOLS.ne.NCOLS3D ) convert(N) = .true.
           if( XORIG.ne.XORIG3D ) convert(N) = .true.
           if( YORIG.ne.YORIG3D ) convert(N) = .true.

           ! check if file can be converted
           if( convert(N) .and. (.NOT.canConvert()) ) then
             Write( *, '(''**Error** Inconsistence file domain for ''
     &             ,A)' ) M3FILENAME(n)
             N_M3FILES = 0
             return
             endif
         
           Write(*,'('' file '',a,'' needs converion:'',L)') trim(M3FILENAME(n)), convert(N)

           N_M3FILES = N_M3FILES +1
           enddo
 
         ! get file description for M3FILENAME(1)
         if( .NOT. DESC3( M3FILENAME(1) ) ) then
           Write( *, '(''**Error** While running DESC3 on '',A)' )
     &            M3FILENAME(1)
           N_M3FILES = 0
           return
           endif
             
         return

         END SUBROUTINE OPEN_M3FILES

C***********************************************************************
C   check if domain grid is a subgrid of current file description
C***********************************************************************
         Logical Function canConvert() result( pass )

         IMPLICIT NONE 

         ! INCLUDES:  
         INCLUDE SUBST_IOPARMS     ! IOAPI parameters
         INCLUDE SUBST_IOFDESC     ! IOAPI file description
         INCLUDE SUBST_IODECL      ! IOAPI declarations
      
         Real xdiff, ydiff
         Integer xoffset, yoffset 


         pass = .false.
         
         ! find origin different
         xdiff = XORIG - XORIG3D
         ydiff = YORIG - YORIG3D

         ! check lower limits
         if( xdiff.lt.0.0 ) return 
         if( ydiff.lt.0.0 ) return

         ! check upper limits
         if( (XORIG + NCOLS*XCELL) .gt. (XORIG3D + NCOLS3D*XCELL3D) ) return
         if( (YORIG + NROWS*YCELL) .gt. (YORIG3D + NROWS3D*YCELL3D) ) return

         ! compute row and column offsets that grid lies on grid line
         xoffset = xdiff / XCELL3D
         yoffset = ydiff / YCELL3D

         ! check that offsets lies on grid line
         if( int(xoffset*XCELL3D) .ne. int(xdiff) ) return
         if( int(yoffset*YCELL3D) .ne. int(ydiff) ) return

         pass = .true.
         return       

         END FUNCTION canConvert 

C***********************************************************************
C   routine to read species values from file
C***********************************************************************
         SUBROUTINE ReadValues( fileName, specName, ilayer, idate, itime,
     &                          isize, specValue, status)

         IMPLICIT NONE 

         ! INCLUDES:  
         INCLUDE SUBST_IOPARMS     ! IOAPI parameters
         INCLUDE SUBST_IOFDESC     ! IOAPI file description
         INCLUDE SUBST_IODECL      ! IOAPI declarations
      
         ! argument variables
         Character*(*) fileName
         Character*(*) specName
         Integer ilayer, idate, itime, isize, status
         Real specValue(isize)

         ! local variables
         Integer fileNo
         Integer colOffset, rowOffset
         Real, Allocatable :: values(:,:,:)
         Integer lay1, lay2
         Integer k, c, r, l


         ! read file number from fileName
         read(fileName,'(6x,i1)') fileNo

         ! if no conversion needed, read the values directly
         if( .NOT.convert(fileNo) ) then

           if(.NOT.READ3( fileName, specName, ilayer, idate,
     &                  itime, specValue)) status = -1 
           return
           endif


         ! read values from file and convert to specValue 

         ! get file description
         if( .NOT.DESC3( fileName ) ) then
           status = -1
           return
           endif 
        
         ! determine number of layers to read 
         lay1 = NLAYS3D
         if(ilayer.gt.0) lay1 = 1

         ! allocate values array 
         Allocate ( values(NCOLS3D, NROWS3D, lay1) )
               
         ! read values from super file
         if(.NOT.READ3( fileName, specName, ilayer, idate,
     &                 itime, values)) then 
           status = -1
           return
           endif 

         ! compute column and row offsets
         colOffset = (XORIG - XORIG3D) / XCELL3D
         rowOffset = (YORIG - YORIG3D) / YCELL3D

         ! compute starting and ending layers to copy
         lay1 = 1
         lay2 = NLAYS
         if( ilayer.gt.0 ) then
           lay1 = 1
           lay2 = 1
           endif  

         ! copy values array to specValue array
         k = 0
         do l=lay1,lay2
           do r=1,NROWS
             do c=1,NCOLS
               k = k+1
               specValue(k) = values( c+colOffset, r+rowOffset, l)
               enddo
             enddo
           enddo

         Deallocate( values )
         Return 

         END SUBROUTINE ReadValues
      
      END MODULE M3FILES
@


1.1.1.1
log
@CMAQv4_5_1 release
@
text
@@
