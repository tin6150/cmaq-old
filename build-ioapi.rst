# vim: tabstop=4 noexpandtab

my notes on building ioapi, a lib needed by cmaq

2019.0704

**>> refer to doc/IOAPI.txt <<**


PLAN
----

download source, checkin to cmaq git repo
make
copy resulting binary to rel[ease] dir in /global/home/groups-sw/pc_adjoint/Tin_Ho/CMAS4.5.1/rel 

cmaq 4.5.1 said to use obsolete 3.0 ver [ca 2007.06]
https://www.cmascenter.org/ioapi/documentation/all_versions/html/AVAIL.html#v30

ioapi doc says ver 0.9 to 3.1 is upward compatible by concious effort.
so, using that (3.2 has a few compatibility problem).
https://www.cmascenter.org/ioapi/documentation/all_versions/html/AVAIL.html#v31

rm -rf m3tools notcdf exclude Makefile* HTML iotests ioapi  README.txt VERSION.txt
tar xfz ioapi-3.1.tar.gz 
# rm ioapi 3.0 files first  cuz don't want files not in 3.1 to linger
# and indeed there are quite a number per git status
# see https://github.com/tin6150/cmaq/commit/335342627666d614d807f498713838d29cebe825 for diff ioapi 3.0 -> 3.1






ISSUE
-----

1.
https://www.cmascenter.org/ioapi/documentation/all_versions/html/AVAIL.html#ncf4
says netCDF4 removed `CALL NC*()` 
ioapi 3.2 was re-coded to use `IERR=NF_*()`.  Since I am using SMF netCDF 4.6.1, i might run into issue.
CMAQ 4.5.1 says to use IOAPI 3.0.  Not sure if that old code will work with 3.2...

2.
linux memory model.
module show netcdf/4.4.1.1-intel-p says nothing of memory model.  so maybe was using default.
this means limit to 2GB of RAM.
If future has memory problem... 
Try `-mcmodel=large` with intel first.  if fails, use `-mcmodel=medium`


LOG
---


**^ tin viz.scs00 ~/gs/tin-gh/cmaq/ioapi ^**>  
follow ioapi/README.txt
	setenv BIN `uname -s``uname -r | cut -d. -f1`
	Linux3 # on beagle or lrc
	Linux4 # on bofh (mint)
vi Makefile
	there is a `make configure`!! how come doc don't talk about it??!
	these next two files likely can be generated by `make configure`, which also create a .cpl version
vi m3tools/Makefile
vi ioapi/Makefile
	2 version of these Makefile(s) now.
	(1) .intel_ghome, ie for install into Ling's dir 
	##SNHOME     = /global/home/users/tin/gs/tin-gh/cmaq/
    ##DSTBASE    = /global/home/groups-sw/pc_adjoint/Tin_Ho/CMAS4.5.1/rel/
    (2) .pgi_container, ie for install inside singularity cmaq.img
	SNHOME     = /home/tin/tin-gh/cmaq/ioapi   # BASEDIR=${SNHOME}/ioapi 
	DSTBASE    = /opt/CMAS4.5.1/rel/

mkdir -p ${DSTBASE}/lib/ioapi_3  
mkdir -p /opt/CMAS4.5.1/rel/lib/ioapi_3


(still in cmaq/ioapi/ioapi/ )
cp Makeinclude.Linux2_x86_64ifortdbg Makeinclude.Linux3 + edit  # for intel 
	2 version too at this point
cp Makeinclude.Linux2_x86_64pg       Makeinclude.Linux4.pgi + edit  # cp to Makeinclude.Linux4


#module load netcdf/4.6.1-intel-p	# so that -lnetcdf can find it
make

*sigh* nope, doesn't work.  many unfindible symbols.
make clean

new plan: compile my own netcdf, with -mcmodel=medium

2019.0721 compile in PGI singularity container interactively
(no more module load netcdf/4.6.1-intel-p, the container has its own lib)

